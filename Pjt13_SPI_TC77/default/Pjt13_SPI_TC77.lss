
Pjt13_SPI_TC77.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800200  000028fa  0000298e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  008004d0  008004d0  00002c5e  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00003ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004c8  00000000  00000000  00004180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d5a  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002702  00000000  00000000  000093a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002390  00000000  00000000  0000baa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cbc  00000000  00000000  0000de34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bbb  00000000  00000000  0000eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f19  00000000  00000000  0000f6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000125c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__vector_24>
      64:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ef       	ldi	r30, 0xFA	; 250
      fc:	f8 e2       	ldi	r31, 0x28	; 40
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3d       	cpi	r26, 0xD0	; 208
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	a0 ed       	ldi	r26, 0xD0	; 208
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a4 31       	cpi	r26, 0x14	; 20
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <main>
     124:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include "timer.h"
#include "adc.h"

void adc_init()
{
	cbi(DDRF, PF0);
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <task_tc1047>:

void task_tc1047(char *arg)
{
	static int	value;
	static int	volatile in_adc = 0;
	if (!strcmp(arg, "")) {
     156:	fc 01       	movw	r30, r24
     158:	20 81       	ld	r18, Z
     15a:	22 23       	and	r18, r18
     15c:	19 f5       	brne	.+70     	; 0x1a4 <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     15e:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	90 93 d1 04 	sts	0x04D1, r25
     16a:	80 93 d0 04 	sts	0x04D0, r24
     16e:	80 91 d0 04 	lds	r24, 0x04D0
     172:	90 91 d1 04 	lds	r25, 0x04D1
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	d1 f7       	brne	.-12     	; 0x16e <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n$ ", value);
     17a:	00 d0       	rcall	.+0      	; 0x17c <task_tc1047+0x26>
     17c:	0f 92       	push	r0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	92 e0       	ldi	r25, 0x02	; 2
     182:	ed b7       	in	r30, 0x3d	; 61
     184:	fe b7       	in	r31, 0x3e	; 62
     186:	92 83       	std	Z+2, r25	; 0x02
     188:	81 83       	std	Z+1, r24	; 0x01
     18a:	80 91 d2 04 	lds	r24, 0x04D2
     18e:	90 91 d3 04 	lds	r25, 0x04D3
     192:	94 83       	std	Z+4, r25	; 0x04
     194:	83 83       	std	Z+3, r24	; 0x03
     196:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	08 95       	ret
	}
	else {
		value = atoi(arg) * (1.1/1023) * 1000;
     1a4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     1a8:	9c 01       	movw	r18, r24
     1aa:	b9 01       	movw	r22, r18
     1ac:	88 27       	eor	r24, r24
     1ae:	77 fd       	sbrc	r23, 7
     1b0:	80 95       	com	r24
     1b2:	98 2f       	mov	r25, r24
     1b4:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__floatsisf>
     1b8:	29 e0       	ldi	r18, 0x09	; 9
     1ba:	30 ef       	ldi	r19, 0xF0	; 240
     1bc:	4c e8       	ldi	r20, 0x8C	; 140
     1be:	5a e3       	ldi	r21, 0x3A	; 58
     1c0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__mulsf3>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	4a e7       	ldi	r20, 0x7A	; 122
     1ca:	54 e4       	ldi	r21, 0x44	; 68
     1cc:	0e 94 3f 0a 	call	0x147e	; 0x147e <__mulsf3>
     1d0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fixsfsi>
     1d4:	dc 01       	movw	r26, r24
     1d6:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     1d8:	84 5f       	subi	r24, 0xF4	; 244
     1da:	91 40       	sbci	r25, 0x01	; 1
     1dc:	6a e0       	ldi	r22, 0x0A	; 10
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     1e4:	70 93 d3 04 	sts	0x04D3, r23
     1e8:	60 93 d2 04 	sts	0x04D2, r22
		in_adc = 0;
     1ec:	10 92 d1 04 	sts	0x04D1, r1
     1f0:	10 92 d0 04 	sts	0x04D0, r1
     1f4:	08 95       	ret

000001f6 <__vector_29>:
	sbi(ADCSRA, ADIE);
	sbi(ADCSRA, ADSC);
}

ISR(ADC_vect)
{
     1f6:	1f 92       	push	r1
     1f8:	0f 92       	push	r0
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	0f 92       	push	r0
     1fe:	0b b6       	in	r0, 0x3b	; 59
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	28 97       	sbiw	r28, 0x08	; 8
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	cd bf       	out	0x3d, r28	; 61
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     22e:	80 91 78 00 	lds	r24, 0x0078
     232:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     236:	ea e7       	ldi	r30, 0x7A	; 122
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	20 81       	ld	r18, Z
     23c:	2f 77       	andi	r18, 0x7F	; 127
     23e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     240:	00 d0       	rcall	.+0      	; 0x242 <__vector_29+0x4c>
     242:	00 d0       	rcall	.+0      	; 0x244 <__vector_29+0x4e>
     244:	ed b7       	in	r30, 0x3d	; 61
     246:	fe b7       	in	r31, 0x3e	; 62
     248:	31 96       	adiw	r30, 0x01	; 1
     24a:	8e 01       	movw	r16, r28
     24c:	0f 5f       	subi	r16, 0xFF	; 255
     24e:	1f 4f       	sbci	r17, 0xFF	; 255
     250:	ad b7       	in	r26, 0x3d	; 61
     252:	be b7       	in	r27, 0x3e	; 62
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	1c 93       	st	X, r17
     258:	0e 93       	st	-X, r16
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	25 e2       	ldi	r18, 0x25	; 37
     25e:	32 e0       	ldi	r19, 0x02	; 2
     260:	33 83       	std	Z+3, r19	; 0x03
     262:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     264:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     266:	95 83       	std	Z+5, r25	; 0x05
     268:	84 83       	std	Z+4, r24	; 0x04
     26a:	0e 94 65 11 	call	0x22ca	; 0x22ca <sprintf>

	task_tc1047(arg);
     26e:	8d b7       	in	r24, 0x3d	; 61
     270:	9e b7       	in	r25, 0x3e	; 62
     272:	06 96       	adiw	r24, 0x06	; 6
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	9e bf       	out	0x3e, r25	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	8d bf       	out	0x3d, r24	; 61
     27e:	c8 01       	movw	r24, r16
     280:	0e 94 ab 00 	call	0x156	; 0x156 <task_tc1047>
}
     284:	28 96       	adiw	r28, 0x08	; 8
     286:	de bf       	out	0x3e, r29	; 62
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	ff 91       	pop	r31
     290:	ef 91       	pop	r30
     292:	bf 91       	pop	r27
     294:	af 91       	pop	r26
     296:	9f 91       	pop	r25
     298:	8f 91       	pop	r24
     29a:	7f 91       	pop	r23
     29c:	6f 91       	pop	r22
     29e:	5f 91       	pop	r21
     2a0:	4f 91       	pop	r20
     2a2:	3f 91       	pop	r19
     2a4:	2f 91       	pop	r18
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	0f 90       	pop	r0
     2ac:	0b be       	out	0x3b, r0	; 59
     2ae:	0f 90       	pop	r0
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	0f 90       	pop	r0
     2b4:	1f 90       	pop	r1
     2b6:	18 95       	reti

000002b8 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <malloc>
	return(cp);
}
     2c0:	08 95       	ret

000002c2 <free_node>:

void free_node(struct node *np)
{
	free(np);
     2c2:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <free>
}
     2c6:	08 95       	ret

000002c8 <insert_node_head>:

void insert_node_head(struct node *np)
{
     2c8:	fc 01       	movw	r30, r24
	if(!Head) {
     2ca:	80 91 d4 04 	lds	r24, 0x04D4
     2ce:	90 91 d5 04 	lds	r25, 0x04D5
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	39 f4       	brne	.+14     	; 0x2e4 <insert_node_head+0x1c>
		Head = np;
     2d6:	f0 93 d5 04 	sts	0x04D5, r31
     2da:	e0 93 d4 04 	sts	0x04D4, r30
		np->link = NULL;
     2de:	13 82       	std	Z+3, r1	; 0x03
     2e0:	12 82       	std	Z+2, r1	; 0x02
     2e2:	08 95       	ret
	} else {
		np->link = Head;
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     2e8:	f0 93 d5 04 	sts	0x04D5, r31
     2ec:	e0 93 d4 04 	sts	0x04D4, r30
     2f0:	08 95       	ret

000002f2 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     2f2:	e0 91 d4 04 	lds	r30, 0x04D4
     2f6:	f0 91 d5 04 	lds	r31, 0x04D5
     2fa:	30 97       	sbiw	r30, 0x00	; 0
     2fc:	31 f4       	brne	.+12     	; 0x30a <insert_node_tail+0x18>
		Head = np;
     2fe:	90 93 d5 04 	sts	0x04D5, r25
     302:	80 93 d4 04 	sts	0x04D4, r24
     306:	08 c0       	rjmp	.+16     	; 0x318 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     308:	f9 01       	movw	r30, r18
     30a:	22 81       	ldd	r18, Z+2	; 0x02
     30c:	33 81       	ldd	r19, Z+3	; 0x03
     30e:	21 15       	cp	r18, r1
     310:	31 05       	cpc	r19, r1
     312:	d1 f7       	brne	.-12     	; 0x308 <insert_node_tail+0x16>
			;
		cp->link = np;
     314:	93 83       	std	Z+3, r25	; 0x03
     316:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     318:	fc 01       	movw	r30, r24
     31a:	13 82       	std	Z+3, r1	; 0x03
     31c:	12 82       	std	Z+2, r1	; 0x02
}
     31e:	08 95       	ret

00000320 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	
	if(!Head) {
     326:	20 91 d4 04 	lds	r18, 0x04D4
     32a:	30 91 d5 04 	lds	r19, 0x04D5
     32e:	21 15       	cp	r18, r1
     330:	31 05       	cpc	r19, r1
     332:	31 f0       	breq	.+12     	; 0x340 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     334:	40 81       	ld	r20, Z
     336:	51 81       	ldd	r21, Z+1	; 0x01
     338:	d9 01       	movw	r26, r18
     33a:	c0 e0       	ldi	r28, 0x00	; 0
     33c:	d0 e0       	ldi	r29, 0x00	; 0
     33e:	0f c0       	rjmp	.+30     	; 0x35e <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	
	if(!Head) {
		Head = np;
     340:	90 93 d5 04 	sts	0x04D5, r25
     344:	80 93 d4 04 	sts	0x04D4, r24
		np->link = NULL;
     348:	13 82       	std	Z+3, r1	; 0x03
     34a:	12 82       	std	Z+2, r1	; 0x02
     34c:	1d c0       	rjmp	.+58     	; 0x388 <insert_node_ascn+0x68>
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     34e:	12 96       	adiw	r26, 0x02	; 2
     350:	8d 91       	ld	r24, X+
     352:	9c 91       	ld	r25, X
     354:	13 97       	sbiw	r26, 0x03	; 3
     356:	ed 01       	movw	r28, r26
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	39 f0       	breq	.+14     	; 0x36a <insert_node_ascn+0x4a>
     35c:	dc 01       	movw	r26, r24
     35e:	8d 91       	ld	r24, X+
     360:	9c 91       	ld	r25, X
     362:	11 97       	sbiw	r26, 0x01	; 1
     364:	84 17       	cp	r24, r20
     366:	95 07       	cpc	r25, r21
     368:	94 f3       	brlt	.-28     	; 0x34e <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     36a:	20 97       	sbiw	r28, 0x00	; 0
     36c:	39 f4       	brne	.+14     	; 0x37c <insert_node_ascn+0x5c>
			np->link = Head;
     36e:	33 83       	std	Z+3, r19	; 0x03
     370:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     372:	f0 93 d5 04 	sts	0x04D5, r31
     376:	e0 93 d4 04 	sts	0x04D4, r30
     37a:	06 c0       	rjmp	.+12     	; 0x388 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	93 83       	std	Z+3, r25	; 0x03
     382:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     384:	fb 83       	std	Y+3, r31	; 0x03
     386:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <tour_list>:

void tour_list()
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     396:	8a e0       	ldi	r24, 0x0A	; 10
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 30 11 	call	0x2260	; 0x2260 <putchar>
	for(cp = Head; cp->link != NULL; cp = cp->link)
     39e:	c0 91 d4 04 	lds	r28, 0x04D4
     3a2:	d0 91 d5 04 	lds	r29, 0x04D5
		printf("-->%c ", cp->data);
     3a6:	08 e2       	ldi	r16, 0x28	; 40
     3a8:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     3aa:	13 c0       	rjmp	.+38     	; 0x3d2 <tour_list+0x44>
		printf("-->%c ", cp->data);
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <tour_list+0x20>
     3ae:	0f 92       	push	r0
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	12 83       	std	Z+2, r17	; 0x02
     3b6:	01 83       	std	Z+1, r16	; 0x01
     3b8:	88 81       	ld	r24, Y
     3ba:	99 81       	ldd	r25, Y+1	; 0x01
     3bc:	94 83       	std	Z+4, r25	; 0x04
     3be:	83 83       	std	Z+3, r24	; 0x03
     3c0:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     3c4:	0a 80       	ldd	r0, Y+2	; 0x02
     3c6:	db 81       	ldd	r29, Y+3	; 0x03
     3c8:	c0 2d       	mov	r28, r0
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	9b 81       	ldd	r25, Y+3	; 0x03
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	49 f7       	brne	.-46     	; 0x3ac <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     3da:	8a e0       	ldi	r24, 0x0A	; 10
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 30 11 	call	0x2260	; 0x2260 <putchar>
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <free_list>:

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     3ec:	09 c0       	rjmp	.+18     	; 0x400 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     3ee:	fc 01       	movw	r30, r24
     3f0:	22 81       	ldd	r18, Z+2	; 0x02
     3f2:	33 81       	ldd	r19, Z+3	; 0x03
     3f4:	30 93 d5 04 	sts	0x04D5, r19
     3f8:	20 93 d4 04 	sts	0x04D4, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     3fc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <free>

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     400:	80 91 d4 04 	lds	r24, 0x04D4
     404:	90 91 d5 04 	lds	r25, 0x04D5
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	89 f7       	brne	.-30     	; 0x3ee <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     40c:	08 95       	ret

0000040e <app_list>:

void app_list(char *ap)
{
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	28 97       	sbiw	r28, 0x08	; 8
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	19 f0       	breq	.+6      	; 0x432 <app_list+0x24>
     42c:	fc 01       	movw	r30, r24
     42e:	10 81       	ld	r17, Z
     430:	01 c0       	rjmp	.+2      	; 0x434 <app_list+0x26>
	}
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     432:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     434:	8f e2       	ldi	r24, 0x2F	; 47
     436:	e8 2e       	mov	r14, r24
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	f8 2e       	mov	r15, r24
     43c:	0f 92       	push	r0
     43e:	0f 92       	push	r0
     440:	ed b7       	in	r30, 0x3d	; 61
     442:	fe b7       	in	r31, 0x3e	; 62
     444:	f2 82       	std	Z+2, r15	; 0x02
     446:	e1 82       	std	Z+1, r14	; 0x01
     448:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
		if(fgets(buf, 8, stdin) == NULL) {
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	40 91 0e 06 	lds	r20, 0x060E
     454:	50 91 0f 06 	lds	r21, 0x060F
     458:	ce 01       	movw	r24, r28
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	68 e0       	ldi	r22, 0x08	; 8
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 c4 10 	call	0x2188	; 0x2188 <fgets>
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	a1 f0       	breq	.+40     	; 0x490 <app_list+0x82>
			break;
		}
		np = get_node();
     468:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <get_node>
		np->data = buf[0];
     46c:	29 81       	ldd	r18, Y+1	; 0x01
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
     472:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     474:	18 36       	cpi	r17, 0x68	; 104
     476:	19 f0       	breq	.+6      	; 0x47e <app_list+0x70>
     478:	14 37       	cpi	r17, 0x74	; 116
     47a:	39 f4       	brne	.+14     	; 0x48a <app_list+0x7c>
     47c:	03 c0       	rjmp	.+6      	; 0x484 <app_list+0x76>
			case	'h' : insert_node_head(np); break;
     47e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <insert_node_head>
     482:	dc cf       	rjmp	.-72     	; 0x43c <app_list+0x2e>
			case	't' : insert_node_tail(np); break;
     484:	0e 94 79 01 	call	0x2f2	; 0x2f2 <insert_node_tail>
     488:	d9 cf       	rjmp	.-78     	; 0x43c <app_list+0x2e>
			default     : insert_node_ascn(np);
     48a:	0e 94 90 01 	call	0x320	; 0x320 <insert_node_ascn>
     48e:	d6 cf       	rjmp	.-84     	; 0x43c <app_list+0x2e>
		}
	}
	tour_list();
     490:	0e 94 c7 01 	call	0x38e	; 0x38e <tour_list>
	free_list();
     494:	0e 94 f6 01 	call	0x3ec	; 0x3ec <free_list>
}
     498:	28 96       	adiw	r28, 0x08	; 8
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	08 95       	ret

000004b0 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	fc 01       	movw	r30, r24
	int i; 
	for (i = 2; i <= n/2; i++)
     4b6:	62 e0       	ldi	r22, 0x02	; 2
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     4be:	eb 01       	movw	r28, r22
     4c0:	22 e0       	ldi	r18, 0x02	; 2
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <is_prime+0x26>
		if((n % i) == 0)
     4c6:	cf 01       	movw	r24, r30
     4c8:	b9 01       	movw	r22, r18
     4ca:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	41 f0       	breq	.+16     	; 0x4e2 <is_prime+0x32>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
     4d2:	2f 5f       	subi	r18, 0xFF	; 255
     4d4:	3f 4f       	sbci	r19, 0xFF	; 255
     4d6:	c2 17       	cp	r28, r18
     4d8:	d3 07       	cpc	r29, r19
     4da:	ac f7       	brge	.-22     	; 0x4c6 <is_prime+0x16>
		if((n % i) == 0)
			return (0);
	return (1);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <is_prime+0x36>

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return (0);
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <task_prime>:

void task_prime(char *ap)
{
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	21 f0       	breq	.+8      	; 0x508 <task_prime+0x1c>
     500:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     504:	7c 01       	movw	r14, r24
     506:	04 c0       	rjmp	.+8      	; 0x510 <task_prime+0x24>
	return (1);
}

void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;
     508:	90 ed       	ldi	r25, 0xD0	; 208
     50a:	e9 2e       	mov	r14, r25
     50c:	97 e0       	ldi	r25, 0x07	; 7
     50e:	f9 2e       	mov	r15, r25
     510:	00 e0       	ldi	r16, 0x00	; 0
     512:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     514:	c2 e0       	ldi	r28, 0x02	; 2
     516:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
     518:	85 e3       	ldi	r24, 0x35	; 53
     51a:	c8 2e       	mov	r12, r24
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	d8 2e       	mov	r13, r24
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     520:	16 c0       	rjmp	.+44     	; 0x54e <task_prime+0x62>
		if (is_prime(n)) {
     522:	ce 01       	movw	r24, r28
     524:	0e 94 58 02 	call	0x4b0	; 0x4b0 <is_prime>
     528:	00 97       	sbiw	r24, 0x00	; 0
     52a:	81 f0       	breq	.+32     	; 0x54c <task_prime+0x60>
			count++;
     52c:	0f 5f       	subi	r16, 0xFF	; 255
     52e:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n", n);
     530:	00 d0       	rcall	.+0      	; 0x532 <task_prime+0x46>
     532:	0f 92       	push	r0
     534:	ed b7       	in	r30, 0x3d	; 61
     536:	fe b7       	in	r31, 0x3e	; 62
     538:	d2 82       	std	Z+2, r13	; 0x02
     53a:	c1 82       	std	Z+1, r12	; 0x01
     53c:	d4 83       	std	Z+4, r29	; 0x04
     53e:	c3 83       	std	Z+3, r28	; 0x03
     540:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     54c:	21 96       	adiw	r28, 0x01	; 1
     54e:	ec 16       	cp	r14, r28
     550:	fd 06       	cpc	r15, r29
     552:	3c f7       	brge	.-50     	; 0x522 <task_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
		}
	}
	printf("count = %d\n", count);
     554:	00 d0       	rcall	.+0      	; 0x556 <task_prime+0x6a>
     556:	0f 92       	push	r0
     558:	8f e4       	ldi	r24, 0x4F	; 79
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	ed b7       	in	r30, 0x3d	; 61
     55e:	fe b7       	in	r31, 0x3e	; 62
     560:	92 83       	std	Z+2, r25	; 0x02
     562:	81 83       	std	Z+1, r24	; 0x01
     564:	14 83       	std	Z+4, r17	; 0x04
     566:	03 83       	std	Z+3, r16	; 0x03
     568:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
	printf("$ ");
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	8b e5       	ldi	r24, 0x5B	; 91
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	ed b7       	in	r30, 0x3d	; 61
     576:	fe b7       	in	r31, 0x3e	; 62
     578:	92 83       	std	Z+2, r25	; 0x02
     57a:	81 83       	std	Z+1, r24	; 0x01
     57c:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	df 90       	pop	r13
     592:	cf 90       	pop	r12
     594:	08 95       	ret

00000596 <task_sum>:

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	19 f0       	breq	.+6      	; 0x5a0 <task_sum+0xa>
     59a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <task_sum+0xe>
	printf("$ ");
}

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;
     5a0:	84 e6       	ldi	r24, 0x64	; 100
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <task_sum+0x20>
		sum += n; 
     5ae:	42 0f       	add	r20, r18
     5b0:	53 1f       	adc	r21, r19
void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     5b2:	2f 5f       	subi	r18, 0xFF	; 255
     5b4:	3f 4f       	sbci	r19, 0xFF	; 255
     5b6:	82 17       	cp	r24, r18
     5b8:	93 07       	cpc	r25, r19
     5ba:	cc f7       	brge	.-14     	; 0x5ae <task_sum+0x18>
		sum += n; 
	}
	printf("sum = %d\n", sum);
     5bc:	00 d0       	rcall	.+0      	; 0x5be <task_sum+0x28>
     5be:	0f 92       	push	r0
     5c0:	8e e5       	ldi	r24, 0x5E	; 94
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	ed b7       	in	r30, 0x3d	; 61
     5c6:	fe b7       	in	r31, 0x3e	; 62
     5c8:	92 83       	std	Z+2, r25	; 0x02
     5ca:	81 83       	std	Z+1, r24	; 0x01
     5cc:	54 83       	std	Z+4, r21	; 0x04
     5ce:	43 83       	std	Z+3, r20	; 0x03
     5d0:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
	printf("$ ");
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	8b e5       	ldi	r24, 0x5B	; 91
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	ed b7       	in	r30, 0x3d	; 61
     5de:	fe b7       	in	r31, 0x3e	; 62
     5e0:	92 83       	std	Z+2, r25	; 0x02
     5e2:	81 83       	std	Z+1, r24	; 0x01
     5e4:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
}
     5ec:	08 95       	ret

000005ee <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int  fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     5ee:	10 92 22 05 	sts	0x0522, r1
     5f2:	10 92 21 05 	sts	0x0521, r1
     5f6:	10 92 20 05 	sts	0x0520, r1
     5fa:	10 92 1f 05 	sts	0x051F, r1
     5fe:	10 92 24 05 	sts	0x0524, r1
     602:	10 92 23 05 	sts	0x0523, r1
     606:	10 92 de 04 	sts	0x04DE, r1
     60a:	10 92 dd 04 	sts	0x04DD, r1
}
     60e:	08 95       	ret

00000610 <qi_insert>:

int qi_insert(char ch)
{
     610:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     612:	20 91 23 05 	lds	r18, 0x0523
     616:	30 91 24 05 	lds	r19, 0x0524
     61a:	2f 5f       	subi	r18, 0xFF	; 255
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	c9 01       	movw	r24, r18
     620:	60 e4       	ldi	r22, 0x40	; 64
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     628:	9c 01       	movw	r18, r24
     62a:	80 91 dd 04 	lds	r24, 0x04DD
     62e:	90 91 de 04 	lds	r25, 0x04DE
     632:	28 17       	cp	r18, r24
     634:	39 07       	cpc	r19, r25
     636:	59 f0       	breq	.+22     	; 0x64e <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     638:	30 93 24 05 	sts	0x0524, r19
     63c:	20 93 23 05 	sts	0x0523, r18
	qi[ri] = ch;
     640:	2b 5d       	subi	r18, 0xDB	; 219
     642:	3a 4f       	sbci	r19, 0xFA	; 250
     644:	f9 01       	movw	r30, r18
     646:	40 83       	st	Z, r20
	return(1);
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     652:	08 95       	ret

00000654 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     654:	80 91 dd 04 	lds	r24, 0x04DD
     658:	90 91 de 04 	lds	r25, 0x04DE
     65c:	20 91 23 05 	lds	r18, 0x0523
     660:	30 91 24 05 	lds	r19, 0x0524
     664:	28 17       	cp	r18, r24
     666:	39 07       	cpc	r19, r25
     668:	79 f0       	breq	.+30     	; 0x688 <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	60 e4       	ldi	r22, 0x40	; 64
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     674:	90 93 de 04 	sts	0x04DE, r25
     678:	80 93 dd 04 	sts	0x04DD, r24
	return(qi[fi]);
     67c:	8b 5d       	subi	r24, 0xDB	; 219
     67e:	9a 4f       	sbci	r25, 0xFA	; 250
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return(0);
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     68c:	08 95       	ret

0000068e <qo_insert>:

int qo_insert(char ch)
{
     68e:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     690:	20 91 21 05 	lds	r18, 0x0521
     694:	30 91 22 05 	lds	r19, 0x0522
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	c9 01       	movw	r24, r18
     69e:	60 e4       	ldi	r22, 0x40	; 64
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     6a6:	9c 01       	movw	r18, r24
     6a8:	80 91 1f 05 	lds	r24, 0x051F
     6ac:	90 91 20 05 	lds	r25, 0x0520
     6b0:	28 17       	cp	r18, r24
     6b2:	39 07       	cpc	r19, r25
     6b4:	59 f0       	breq	.+22     	; 0x6cc <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     6b6:	30 93 22 05 	sts	0x0522, r19
     6ba:	20 93 21 05 	sts	0x0521, r18
	qo[ro] = ch;
     6be:	21 52       	subi	r18, 0x21	; 33
     6c0:	3b 4f       	sbci	r19, 0xFB	; 251
     6c2:	f9 01       	movw	r30, r18
     6c4:	40 83       	st	Z, r20
	return(1);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     6d0:	08 95       	ret

000006d2 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     6d2:	80 91 1f 05 	lds	r24, 0x051F
     6d6:	90 91 20 05 	lds	r25, 0x0520
     6da:	20 91 21 05 	lds	r18, 0x0521
     6de:	30 91 22 05 	lds	r19, 0x0522
     6e2:	28 17       	cp	r18, r24
     6e4:	39 07       	cpc	r19, r25
     6e6:	79 f0       	breq	.+30     	; 0x706 <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	60 e4       	ldi	r22, 0x40	; 64
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     6f2:	90 93 20 05 	sts	0x0520, r25
     6f6:	80 93 1f 05 	sts	0x051F, r24
	return(qo[fo]);
     6fa:	81 52       	subi	r24, 0x21	; 33
     6fc:	9b 4f       	sbci	r25, 0xFB	; 251
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return(0);
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     70a:	08 95       	ret

0000070c <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     70c:	80 91 dd 04 	lds	r24, 0x04DD
     710:	90 91 de 04 	lds	r25, 0x04DE
     714:	20 91 23 05 	lds	r18, 0x0523
     718:	30 91 24 05 	lds	r19, 0x0524
     71c:	82 17       	cp	r24, r18
     71e:	93 07       	cpc	r25, r19
     720:	59 f0       	breq	.+22     	; 0x738 <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	60 e4       	ldi	r22, 0x40	; 64
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     72c:	8b 5d       	subi	r24, 0xDB	; 219
     72e:	9a 4f       	sbci	r25, 0xFA	; 250
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     73c:	08 95       	ret

0000073e <what_task>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     74c:	00 e0       	ldi	r16, 0x00	; 0
     74e:	10 e0       	ldi	r17, 0x00	; 0
     750:	17 c0       	rjmp	.+46     	; 0x780 <what_task+0x42>
		if (!strcmp(name, Task_tab[i].task_name))
     752:	e8 01       	movw	r28, r16
     754:	cc 0f       	add	r28, r28
     756:	dd 1f       	adc	r29, r29
     758:	c8 01       	movw	r24, r16
     75a:	25 e0       	ldi	r18, 0x05	; 5
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	2a 95       	dec	r18
     762:	e1 f7       	brne	.-8      	; 0x75c <what_task+0x1e>
     764:	c8 0f       	add	r28, r24
     766:	d9 1f       	adc	r29, r25
     768:	cd 55       	subi	r28, 0x5D	; 93
     76a:	dd 4f       	sbci	r29, 0xFD	; 253
     76c:	c7 01       	movw	r24, r14
     76e:	be 01       	movw	r22, r28
     770:	0e 94 85 10 	call	0x210a	; 0x210a <strcmp>
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	11 f4       	brne	.+4      	; 0x77c <what_task+0x3e>
			return(&Task_tab[i]);
     778:	ce 01       	movw	r24, r28
     77a:	0b c0       	rjmp	.+22     	; 0x792 <what_task+0x54>
int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
	int i;
	for (i = 0; i < Task_cnt; i++)
     77c:	0f 5f       	subi	r16, 0xFF	; 255
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	80 91 a1 02 	lds	r24, 0x02A1
     784:	90 91 a2 02 	lds	r25, 0x02A2
     788:	08 17       	cp	r16, r24
     78a:	19 07       	cpc	r17, r25
     78c:	14 f3       	brlt	.-60     	; 0x752 <what_task+0x14>
		if (!strcmp(name, Task_tab[i].task_name))
			return(&Task_tab[i]);

	return(NULL);
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	08 95       	ret

000007a0 <task_init>:
struct task 	Task_q[MAX_TASK];
volatile int	Task_f, Task_r;

void task_init()
{
	Task_f = Task_r = 0;
     7a0:	10 92 66 05 	sts	0x0566, r1
     7a4:	10 92 65 05 	sts	0x0565, r1
     7a8:	10 92 08 06 	sts	0x0608, r1
     7ac:	10 92 07 06 	sts	0x0607, r1
}
     7b0:	08 95       	ret

000007b2 <task_insert>:

int task_insert(struct task *tskp)
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	48 2f       	mov	r20, r24
     7b8:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     7ba:	80 91 65 05 	lds	r24, 0x0565
     7be:	90 91 66 05 	lds	r25, 0x0566
     7c2:	c0 91 07 06 	lds	r28, 0x0607
     7c6:	d0 91 08 06 	lds	r29, 0x0608
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	20 e1       	ldi	r18, 0x10	; 16
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	b9 01       	movw	r22, r18
     7d2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     7d6:	8c 17       	cp	r24, r28
     7d8:	9d 07       	cpc	r25, r29
     7da:	31 f1       	breq	.+76     	; 0x828 <task_insert+0x76>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     7dc:	80 91 65 05 	lds	r24, 0x0565
     7e0:	90 91 66 05 	lds	r25, 0x0566
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	b9 01       	movw	r22, r18
     7e8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     7ec:	90 93 66 05 	sts	0x0566, r25
     7f0:	80 93 65 05 	sts	0x0565, r24
	Task_q[Task_r] = *tskp;
     7f4:	80 91 65 05 	lds	r24, 0x0565
     7f8:	90 91 66 05 	lds	r25, 0x0566
     7fc:	dc 01       	movw	r26, r24
     7fe:	aa 0f       	add	r26, r26
     800:	bb 1f       	adc	r27, r27
     802:	63 e0       	ldi	r22, 0x03	; 3
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	6a 95       	dec	r22
     80a:	e1 f7       	brne	.-8      	; 0x804 <task_insert+0x52>
     80c:	a8 0f       	add	r26, r24
     80e:	b9 1f       	adc	r27, r25
     810:	a9 59       	subi	r26, 0x99	; 153
     812:	ba 4f       	sbci	r27, 0xFA	; 250
     814:	c4 2f       	mov	r28, r20
     816:	de 2f       	mov	r29, r30
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	09 90       	ld	r0, Y+
     81c:	0d 92       	st	X+, r0
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	e1 f7       	brne	.-8      	; 0x81a <task_insert+0x68>
	return (1);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return 0;
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <task_delete>:

int task_delete(struct task *tskp)
{
     832:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     834:	40 91 65 05 	lds	r20, 0x0565
     838:	50 91 66 05 	lds	r21, 0x0566
     83c:	80 91 07 06 	lds	r24, 0x0607
     840:	90 91 08 06 	lds	r25, 0x0608
     844:	48 17       	cp	r20, r24
     846:	59 07       	cpc	r21, r25
     848:	31 f1       	breq	.+76     	; 0x896 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     84a:	80 91 07 06 	lds	r24, 0x0607
     84e:	90 91 08 06 	lds	r25, 0x0608
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	60 e1       	ldi	r22, 0x10	; 16
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
     85c:	90 93 08 06 	sts	0x0608, r25
     860:	80 93 07 06 	sts	0x0607, r24
	*tskp = Task_q[Task_f];
     864:	80 91 07 06 	lds	r24, 0x0607
     868:	90 91 08 06 	lds	r25, 0x0608
     86c:	fc 01       	movw	r30, r24
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	a3 e0       	ldi	r26, 0x03	; 3
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	aa 95       	dec	r26
     87a:	e1 f7       	brne	.-8      	; 0x874 <task_delete+0x42>
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	d9 01       	movw	r26, r18
     882:	e9 59       	subi	r30, 0x99	; 153
     884:	fa 4f       	sbci	r31, 0xFA	; 250
     886:	8a e0       	ldi	r24, 0x0A	; 10
     888:	01 90       	ld	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	81 50       	subi	r24, 0x01	; 1
     88e:	e1 f7       	brne	.-8      	; 0x888 <task_delete+0x56>
	return(1);
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)
		return(0);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     89a:	08 95       	ret

0000089c <task_cmd>:

void task_cmd(char *arg)
{
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	ca 54       	subi	r28, 0x4A	; 74
     8b6:	d0 40       	sbci	r29, 0x00	; 0
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task_tab *tp;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     8c2:	0e 94 7b 07 	call	0xef6	; 0xef6 <uart_peek>
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	09 f4       	brne	.+2      	; 0x8cc <task_cmd+0x30>
     8ca:	8e c0       	rjmp	.+284    	; 0x9e8 <task_cmd+0x14c>

	if (gets(buf) == NULL) {
     8cc:	ce 01       	movw	r24, r28
     8ce:	0b 96       	adiw	r24, 0x0b	; 11
     8d0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <gets>
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	29 f4       	brne	.+10     	; 0x8e2 <task_cmd+0x46>
		printf("logout, goodbye !!!\n");
     8d8:	88 e6       	ldi	r24, 0x68	; 104
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 37 11 	call	0x226e	; 0x226e <puts>
     8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf,  " \t\n\r");
     8e2:	ce 01       	movw	r24, r28
     8e4:	0b 96       	adiw	r24, 0x0b	; 11
     8e6:	6c e7       	ldi	r22, 0x7C	; 124
     8e8:	72 e0       	ldi	r23, 0x02	; 2
     8ea:	0e 94 80 10 	call	0x2100	; 0x2100 <strtok>
     8ee:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	6c e7       	ldi	r22, 0x7C	; 124
     8f6:	72 e0       	ldi	r23, 0x02	; 2
     8f8:	0e 94 80 10 	call	0x2100	; 0x2100 <strtok>
     8fc:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	6c e7       	ldi	r22, 0x7C	; 124
     904:	72 e0       	ldi	r23, 0x02	; 2
     906:	0e 94 80 10 	call	0x2100	; 0x2100 <strtok>
     90a:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	6c e7       	ldi	r22, 0x7C	; 124
     912:	72 e0       	ldi	r23, 0x02	; 2
     914:	0e 94 80 10 	call	0x2100	; 0x2100 <strtok>
     918:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     91a:	01 15       	cp	r16, r1
     91c:	11 05       	cpc	r17, r1
     91e:	29 f4       	brne	.+10     	; 0x92a <task_cmd+0x8e>
		printf("$ "); return;
     920:	0f 92       	push	r0
     922:	0f 92       	push	r0
     924:	81 e8       	ldi	r24, 0x81	; 129
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	47 c0       	rjmp	.+142    	; 0x9b8 <task_cmd+0x11c>
	}

	if (!strcmp(cp0, "timer")) {
     92a:	c8 01       	movw	r24, r16
     92c:	64 e8       	ldi	r22, 0x84	; 132
     92e:	72 e0       	ldi	r23, 0x02	; 2
     930:	0e 94 85 10 	call	0x210a	; 0x210a <strcmp>
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	b9 f5       	brne	.+110    	; 0x9a6 <task_cmd+0x10a>
		if (!cp1 || !cp2) 
     938:	e1 14       	cp	r14, r1
     93a:	f1 04       	cpc	r15, r1
     93c:	19 f0       	breq	.+6      	; 0x944 <task_cmd+0xa8>
     93e:	c1 14       	cp	r12, r1
     940:	d1 04       	cpc	r13, r1
     942:	61 f4       	brne	.+24     	; 0x95c <task_cmd+0xc0>
			printf("Unknown command...\n$ ");
     944:	0f 92       	push	r0
     946:	0f 92       	push	r0
     948:	8a e8       	ldi	r24, 0x8A	; 138
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	ed b7       	in	r30, 0x3d	; 61
     94e:	fe b7       	in	r31, 0x3e	; 62
     950:	92 83       	std	Z+2, r25	; 0x02
     952:	81 83       	std	Z+1, r24	; 0x01
     954:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
		ms = atoi(cp1) / 256;
     95c:	c7 01       	movw	r24, r14
     95e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     962:	8c 01       	movw	r16, r24

		if (!(tp = what_task(cp2))) {
     964:	c6 01       	movw	r24, r12
     966:	0e 94 9f 03 	call	0x73e	; 0x73e <what_task>
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	09 f1       	breq	.+66     	; 0x9b0 <task_cmd+0x114>
			printf("Unknown command...\n$ ");
			return;
		}

		task.fun = tp->task_fun;
     96e:	fc 01       	movw	r30, r24
     970:	80 a1       	lds	r24, 0x40
     972:	91 a1       	lds	r25, 0x41
     974:	9a 83       	std	Y+2, r25	; 0x02
     976:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     978:	ce 01       	movw	r24, r28
     97a:	03 96       	adiw	r24, 0x03	; 3
     97c:	a1 14       	cp	r10, r1
     97e:	b1 04       	cpc	r11, r1
     980:	11 f0       	breq	.+4      	; 0x986 <task_cmd+0xea>
     982:	b5 01       	movw	r22, r10
     984:	02 c0       	rjmp	.+4      	; 0x98a <task_cmd+0xee>
		else	 strcpy(task.arg, "");
     986:	60 ea       	ldi	r22, 0xA0	; 160
     988:	72 e0       	ldi	r23, 0x02	; 2
     98a:	0e 94 8e 10 	call	0x211c	; 0x211c <strcpy>
		
		cli();
     98e:	f8 94       	cli
	}

	if (!strcmp(cp0, "timer")) {
		if (!cp1 || !cp2) 
			printf("Unknown command...\n$ ");
		ms = atoi(cp1) / 256;
     990:	c8 01       	movw	r24, r16
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	71 e0       	ldi	r23, 0x01	; 1
     996:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divmodhi4>
		task.fun = tp->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else	 strcpy(task.arg, "");
		
		cli();
		insert_timer(&task, ms);
     99a:	ce 01       	movw	r24, r28
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	0e 94 0b 05 	call	0xa16	; 0xa16 <insert_timer>
		sei();
     9a2:	78 94       	sei
     9a4:	21 c0       	rjmp	.+66     	; 0x9e8 <task_cmd+0x14c>
	} else {
		if (!(tp = what_task(cp0))) {
     9a6:	c8 01       	movw	r24, r16
     9a8:	0e 94 9f 03 	call	0x73e	; 0x73e <what_task>
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	79 f4       	brne	.+30     	; 0x9ce <task_cmd+0x132>
			printf("Unknown command...\n$ ");
     9b0:	0f 92       	push	r0
     9b2:	0f 92       	push	r0
     9b4:	8a e8       	ldi	r24, 0x8A	; 138
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	ad b7       	in	r26, 0x3d	; 61
     9ba:	be b7       	in	r27, 0x3e	; 62
     9bc:	12 96       	adiw	r26, 0x02	; 2
     9be:	9c 93       	st	X, r25
     9c0:	8e 93       	st	-X, r24
     9c2:	11 97       	sbiw	r26, 0x01	; 1
     9c4:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
			return;
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <task_cmd+0x14c>
     9ce:	dc 01       	movw	r26, r24
     9d0:	90 96       	adiw	r26, 0x20	; 32
     9d2:	ed 91       	ld	r30, X+
     9d4:	fc 91       	ld	r31, X
     9d6:	91 97       	sbiw	r26, 0x21	; 33
		}
		if (cp2) {
     9d8:	c1 14       	cp	r12, r1
     9da:	d1 04       	cpc	r13, r1
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <task_cmd+0x146>
			(*tp->task_fun)(cp1);
     9de:	c7 01       	movw	r24, r14
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <task_cmd+0x14a>
		} else {
			(*tp->task_fun)("");
     9e2:	80 ea       	ldi	r24, 0xA0	; 160
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	19 95       	eicall
		}
	}
}
     9e8:	c6 5b       	subi	r28, 0xB6	; 182
     9ea:	df 4f       	sbci	r29, 0xFF	; 255
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	bf 90       	pop	r11
     a08:	af 90       	pop	r10
     a0a:	08 95       	ret

00000a0c <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     a0c:	8e e0       	ldi	r24, 0x0E	; 14
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <malloc>
	return(tp);
}
     a14:	08 95       	ret

00000a16 <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	f8 2e       	mov	r15, r24
     a24:	e9 2e       	mov	r14, r25
     a26:	8b 01       	movw	r16, r22
	int			total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     a28:	0e 94 06 05 	call	0xa0c	; 0xa0c <get_timer>
     a2c:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     a2e:	dc 01       	movw	r26, r24
     a30:	12 96       	adiw	r26, 0x02	; 2
     a32:	ef 2d       	mov	r30, r15
     a34:	fe 2d       	mov	r31, r14
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	01 90       	ld	r0, Z+
     a3a:	0d 92       	st	X+, r0
     a3c:	81 50       	subi	r24, 0x01	; 1
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <insert_timer+0x22>
	tp->time = ms;
     a40:	19 83       	std	Y+1, r17	; 0x01
     a42:	08 83       	st	Y, r16

	if(Thead == NULL) {
     a44:	e0 91 d6 04 	lds	r30, 0x04D6
     a48:	f0 91 d7 04 	lds	r31, 0x04D7
     a4c:	30 97       	sbiw	r30, 0x00	; 0
     a4e:	29 f4       	brne	.+10     	; 0xa5a <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     a50:	d0 93 d7 04 	sts	0x04D7, r29
     a54:	c0 93 d6 04 	sts	0x04D6, r28
     a58:	2f c0       	rjmp	.+94     	; 0xab8 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     a64:	fd 01       	movw	r30, r26
		total += cp->time;
     a66:	80 81       	ld	r24, Z
     a68:	91 81       	ldd	r25, Z+1	; 0x01
     a6a:	28 0f       	add	r18, r24
     a6c:	39 1f       	adc	r19, r25
		if(total >= ms)
     a6e:	20 17       	cp	r18, r16
     a70:	31 07       	cpc	r19, r17
     a72:	34 f4       	brge	.+12     	; 0xa80 <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     a74:	a4 85       	ldd	r26, Z+12	; 0x0c
     a76:	b5 85       	ldd	r27, Z+13	; 0x0d
     a78:	af 01       	movw	r20, r30
     a7a:	10 97       	sbiw	r26, 0x00	; 0
     a7c:	99 f7       	brne	.-26     	; 0xa64 <insert_timer+0x4e>
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     a80:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     a82:	41 15       	cp	r20, r1
     a84:	51 05       	cpc	r21, r1
     a86:	79 f4       	brne	.+30     	; 0xaa6 <insert_timer+0x90>
		cp->time -= tp->time;
     a88:	8d 91       	ld	r24, X+
     a8a:	9c 91       	ld	r25, X
     a8c:	11 97       	sbiw	r26, 0x01	; 1
     a8e:	80 1b       	sub	r24, r16
     a90:	91 0b       	sbc	r25, r17
     a92:	11 96       	adiw	r26, 0x01	; 1
     a94:	9c 93       	st	X, r25
     a96:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     a98:	bd 87       	std	Y+13, r27	; 0x0d
     a9a:	ac 87       	std	Y+12, r26	; 0x0c
     a9c:	d0 93 d7 04 	sts	0x04D7, r29
     aa0:	c0 93 d6 04 	sts	0x04D6, r28
     aa4:	24 c0       	rjmp	.+72     	; 0xaee <insert_timer+0xd8>
	} else if(cp == NULL) {
     aa6:	10 97       	sbiw	r26, 0x00	; 0
     aa8:	51 f4       	brne	.+20     	; 0xabe <insert_timer+0xa8>
		tp->time -= total;
     aaa:	02 1b       	sub	r16, r18
     aac:	13 0b       	sbc	r17, r19
     aae:	19 83       	std	Y+1, r17	; 0x01
     ab0:	08 83       	st	Y, r16
		pp->link = tp;
     ab2:	fa 01       	movw	r30, r20
     ab4:	d5 87       	std	Z+13, r29	; 0x0d
     ab6:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     ab8:	1d 86       	std	Y+13, r1	; 0x0d
     aba:	1c 86       	std	Y+12, r1	; 0x0c
     abc:	18 c0       	rjmp	.+48     	; 0xaee <insert_timer+0xd8>
	} else {
		total -= cp->time;
     abe:	8d 91       	ld	r24, X+
     ac0:	9c 91       	ld	r25, X
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	b9 01       	movw	r22, r18
     ac6:	68 1b       	sub	r22, r24
     ac8:	79 0b       	sbc	r23, r25
		tp->time -= total;
     aca:	98 01       	movw	r18, r16
     acc:	26 1b       	sub	r18, r22
     ace:	37 0b       	sbc	r19, r23
     ad0:	39 83       	std	Y+1, r19	; 0x01
     ad2:	28 83       	st	Y, r18
		cp->time -= tp->time;
     ad4:	8d 91       	ld	r24, X+
     ad6:	9c 91       	ld	r25, X
     ad8:	11 97       	sbiw	r26, 0x01	; 1
     ada:	82 1b       	sub	r24, r18
     adc:	93 0b       	sbc	r25, r19
     ade:	11 96       	adiw	r26, 0x01	; 1
     ae0:	9c 93       	st	X, r25
     ae2:	8e 93       	st	-X, r24
		pp->link = tp;
     ae4:	fa 01       	movw	r30, r20
     ae6:	d5 87       	std	Z+13, r29	; 0x0d
     ae8:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     aea:	bd 87       	std	Y+13, r27	; 0x0d
     aec:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <tour_timer>:

void tour_timer()
{
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     b08:	8a e0       	ldi	r24, 0x0A	; 10
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 30 11 	call	0x2260	; 0x2260 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     b10:	c0 91 d6 04 	lds	r28, 0x04D6
     b14:	d0 91 d7 04 	lds	r29, 0x04D7
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     b18:	00 e0       	ldi	r16, 0x00	; 0
     b1a:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     b1c:	8b e2       	ldi	r24, 0x2B	; 43
     b1e:	e8 2e       	mov	r14, r24
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     b24:	20 c0       	rjmp	.+64     	; 0xb66 <tour_timer+0x6a>
		total += cp->time;
     b26:	88 81       	ld	r24, Y
     b28:	99 81       	ldd	r25, Y+1	; 0x01
     b2a:	08 0f       	add	r16, r24
     b2c:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <tour_timer+0x34>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <tour_timer+0x36>
     b32:	ed b7       	in	r30, 0x3d	; 61
     b34:	fe b7       	in	r31, 0x3e	; 62
     b36:	31 96       	adiw	r30, 0x01	; 1
     b38:	ad b7       	in	r26, 0x3d	; 61
     b3a:	be b7       	in	r27, 0x3e	; 62
     b3c:	12 96       	adiw	r26, 0x02	; 2
     b3e:	fc 92       	st	X, r15
     b40:	ee 92       	st	-X, r14
     b42:	11 97       	sbiw	r26, 0x01	; 1
     b44:	93 83       	std	Z+3, r25	; 0x03
     b46:	82 83       	std	Z+2, r24	; 0x02
     b48:	15 83       	std	Z+5, r17	; 0x05
     b4a:	04 83       	std	Z+4, r16	; 0x04
     b4c:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     b50:	0c 84       	ldd	r0, Y+12	; 0x0c
     b52:	dd 85       	ldd	r29, Y+13	; 0x0d
     b54:	c0 2d       	mov	r28, r0
     b56:	8d b7       	in	r24, 0x3d	; 61
     b58:	9e b7       	in	r25, 0x3e	; 62
     b5a:	06 96       	adiw	r24, 0x06	; 6
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	9e bf       	out	0x3e, r25	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	8d bf       	out	0x3d, r24	; 61
     b66:	20 97       	sbiw	r28, 0x00	; 0
     b68:	f1 f6       	brne	.-68     	; 0xb26 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     b6a:	8a e0       	ldi	r24, 0x0A	; 10
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 30 11 	call	0x2260	; 0x2260 <putchar>
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <free_timer>:

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     b82:	fc 01       	movw	r30, r24
     b84:	24 85       	ldd	r18, Z+12	; 0x0c
     b86:	35 85       	ldd	r19, Z+13	; 0x0d
     b88:	30 93 d7 04 	sts	0x04D7, r19
     b8c:	20 93 d6 04 	sts	0x04D6, r18
		free(cp);
     b90:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <free>

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     b94:	80 91 d6 04 	lds	r24, 0x04D6
     b98:	90 91 d7 04 	lds	r25, 0x04D7
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	89 f7       	brne	.-30     	; 0xb82 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     ba0:	08 95       	ret

00000ba2 <app_timer>:

void app_timer(char *ap)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	62 97       	sbiw	r28, 0x12	; 18
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task	tsk;

	while(1) {
		printf(">> ");
     bba:	06 e3       	ldi	r16, 0x36	; 54
     bbc:	13 e0       	ldi	r17, 0x03	; 3
     bbe:	0f 92       	push	r0
     bc0:	0f 92       	push	r0
     bc2:	ed b7       	in	r30, 0x3d	; 61
     bc4:	fe b7       	in	r31, 0x3e	; 62
     bc6:	12 83       	std	Z+2, r17	; 0x02
     bc8:	01 83       	std	Z+1, r16	; 0x01
     bca:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	40 91 0e 06 	lds	r20, 0x060E
     bd6:	50 91 0f 06 	lds	r21, 0x060F
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	68 e0       	ldi	r22, 0x08	; 8
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	0e 94 c4 10 	call	0x2188	; 0x2188 <fgets>
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	61 f0       	breq	.+24     	; 0xc02 <app_timer+0x60>
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     bf2:	bc 01       	movw	r22, r24
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	29 f0       	breq	.+10     	; 0xc02 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     bf8:	ce 01       	movw	r24, r28
     bfa:	09 96       	adiw	r24, 0x09	; 9
     bfc:	0e 94 0b 05 	call	0xa16	; 0xa16 <insert_timer>
	}
     c00:	de cf       	rjmp	.-68     	; 0xbbe <app_timer+0x1c>

	tour_timer();
     c02:	0e 94 7e 05 	call	0xafc	; 0xafc <tour_timer>
	free_timer();
     c06:	0e 94 c0 05 	call	0xb80	; 0xb80 <free_timer>
}
     c0a:	62 96       	adiw	r28, 0x12	; 18
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <timer_init>:

void timer_init() {
	TCNT2 = 0;
     c20:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     c24:	e6 eb       	ldi	r30, 0xB6	; 182
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 62       	ori	r24, 0x20	; 32
     c2c:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     c2e:	e0 e7       	ldi	r30, 0x70	; 112
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     c38:	e1 eb       	ldi	r30, 0xB1	; 177
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	80 83       	st	Z, r24
     c42:	80 81       	ld	r24, Z
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	80 83       	st	Z, r24
}
     c48:	08 95       	ret

00000c4a <timer_expire>:
 	if (--Thead->time == 0)
		timer_expire();
}

void timer_expire(void)
{
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     c4e:	0d c0       	rjmp	.+26     	; 0xc6a <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     c50:	8c 85       	ldd	r24, Y+12	; 0x0c
     c52:	9d 85       	ldd	r25, Y+13	; 0x0d
     c54:	90 93 d7 04 	sts	0x04D7, r25
     c58:	80 93 d6 04 	sts	0x04D6, r24

		task_insert(&tp->task);
     c5c:	ce 01       	movw	r24, r28
     c5e:	02 96       	adiw	r24, 0x02	; 2
     c60:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <task_insert>

		free(tp);
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <free>

void timer_expire(void)
{
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     c6a:	c0 91 d6 04 	lds	r28, 0x04D6
     c6e:	d0 91 d7 04 	lds	r29, 0x04D7
     c72:	20 97       	sbiw	r28, 0x00	; 0
     c74:	21 f0       	breq	.+8      	; 0xc7e <timer_expire+0x34>
     c76:	88 81       	ld	r24, Y
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	49 f3       	breq	.-46     	; 0xc50 <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <__vector_15>:
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
}

ISR(TIMER2_OVF_vect)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	0b b6       	in	r0, 0x3b	; 59
     c8e:	0f 92       	push	r0
     c90:	11 24       	eor	r1, r1
     c92:	2f 93       	push	r18
     c94:	3f 93       	push	r19
     c96:	4f 93       	push	r20
     c98:	5f 93       	push	r21
     c9a:	6f 93       	push	r22
     c9c:	7f 93       	push	r23
     c9e:	8f 93       	push	r24
     ca0:	9f 93       	push	r25
     ca2:	af 93       	push	r26
     ca4:	bf 93       	push	r27
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
	if (!Thead)
     caa:	e0 91 d6 04 	lds	r30, 0x04D6
     cae:	f0 91 d7 04 	lds	r31, 0x04D7
     cb2:	30 97       	sbiw	r30, 0x00	; 0
     cb4:	49 f0       	breq	.+18     	; 0xcc8 <__vector_15+0x44>
		return;
 	if (--Thead->time == 0)
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	80 83       	st	Z, r24
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__vector_15+0x44>
		timer_expire();
     cc4:	0e 94 25 06 	call	0xc4a	; 0xc4a <timer_expire>
}
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	0f 90       	pop	r0
     ce2:	0b be       	out	0x3b, r0	; 59
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     cee:	f8 94       	cli
		ch = qi_delete();
     cf0:	0e 94 2a 03 	call	0x654	; 0x654 <qi_delete>
		sei();
     cf4:	78 94       	sei
	} while(ch == 0);
     cf6:	88 23       	and	r24, r24
     cf8:	d1 f3       	breq	.-12     	; 0xcee <uart_getchar>

	if(ch == EOT)	return(-1);
     cfa:	84 30       	cpi	r24, 0x04	; 4
     cfc:	11 f0       	breq	.+4      	; 0xd02 <uart_getchar+0x14>
	else			return(ch);
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while(ch == 0);

	if(ch == EOT)	return(-1);
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     d06:	08 95       	ret

00000d08 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     d08:	cf 93       	push	r28
     d0a:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     d0c:	8a 30       	cpi	r24, 0x0A	; 10
     d0e:	19 f4       	brne	.+6      	; 0xd16 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     d10:	8d e0       	ldi	r24, 0x0D	; 13
     d12:	0e 94 84 06 	call	0xd08	; 0xd08 <uart_putchar>
	
	cli();
     d16:	f8 94       	cli

	if(!uart_busy) {
     d18:	80 91 09 06 	lds	r24, 0x0609
     d1c:	88 23       	and	r24, r24
     d1e:	59 f4       	brne	.+22     	; 0xd36 <uart_putchar+0x2e>
		UDR0 = ch;
     d20:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	80 93 09 06 	sts	0x0609, r24
     d2a:	0a c0       	rjmp	.+20     	; 0xd40 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     d2c:	78 94       	sei
     d2e:	86 ef       	ldi	r24, 0xF6	; 246
     d30:	8a 95       	dec	r24
     d32:	f1 f7       	brne	.-4      	; 0xd30 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     d34:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     d36:	8c 2f       	mov	r24, r28
     d38:	0e 94 47 03 	call	0x68e	; 0x68e <qo_insert>
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	b1 f3       	breq	.-20     	; 0xd2c <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}			
	}
	sei();
     d40:	78 94       	sei

	return(1);
}
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     d4a:	8b e3       	ldi	r24, 0x3B	; 59
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	90 93 0f 06 	sts	0x060F, r25
     d52:	80 93 0e 06 	sts	0x060E, r24
     d56:	89 e4       	ldi	r24, 0x49	; 73
     d58:	93 e0       	ldi	r25, 0x03	; 3
     d5a:	90 93 11 06 	sts	0x0611, r25
     d5e:	80 93 10 06 	sts	0x0610, r24
	uart_busy = 0;
     d62:	10 92 09 06 	sts	0x0609, r1
	q_init();
     d66:	0e 94 f7 02 	call	0x5ee	; 0x5ee <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     d6a:	10 92 c5 00 	sts	0x00C5, r1
     d6e:	87 e0       	ldi	r24, 0x07	; 7
     d70:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     d74:	e0 ec       	ldi	r30, 0xC0	; 192
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     d7e:	e1 ec       	ldi	r30, 0xC1	; 193
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	88 60       	ori	r24, 0x08	; 8
     d86:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     d88:	80 81       	ld	r24, Z
     d8a:	80 64       	ori	r24, 0x40	; 64
     d8c:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     d94:	80 81       	ld	r24, Z
     d96:	80 68       	ori	r24, 0x80	; 128
     d98:	80 83       	st	Z, r24
}
     d9a:	08 95       	ret

00000d9c <__vector_27>:
	if(ch == EOT)	return(-1);
	else			return(ch);
}

ISR(USART0_TX_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	0b b6       	in	r0, 0x3b	; 59
     da6:	0f 92       	push	r0
     da8:	11 24       	eor	r1, r1
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     dc2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <qo_delete>
     dc6:	88 23       	and	r24, r24
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <__vector_27+0x34>
		uart_busy = 0;
     dca:	10 92 09 06 	sts	0x0609, r1
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <__vector_27+0x38>
	else
		UDR0 = ch;
     dd0:	80 93 c6 00 	sts	0x00C6, r24
}
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0b be       	out	0x3b, r0	; 59
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <uart_echo>:
		task_insert(&task);
	}
}

void uart_echo(char ch)
{
     dfa:	cf 93       	push	r28
     dfc:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     dfe:	8a 30       	cpi	r24, 0x0A	; 10
     e00:	19 f4       	brne	.+6      	; 0xe08 <uart_echo+0xe>
     e02:	8d e0       	ldi	r24, 0x0D	; 13
     e04:	0e 94 fd 06 	call	0xdfa	; 0xdfa <uart_echo>
	if(!uart_busy) {
     e08:	80 91 09 06 	lds	r24, 0x0609
     e0c:	88 23       	and	r24, r24
     e0e:	31 f4       	brne	.+12     	; 0xe1c <uart_echo+0x22>
		UDR0 = ch;
     e10:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 09 06 	sts	0x0609, r24
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <uart_echo+0x28>
	}
	else {
		qo_insert(ch);			
     e1c:	8c 2f       	mov	r24, r28
     e1e:	0e 94 47 03 	call	0x68e	; 0x68e <qo_insert>
	}
}
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <__vector_25>:
	else
		UDR0 = ch;
}

ISR(USART0_RX_vect)
{
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	0b b6       	in	r0, 0x3b	; 59
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	1f 93       	push	r17
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	2a 97       	sbiw	r28, 0x0a	; 10
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     e5c:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     e60:	1b 31       	cpi	r17, 0x1B	; 27
     e62:	61 f4       	brne	.+24     	; 0xe7c <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     e64:	80 91 57 03 	lds	r24, 0x0357
     e68:	90 91 58 03 	lds	r25, 0x0358
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	81 70       	andi	r24, 0x01	; 1
     e70:	90 70       	andi	r25, 0x00	; 0
     e72:	90 93 58 03 	sts	0x0358, r25
     e76:	80 93 57 03 	sts	0x0357, r24
		return;
     e7a:	24 c0       	rjmp	.+72     	; 0xec4 <__vector_25+0x9e>
	}

	if(ch !=EOT) {
     e7c:	14 30       	cpi	r17, 0x04	; 4
     e7e:	69 f0       	breq	.+26     	; 0xe9a <__vector_25+0x74>
		if(ch == '\r') ch = '\n';
     e80:	1d 30       	cpi	r17, 0x0D	; 13
     e82:	09 f4       	brne	.+2      	; 0xe86 <__vector_25+0x60>
     e84:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode)  uart_echo(ch);
     e86:	20 91 57 03 	lds	r18, 0x0357
     e8a:	30 91 58 03 	lds	r19, 0x0358
     e8e:	21 15       	cp	r18, r1
     e90:	31 05       	cpc	r19, r1
     e92:	19 f0       	breq	.+6      	; 0xe9a <__vector_25+0x74>
     e94:	81 2f       	mov	r24, r17
     e96:	0e 94 fd 06 	call	0xdfa	; 0xdfa <uart_echo>
	}
	qi_insert(ch);
     e9a:	81 2f       	mov	r24, r17
     e9c:	0e 94 08 03 	call	0x610	; 0x610 <qi_insert>
	if(ch == EOT || ch == '\n') {
     ea0:	14 30       	cpi	r17, 0x04	; 4
     ea2:	11 f0       	breq	.+4      	; 0xea8 <__vector_25+0x82>
     ea4:	1a 30       	cpi	r17, 0x0A	; 10
     ea6:	71 f4       	brne	.+28     	; 0xec4 <__vector_25+0x9e>
		task.fun = task_cmd;
     ea8:	8e e4       	ldi	r24, 0x4E	; 78
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     eb0:	ce 01       	movw	r24, r28
     eb2:	03 96       	adiw	r24, 0x03	; 3
     eb4:	6a e3       	ldi	r22, 0x3A	; 58
     eb6:	73 e0       	ldi	r23, 0x03	; 3
     eb8:	0e 94 8e 10 	call	0x211c	; 0x211c <strcpy>
		task_insert(&task);
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <task_insert>
	}
}
     ec4:	2a 96       	adiw	r28, 0x0a	; 10
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	ff 91       	pop	r31
     ed0:	ef 91       	pop	r30
     ed2:	bf 91       	pop	r27
     ed4:	af 91       	pop	r26
     ed6:	9f 91       	pop	r25
     ed8:	8f 91       	pop	r24
     eda:	7f 91       	pop	r23
     edc:	6f 91       	pop	r22
     ede:	5f 91       	pop	r21
     ee0:	4f 91       	pop	r20
     ee2:	3f 91       	pop	r19
     ee4:	2f 91       	pop	r18
     ee6:	1f 91       	pop	r17
     ee8:	0f 90       	pop	r0
     eea:	0b be       	out	0x3b, r0	; 59
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <uart_peek>:
	}
}

int uart_peek()
{
	return(qi_peek());
     ef6:	0e 94 86 03 	call	0x70c	; 0x70c <qi_peek>
}
     efa:	08 95       	ret

00000efc <spi_init>:
#define TC77_WAIT_HI 1
#define TC77_WAIT_LO 2

void spi_init()
{
	sbi(DDRB, 0); // sbi(DDRB, nSS,nCS); // output
     efc:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1); // sbi(DDRB, SCK); // output
     efe:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2); // sbi(DDRB, MOSI); // output
     f00:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3); // cbi(DDRB, MISO); // input
     f02:	23 98       	cbi	0x04, 3	; 4
	sbi(SPSR, SPI2X); // double speed
     f04:	8d b5       	in	r24, 0x2d	; 45
     f06:	81 60       	ori	r24, 0x01	; 1
     f08:	8d bd       	out	0x2d, r24	; 45
	SPCR = ( (1 << MSTR) | (1 << SPE) | (1 << SPIE) ); // MASTER, MSB first, Fosc/4
     f0a:	80 ed       	ldi	r24, 0xD0	; 208
     f0c:	8c bd       	out	0x2c, r24	; 44
}
     f0e:	08 95       	ret

00000f10 <spi_select>:

void spi_select() { cbi(PORTB, 0); } // cbi(PORTB, nSS)
     f10:	28 98       	cbi	0x05, 0	; 5
     f12:	08 95       	ret

00000f14 <spi_release>:
void spi_release() { sbi(PORTB, 0); } // sbi(PORTB, nSS)
     f14:	28 9a       	sbi	0x05, 0	; 5
     f16:	08 95       	ret

00000f18 <task_tc77>:
	sprintf(task.arg, "%d", data);
	task_insert(&task);
}

void task_tc77(void *arg)
{
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
	static uint8_t state;
	static uint16_t value;

	if (!strcmp(arg, ""))
     f20:	dc 01       	movw	r26, r24
     f22:	2c 91       	ld	r18, X
     f24:	22 23       	and	r18, r18
     f26:	31 f4       	brne	.+12     	; 0xf34 <task_tc77+0x1c>
	{
		state = TC77_WAIT_HI;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 d8 04 	sts	0x04D8, r24
		spi_select();
     f2e:	0e 94 88 07 	call	0xf10	; 0xf10 <spi_select>
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <task_tc77+0x3e>
		spi_write(0x00);
	}
	else
	{
		switch(state)
     f34:	20 91 d8 04 	lds	r18, 0x04D8
     f38:	21 30       	cpi	r18, 0x01	; 1
     f3a:	21 f0       	breq	.+8      	; 0xf44 <task_tc77+0x2c>
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	09 f0       	breq	.+2      	; 0xf42 <task_tc77+0x2a>
     f40:	44 c0       	rjmp	.+136    	; 0xfca <task_tc77+0xb2>
     f42:	0b c0       	rjmp	.+22     	; 0xf5a <task_tc77+0x42>
		{
			case TC77_WAIT_HI :
				value = atoi(arg) << 8; state = TC77_WAIT_LO; spi_write(0x00);
     f44:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     f48:	10 92 d9 04 	sts	0x04D9, r1
     f4c:	80 93 da 04 	sts	0x04DA, r24
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	80 93 d8 04 	sts	0x04D8, r24
	SPCR = ( (1 << MSTR) | (1 << SPE) | (1 << SPIE) ); // MASTER, MSB first, Fosc/4
}

void spi_select() { cbi(PORTB, 0); } // cbi(PORTB, nSS)
void spi_release() { sbi(PORTB, 0); } // sbi(PORTB, nSS)
void spi_write(uint8_t data) { SPDR = data; }
     f56:	1e bc       	out	0x2e, r1	; 46
     f58:	46 c0       	rjmp	.+140    	; 0xfe6 <task_tc77+0xce>
		{
			case TC77_WAIT_HI :
				value = atoi(arg) << 8; state = TC77_WAIT_LO; spi_write(0x00);
				break;
			case TC77_WAIT_LO:
				value |= atoi(arg); value = (value >> 3) * 0.0625;
     f5a:	c0 90 d9 04 	lds	r12, 0x04D9
     f5e:	d0 90 da 04 	lds	r13, 0x04DA
     f62:	0e 94 62 10 	call	0x20c4	; 0x20c4 <atoi>
     f66:	c8 2a       	or	r12, r24
     f68:	d9 2a       	or	r13, r25
     f6a:	23 e0       	ldi	r18, 0x03	; 3
     f6c:	d6 94       	lsr	r13
     f6e:	c7 94       	ror	r12
     f70:	2a 95       	dec	r18
     f72:	e1 f7       	brne	.-8      	; 0xf6c <task_tc77+0x54>
     f74:	b6 01       	movw	r22, r12
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 39 0c 	call	0x1872	; 0x1872 <__floatunsisf>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5d e3       	ldi	r21, 0x3D	; 61
     f86:	0e 94 3f 0a 	call	0x147e	; 0x147e <__mulsf3>
     f8a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fixunssfsi>
     f8e:	6b 01       	movw	r12, r22
     f90:	7c 01       	movw	r14, r24
     f92:	70 93 da 04 	sts	0x04DA, r23
     f96:	60 93 d9 04 	sts	0x04D9, r22
				spi_release();
     f9a:	0e 94 8a 07 	call	0xf14	; 0xf14 <spi_release>
				printf("task_tc77() : current_temperature -> %d degree.\n$ ", value);
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <task_tc77+0x88>
     fa0:	0f 92       	push	r0
     fa2:	ed b7       	in	r30, 0x3d	; 61
     fa4:	fe b7       	in	r31, 0x3e	; 62
     fa6:	31 96       	adiw	r30, 0x01	; 1
     fa8:	89 e5       	ldi	r24, 0x59	; 89
     faa:	93 e0       	ldi	r25, 0x03	; 3
     fac:	ad b7       	in	r26, 0x3d	; 61
     fae:	be b7       	in	r27, 0x3e	; 62
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	9c 93       	st	X, r25
     fb4:	8e 93       	st	-X, r24
     fb6:	11 97       	sbiw	r26, 0x01	; 1
     fb8:	d3 82       	std	Z+3, r13	; 0x03
     fba:	c2 82       	std	Z+2, r12	; 0x02
     fbc:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0e c0       	rjmp	.+28     	; 0xfe6 <task_tc77+0xce>
			break;
			default:
				spi_release();
     fca:	0e 94 8a 07 	call	0xf14	; 0xf14 <spi_release>
				printf("task_tc77() : unexpecetd state in task_tc77...\n$ ");
     fce:	0f 92       	push	r0
     fd0:	0f 92       	push	r0
     fd2:	8c e8       	ldi	r24, 0x8C	; 140
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	ed b7       	in	r30, 0x3d	; 61
     fd8:	fe b7       	in	r31, 0x3e	; 62
     fda:	92 83       	std	Z+2, r25	; 0x02
     fdc:	81 83       	std	Z+1, r24	; 0x01
     fde:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
		}
	}
}
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	08 95       	ret

00000ff0 <spi_write>:
	SPCR = ( (1 << MSTR) | (1 << SPE) | (1 << SPIE) ); // MASTER, MSB first, Fosc/4
}

void spi_select() { cbi(PORTB, 0); } // cbi(PORTB, nSS)
void spi_release() { sbi(PORTB, 0); } // sbi(PORTB, nSS)
void spi_write(uint8_t data) { SPDR = data; }
     ff0:	8e bd       	out	0x2e, r24	; 46
     ff2:	08 95       	ret

00000ff4 <__vector_24>:

ISR(SPI_STC_vect)
{
     ff4:	1f 92       	push	r1
     ff6:	0f 92       	push	r0
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	0f 92       	push	r0
     ffc:	0b b6       	in	r0, 0x3b	; 59
     ffe:	0f 92       	push	r0
    1000:	11 24       	eor	r1, r1
    1002:	2f 93       	push	r18
    1004:	3f 93       	push	r19
    1006:	4f 93       	push	r20
    1008:	5f 93       	push	r21
    100a:	6f 93       	push	r22
    100c:	7f 93       	push	r23
    100e:	8f 93       	push	r24
    1010:	9f 93       	push	r25
    1012:	af 93       	push	r26
    1014:	bf 93       	push	r27
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	2a 97       	sbiw	r28, 0x0a	; 10
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	cd bf       	out	0x3d, r28	; 61
	struct task task;

	uint8_t data;
	data = SPDR;
    1028:	2e b5       	in	r18, 0x2e	; 46

	task.fun = task_tc77;
    102a:	8c e8       	ldi	r24, 0x8C	; 140
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	9a 83       	std	Y+2, r25	; 0x02
    1030:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
    1032:	00 d0       	rcall	.+0      	; 0x1034 <__vector_24+0x40>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <__vector_24+0x42>
    1036:	ed b7       	in	r30, 0x3d	; 61
    1038:	fe b7       	in	r31, 0x3e	; 62
    103a:	31 96       	adiw	r30, 0x01	; 1
    103c:	ce 01       	movw	r24, r28
    103e:	03 96       	adiw	r24, 0x03	; 3
    1040:	ad b7       	in	r26, 0x3d	; 61
    1042:	be b7       	in	r27, 0x3e	; 62
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	11 97       	sbiw	r26, 0x01	; 1
    104c:	8e eb       	ldi	r24, 0xBE	; 190
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	93 83       	std	Z+3, r25	; 0x03
    1052:	82 83       	std	Z+2, r24	; 0x02
    1054:	24 83       	std	Z+4, r18	; 0x04
    1056:	15 82       	std	Z+5, r1	; 0x05
    1058:	0e 94 65 11 	call	0x22ca	; 0x22ca <sprintf>
	task_insert(&task);
    105c:	8d b7       	in	r24, 0x3d	; 61
    105e:	9e b7       	in	r25, 0x3e	; 62
    1060:	06 96       	adiw	r24, 0x06	; 6
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	9e bf       	out	0x3e, r25	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	8d bf       	out	0x3d, r24	; 61
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <task_insert>
}
    1074:	2a 96       	adiw	r28, 0x0a	; 10
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0b be       	out	0x3b, r0	; 59
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <__fixunssfsi>:
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	6b 01       	movw	r12, r22
    10b2:	7c 01       	movw	r14, r24
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	5f e4       	ldi	r21, 0x4F	; 79
    10bc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__gesf2>
    10c0:	87 fd       	sbrc	r24, 7
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <__fixunssfsi+0x42>
    10c4:	c7 01       	movw	r24, r14
    10c6:	b6 01       	movw	r22, r12
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	5f e4       	ldi	r21, 0x4F	; 79
    10d0:	0e 94 07 0a 	call	0x140e	; 0x140e <__subsf3>
    10d4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fixsfsi>
    10d8:	8b 01       	movw	r16, r22
    10da:	9c 01       	movw	r18, r24
    10dc:	00 50       	subi	r16, 0x00	; 0
    10de:	10 40       	sbci	r17, 0x00	; 0
    10e0:	20 40       	sbci	r18, 0x00	; 0
    10e2:	30 48       	sbci	r19, 0x80	; 128
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <__fixunssfsi+0x4e>
    10e6:	c7 01       	movw	r24, r14
    10e8:	b6 01       	movw	r22, r12
    10ea:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__fixsfsi>
    10ee:	8b 01       	movw	r16, r22
    10f0:	9c 01       	movw	r18, r24
    10f2:	b8 01       	movw	r22, r16
    10f4:	c9 01       	movw	r24, r18
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	08 95       	ret

00001104 <_fpadd_parts>:
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 e8       	ldi	r30, 0x88	; 136
    110a:	f8 e0       	ldi	r31, 0x08	; 8
    110c:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x4>
    1110:	ec 01       	movw	r28, r24
    1112:	4b 01       	movw	r8, r22
    1114:	fa 01       	movw	r30, r20
    1116:	88 81       	ld	r24, Y
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	08 f4       	brcc	.+2      	; 0x111e <_fpadd_parts+0x1a>
    111c:	3e c1       	rjmp	.+636    	; 0x139a <_fpadd_parts+0x296>
    111e:	db 01       	movw	r26, r22
    1120:	9c 91       	ld	r25, X
    1122:	92 30       	cpi	r25, 0x02	; 2
    1124:	08 f4       	brcc	.+2      	; 0x1128 <_fpadd_parts+0x24>
    1126:	36 c1       	rjmp	.+620    	; 0x1394 <_fpadd_parts+0x290>
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	59 f4       	brne	.+22     	; 0x1142 <_fpadd_parts+0x3e>
    112c:	94 30       	cpi	r25, 0x04	; 4
    112e:	09 f0       	breq	.+2      	; 0x1132 <_fpadd_parts+0x2e>
    1130:	34 c1       	rjmp	.+616    	; 0x139a <_fpadd_parts+0x296>
    1132:	99 81       	ldd	r25, Y+1	; 0x01
    1134:	11 96       	adiw	r26, 0x01	; 1
    1136:	8c 91       	ld	r24, X
    1138:	11 97       	sbiw	r26, 0x01	; 1
    113a:	98 17       	cp	r25, r24
    113c:	09 f0       	breq	.+2      	; 0x1140 <_fpadd_parts+0x3c>
    113e:	27 c1       	rjmp	.+590    	; 0x138e <_fpadd_parts+0x28a>
    1140:	2c c1       	rjmp	.+600    	; 0x139a <_fpadd_parts+0x296>
    1142:	94 30       	cpi	r25, 0x04	; 4
    1144:	09 f4       	brne	.+2      	; 0x1148 <_fpadd_parts+0x44>
    1146:	26 c1       	rjmp	.+588    	; 0x1394 <_fpadd_parts+0x290>
    1148:	92 30       	cpi	r25, 0x02	; 2
    114a:	a9 f4       	brne	.+42     	; 0x1176 <_fpadd_parts+0x72>
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	09 f0       	breq	.+2      	; 0x1152 <_fpadd_parts+0x4e>
    1150:	24 c1       	rjmp	.+584    	; 0x139a <_fpadd_parts+0x296>
    1152:	ce 01       	movw	r24, r28
    1154:	28 e0       	ldi	r18, 0x08	; 8
    1156:	dc 01       	movw	r26, r24
    1158:	0d 90       	ld	r0, X+
    115a:	cd 01       	movw	r24, r26
    115c:	da 01       	movw	r26, r20
    115e:	0d 92       	st	X+, r0
    1160:	ad 01       	movw	r20, r26
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	c1 f7       	brne	.-16     	; 0x1156 <_fpadd_parts+0x52>
    1166:	d4 01       	movw	r26, r8
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	8c 91       	ld	r24, X
    116c:	11 97       	sbiw	r26, 0x01	; 1
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	89 23       	and	r24, r25
    1172:	81 83       	std	Z+1, r24	; 0x01
    1174:	11 c1       	rjmp	.+546    	; 0x1398 <_fpadd_parts+0x294>
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	09 f4       	brne	.+2      	; 0x117c <_fpadd_parts+0x78>
    117a:	0c c1       	rjmp	.+536    	; 0x1394 <_fpadd_parts+0x290>
    117c:	aa 80       	ldd	r10, Y+2	; 0x02
    117e:	bb 80       	ldd	r11, Y+3	; 0x03
    1180:	db 01       	movw	r26, r22
    1182:	12 96       	adiw	r26, 0x02	; 2
    1184:	4d 91       	ld	r20, X+
    1186:	5c 91       	ld	r21, X
    1188:	13 97       	sbiw	r26, 0x03	; 3
    118a:	cc 80       	ldd	r12, Y+4	; 0x04
    118c:	dd 80       	ldd	r13, Y+5	; 0x05
    118e:	ee 80       	ldd	r14, Y+6	; 0x06
    1190:	ff 80       	ldd	r15, Y+7	; 0x07
    1192:	14 96       	adiw	r26, 0x04	; 4
    1194:	0d 91       	ld	r16, X+
    1196:	1d 91       	ld	r17, X+
    1198:	2d 91       	ld	r18, X+
    119a:	3c 91       	ld	r19, X
    119c:	17 97       	sbiw	r26, 0x07	; 7
    119e:	c5 01       	movw	r24, r10
    11a0:	84 1b       	sub	r24, r20
    11a2:	95 0b       	sbc	r25, r21
    11a4:	dc 01       	movw	r26, r24
    11a6:	97 ff       	sbrs	r25, 7
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <_fpadd_parts+0xae>
    11aa:	aa 27       	eor	r26, r26
    11ac:	bb 27       	eor	r27, r27
    11ae:	a8 1b       	sub	r26, r24
    11b0:	b9 0b       	sbc	r27, r25
    11b2:	a0 32       	cpi	r26, 0x20	; 32
    11b4:	b1 05       	cpc	r27, r1
    11b6:	0c f0       	brlt	.+2      	; 0x11ba <_fpadd_parts+0xb6>
    11b8:	67 c0       	rjmp	.+206    	; 0x1288 <_fpadd_parts+0x184>
    11ba:	18 16       	cp	r1, r24
    11bc:	19 06       	cpc	r1, r25
    11be:	84 f5       	brge	.+96     	; 0x1220 <_fpadd_parts+0x11c>
    11c0:	28 01       	movw	r4, r16
    11c2:	39 01       	movw	r6, r18
    11c4:	0a 2e       	mov	r0, r26
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <_fpadd_parts+0xcc>
    11c8:	76 94       	lsr	r7
    11ca:	67 94       	ror	r6
    11cc:	57 94       	ror	r5
    11ce:	47 94       	ror	r4
    11d0:	0a 94       	dec	r0
    11d2:	d2 f7       	brpl	.-12     	; 0x11c8 <_fpadd_parts+0xc4>
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <_fpadd_parts+0xe2>
    11de:	44 0f       	add	r20, r20
    11e0:	55 1f       	adc	r21, r21
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	aa 95       	dec	r26
    11e8:	d2 f7       	brpl	.-12     	; 0x11de <_fpadd_parts+0xda>
    11ea:	41 50       	subi	r20, 0x01	; 1
    11ec:	50 40       	sbci	r21, 0x00	; 0
    11ee:	60 40       	sbci	r22, 0x00	; 0
    11f0:	70 40       	sbci	r23, 0x00	; 0
    11f2:	40 23       	and	r20, r16
    11f4:	51 23       	and	r21, r17
    11f6:	62 23       	and	r22, r18
    11f8:	73 23       	and	r23, r19
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	41 15       	cp	r20, r1
    1204:	51 05       	cpc	r21, r1
    1206:	61 05       	cpc	r22, r1
    1208:	71 05       	cpc	r23, r1
    120a:	19 f4       	brne	.+6      	; 0x1212 <_fpadd_parts+0x10e>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	dc 01       	movw	r26, r24
    1212:	8c 01       	movw	r16, r24
    1214:	9d 01       	movw	r18, r26
    1216:	04 29       	or	r16, r4
    1218:	15 29       	or	r17, r5
    121a:	26 29       	or	r18, r6
    121c:	37 29       	or	r19, r7
    121e:	3f c0       	rjmp	.+126    	; 0x129e <_fpadd_parts+0x19a>
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	e9 f1       	breq	.+122    	; 0x129e <_fpadd_parts+0x19a>
    1224:	aa 0e       	add	r10, r26
    1226:	bb 1e       	adc	r11, r27
    1228:	26 01       	movw	r4, r12
    122a:	37 01       	movw	r6, r14
    122c:	0a 2e       	mov	r0, r26
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <_fpadd_parts+0x134>
    1230:	76 94       	lsr	r7
    1232:	67 94       	ror	r6
    1234:	57 94       	ror	r5
    1236:	47 94       	ror	r4
    1238:	0a 94       	dec	r0
    123a:	d2 f7       	brpl	.-12     	; 0x1230 <_fpadd_parts+0x12c>
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	04 c0       	rjmp	.+8      	; 0x124e <_fpadd_parts+0x14a>
    1246:	44 0f       	add	r20, r20
    1248:	55 1f       	adc	r21, r21
    124a:	66 1f       	adc	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	aa 95       	dec	r26
    1250:	d2 f7       	brpl	.-12     	; 0x1246 <_fpadd_parts+0x142>
    1252:	41 50       	subi	r20, 0x01	; 1
    1254:	50 40       	sbci	r21, 0x00	; 0
    1256:	60 40       	sbci	r22, 0x00	; 0
    1258:	70 40       	sbci	r23, 0x00	; 0
    125a:	4c 21       	and	r20, r12
    125c:	5d 21       	and	r21, r13
    125e:	6e 21       	and	r22, r14
    1260:	7f 21       	and	r23, r15
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a0 e0       	ldi	r26, 0x00	; 0
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	41 15       	cp	r20, r1
    126c:	51 05       	cpc	r21, r1
    126e:	61 05       	cpc	r22, r1
    1270:	71 05       	cpc	r23, r1
    1272:	19 f4       	brne	.+6      	; 0x127a <_fpadd_parts+0x176>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	dc 01       	movw	r26, r24
    127a:	6c 01       	movw	r12, r24
    127c:	7d 01       	movw	r14, r26
    127e:	c4 28       	or	r12, r4
    1280:	d5 28       	or	r13, r5
    1282:	e6 28       	or	r14, r6
    1284:	f7 28       	or	r15, r7
    1286:	0b c0       	rjmp	.+22     	; 0x129e <_fpadd_parts+0x19a>
    1288:	4a 15       	cp	r20, r10
    128a:	5b 05       	cpc	r21, r11
    128c:	24 f4       	brge	.+8      	; 0x1296 <_fpadd_parts+0x192>
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	98 01       	movw	r18, r16
    1294:	04 c0       	rjmp	.+8      	; 0x129e <_fpadd_parts+0x19a>
    1296:	5a 01       	movw	r10, r20
    1298:	cc 24       	eor	r12, r12
    129a:	dd 24       	eor	r13, r13
    129c:	76 01       	movw	r14, r12
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	d4 01       	movw	r26, r8
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	9c 91       	ld	r25, X
    12a6:	11 97       	sbiw	r26, 0x01	; 1
    12a8:	89 17       	cp	r24, r25
    12aa:	09 f4       	brne	.+2      	; 0x12ae <_fpadd_parts+0x1aa>
    12ac:	45 c0       	rjmp	.+138    	; 0x1338 <_fpadd_parts+0x234>
    12ae:	88 23       	and	r24, r24
    12b0:	29 f0       	breq	.+10     	; 0x12bc <_fpadd_parts+0x1b8>
    12b2:	0c 19       	sub	r16, r12
    12b4:	1d 09       	sbc	r17, r13
    12b6:	2e 09       	sbc	r18, r14
    12b8:	3f 09       	sbc	r19, r15
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <_fpadd_parts+0x1c8>
    12bc:	d7 01       	movw	r26, r14
    12be:	c6 01       	movw	r24, r12
    12c0:	80 1b       	sub	r24, r16
    12c2:	91 0b       	sbc	r25, r17
    12c4:	a2 0b       	sbc	r26, r18
    12c6:	b3 0b       	sbc	r27, r19
    12c8:	8c 01       	movw	r16, r24
    12ca:	9d 01       	movw	r18, r26
    12cc:	37 fd       	sbrc	r19, 7
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <_fpadd_parts+0x1d4>
    12d0:	11 82       	std	Z+1, r1	; 0x01
    12d2:	b3 82       	std	Z+3, r11	; 0x03
    12d4:	a2 82       	std	Z+2, r10	; 0x02
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <_fpadd_parts+0x1ea>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	81 83       	std	Z+1, r24	; 0x01
    12dc:	b3 82       	std	Z+3, r11	; 0x03
    12de:	a2 82       	std	Z+2, r10	; 0x02
    12e0:	30 95       	com	r19
    12e2:	20 95       	com	r18
    12e4:	10 95       	com	r17
    12e6:	01 95       	neg	r16
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	2f 4f       	sbci	r18, 0xFF	; 255
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	04 83       	std	Z+4, r16	; 0x04
    12f0:	15 83       	std	Z+5, r17	; 0x05
    12f2:	26 83       	std	Z+6, r18	; 0x06
    12f4:	37 83       	std	Z+7, r19	; 0x07
    12f6:	0d c0       	rjmp	.+26     	; 0x1312 <_fpadd_parts+0x20e>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	aa 1f       	adc	r26, r26
    12fe:	bb 1f       	adc	r27, r27
    1300:	84 83       	std	Z+4, r24	; 0x04
    1302:	95 83       	std	Z+5, r25	; 0x05
    1304:	a6 83       	std	Z+6, r26	; 0x06
    1306:	b7 83       	std	Z+7, r27	; 0x07
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	93 83       	std	Z+3, r25	; 0x03
    1310:	82 83       	std	Z+2, r24	; 0x02
    1312:	84 81       	ldd	r24, Z+4	; 0x04
    1314:	95 81       	ldd	r25, Z+5	; 0x05
    1316:	a6 81       	ldd	r26, Z+6	; 0x06
    1318:	b7 81       	ldd	r27, Z+7	; 0x07
    131a:	ac 01       	movw	r20, r24
    131c:	bd 01       	movw	r22, r26
    131e:	41 50       	subi	r20, 0x01	; 1
    1320:	50 40       	sbci	r21, 0x00	; 0
    1322:	60 40       	sbci	r22, 0x00	; 0
    1324:	70 40       	sbci	r23, 0x00	; 0
    1326:	4f 3f       	cpi	r20, 0xFF	; 255
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	52 07       	cpc	r21, r18
    132c:	2f ef       	ldi	r18, 0xFF	; 255
    132e:	62 07       	cpc	r22, r18
    1330:	2f e3       	ldi	r18, 0x3F	; 63
    1332:	72 07       	cpc	r23, r18
    1334:	08 f3       	brcs	.-62     	; 0x12f8 <_fpadd_parts+0x1f4>
    1336:	0b c0       	rjmp	.+22     	; 0x134e <_fpadd_parts+0x24a>
    1338:	81 83       	std	Z+1, r24	; 0x01
    133a:	b3 82       	std	Z+3, r11	; 0x03
    133c:	a2 82       	std	Z+2, r10	; 0x02
    133e:	0c 0d       	add	r16, r12
    1340:	1d 1d       	adc	r17, r13
    1342:	2e 1d       	adc	r18, r14
    1344:	3f 1d       	adc	r19, r15
    1346:	04 83       	std	Z+4, r16	; 0x04
    1348:	15 83       	std	Z+5, r17	; 0x05
    134a:	26 83       	std	Z+6, r18	; 0x06
    134c:	37 83       	std	Z+7, r19	; 0x07
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	80 83       	st	Z, r24
    1352:	44 81       	ldd	r20, Z+4	; 0x04
    1354:	55 81       	ldd	r21, Z+5	; 0x05
    1356:	66 81       	ldd	r22, Z+6	; 0x06
    1358:	77 81       	ldd	r23, Z+7	; 0x07
    135a:	77 ff       	sbrs	r23, 7
    135c:	1d c0       	rjmp	.+58     	; 0x1398 <_fpadd_parts+0x294>
    135e:	db 01       	movw	r26, r22
    1360:	ca 01       	movw	r24, r20
    1362:	81 70       	andi	r24, 0x01	; 1
    1364:	90 70       	andi	r25, 0x00	; 0
    1366:	a0 70       	andi	r26, 0x00	; 0
    1368:	b0 70       	andi	r27, 0x00	; 0
    136a:	76 95       	lsr	r23
    136c:	67 95       	ror	r22
    136e:	57 95       	ror	r21
    1370:	47 95       	ror	r20
    1372:	84 2b       	or	r24, r20
    1374:	95 2b       	or	r25, r21
    1376:	a6 2b       	or	r26, r22
    1378:	b7 2b       	or	r27, r23
    137a:	84 83       	std	Z+4, r24	; 0x04
    137c:	95 83       	std	Z+5, r25	; 0x05
    137e:	a6 83       	std	Z+6, r26	; 0x06
    1380:	b7 83       	std	Z+7, r27	; 0x07
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	93 83       	std	Z+3, r25	; 0x03
    138a:	82 83       	std	Z+2, r24	; 0x02
    138c:	05 c0       	rjmp	.+10     	; 0x1398 <_fpadd_parts+0x294>
    138e:	c1 ec       	ldi	r28, 0xC1	; 193
    1390:	d3 e0       	ldi	r29, 0x03	; 3
    1392:	03 c0       	rjmp	.+6      	; 0x139a <_fpadd_parts+0x296>
    1394:	e4 01       	movw	r28, r8
    1396:	01 c0       	rjmp	.+2      	; 0x139a <_fpadd_parts+0x296>
    1398:	ef 01       	movw	r28, r30
    139a:	ce 01       	movw	r24, r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	e0 e1       	ldi	r30, 0x10	; 16
    13a2:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x4>

000013a6 <__addsf3>:
    13a6:	a0 e2       	ldi	r26, 0x20	; 32
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 ed       	ldi	r30, 0xD9	; 217
    13ac:	f9 e0       	ldi	r31, 0x09	; 9
    13ae:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x20>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	9e 83       	std	Y+6, r25	; 0x06
    13ba:	af 83       	std	Y+7, r26	; 0x07
    13bc:	b8 87       	std	Y+8, r27	; 0x08
    13be:	29 83       	std	Y+1, r18	; 0x01
    13c0:	3a 83       	std	Y+2, r19	; 0x02
    13c2:	4b 83       	std	Y+3, r20	; 0x03
    13c4:	5c 83       	std	Y+4, r21	; 0x04
    13c6:	ce 01       	movw	r24, r28
    13c8:	05 96       	adiw	r24, 0x05	; 5
    13ca:	be 01       	movw	r22, r28
    13cc:	67 5e       	subi	r22, 0xE7	; 231
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    13d4:	ce 01       	movw	r24, r28
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	be 01       	movw	r22, r28
    13da:	6f 5e       	subi	r22, 0xEF	; 239
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    13e2:	ce 01       	movw	r24, r28
    13e4:	49 96       	adiw	r24, 0x19	; 25
    13e6:	be 01       	movw	r22, r28
    13e8:	6f 5e       	subi	r22, 0xEF	; 239
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	ae 01       	movw	r20, r28
    13ee:	47 5f       	subi	r20, 0xF7	; 247
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	0e 94 82 08 	call	0x1104	; 0x1104 <_fpadd_parts>
    13f6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__pack_f>
    13fa:	46 2f       	mov	r20, r22
    13fc:	57 2f       	mov	r21, r23
    13fe:	68 2f       	mov	r22, r24
    1400:	79 2f       	mov	r23, r25
    1402:	cb 01       	movw	r24, r22
    1404:	ba 01       	movw	r22, r20
    1406:	a0 96       	adiw	r28, 0x20	; 32
    1408:	e2 e0       	ldi	r30, 0x02	; 2
    140a:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x20>

0000140e <__subsf3>:
    140e:	a0 e2       	ldi	r26, 0x20	; 32
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ed e0       	ldi	r30, 0x0D	; 13
    1414:	fa e0       	ldi	r31, 0x0A	; 10
    1416:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x20>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8d 83       	std	Y+5, r24	; 0x05
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	af 83       	std	Y+7, r26	; 0x07
    1424:	b8 87       	std	Y+8, r27	; 0x08
    1426:	29 83       	std	Y+1, r18	; 0x01
    1428:	3a 83       	std	Y+2, r19	; 0x02
    142a:	4b 83       	std	Y+3, r20	; 0x03
    142c:	5c 83       	std	Y+4, r21	; 0x04
    142e:	ce 01       	movw	r24, r28
    1430:	05 96       	adiw	r24, 0x05	; 5
    1432:	be 01       	movw	r22, r28
    1434:	67 5e       	subi	r22, 0xE7	; 231
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	be 01       	movw	r22, r28
    1442:	6f 5e       	subi	r22, 0xEF	; 239
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    144a:	8a 89       	ldd	r24, Y+18	; 0x12
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	89 27       	eor	r24, r25
    1450:	8a 8b       	std	Y+18, r24	; 0x12
    1452:	ce 01       	movw	r24, r28
    1454:	49 96       	adiw	r24, 0x19	; 25
    1456:	be 01       	movw	r22, r28
    1458:	6f 5e       	subi	r22, 0xEF	; 239
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	ae 01       	movw	r20, r28
    145e:	47 5f       	subi	r20, 0xF7	; 247
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	0e 94 82 08 	call	0x1104	; 0x1104 <_fpadd_parts>
    1466:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__pack_f>
    146a:	46 2f       	mov	r20, r22
    146c:	57 2f       	mov	r21, r23
    146e:	68 2f       	mov	r22, r24
    1470:	79 2f       	mov	r23, r25
    1472:	cb 01       	movw	r24, r22
    1474:	ba 01       	movw	r22, r20
    1476:	a0 96       	adiw	r28, 0x20	; 32
    1478:	e2 e0       	ldi	r30, 0x02	; 2
    147a:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x20>

0000147e <__mulsf3>:
    147e:	a0 e2       	ldi	r26, 0x20	; 32
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e4       	ldi	r30, 0x45	; 69
    1484:	fa e0       	ldi	r31, 0x0A	; 10
    1486:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__prologue_saves__+0x4>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	9e 83       	std	Y+6, r25	; 0x06
    1492:	af 83       	std	Y+7, r26	; 0x07
    1494:	b8 87       	std	Y+8, r27	; 0x08
    1496:	29 83       	std	Y+1, r18	; 0x01
    1498:	3a 83       	std	Y+2, r19	; 0x02
    149a:	4b 83       	std	Y+3, r20	; 0x03
    149c:	5c 83       	std	Y+4, r21	; 0x04
    149e:	ce 01       	movw	r24, r28
    14a0:	05 96       	adiw	r24, 0x05	; 5
    14a2:	be 01       	movw	r22, r28
    14a4:	67 5e       	subi	r22, 0xE7	; 231
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    14ac:	ce 01       	movw	r24, r28
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	be 01       	movw	r22, r28
    14b2:	6f 5e       	subi	r22, 0xEF	; 239
    14b4:	7f 4f       	sbci	r23, 0xFF	; 255
    14b6:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    14ba:	99 8d       	ldd	r25, Y+25	; 0x19
    14bc:	92 30       	cpi	r25, 0x02	; 2
    14be:	78 f0       	brcs	.+30     	; 0x14de <__mulsf3+0x60>
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	c0 f0       	brcs	.+48     	; 0x14f6 <__mulsf3+0x78>
    14c6:	94 30       	cpi	r25, 0x04	; 4
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <__mulsf3+0x52>
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	41 f4       	brne	.+16     	; 0x14de <__mulsf3+0x60>
    14ce:	ca c0       	rjmp	.+404    	; 0x1664 <__mulsf3+0x1e6>
    14d0:	84 30       	cpi	r24, 0x04	; 4
    14d2:	19 f4       	brne	.+6      	; 0x14da <__mulsf3+0x5c>
    14d4:	92 30       	cpi	r25, 0x02	; 2
    14d6:	79 f4       	brne	.+30     	; 0x14f6 <__mulsf3+0x78>
    14d8:	c5 c0       	rjmp	.+394    	; 0x1664 <__mulsf3+0x1e6>
    14da:	92 30       	cpi	r25, 0x02	; 2
    14dc:	51 f4       	brne	.+20     	; 0x14f2 <__mulsf3+0x74>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14e2:	9a 89       	ldd	r25, Y+18	; 0x12
    14e4:	29 17       	cp	r18, r25
    14e6:	09 f4       	brne	.+2      	; 0x14ea <__mulsf3+0x6c>
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	8a 8f       	std	Y+26, r24	; 0x1a
    14ec:	ce 01       	movw	r24, r28
    14ee:	49 96       	adiw	r24, 0x19	; 25
    14f0:	bb c0       	rjmp	.+374    	; 0x1668 <__mulsf3+0x1ea>
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	51 f4       	brne	.+20     	; 0x150a <__mulsf3+0x8c>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14fa:	9a 89       	ldd	r25, Y+18	; 0x12
    14fc:	29 17       	cp	r18, r25
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__mulsf3+0x84>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	8a 8b       	std	Y+18, r24	; 0x12
    1504:	ce 01       	movw	r24, r28
    1506:	41 96       	adiw	r24, 0x11	; 17
    1508:	af c0       	rjmp	.+350    	; 0x1668 <__mulsf3+0x1ea>
    150a:	4d 8c       	ldd	r4, Y+29	; 0x1d
    150c:	5e 8c       	ldd	r5, Y+30	; 0x1e
    150e:	6f 8c       	ldd	r6, Y+31	; 0x1f
    1510:	78 a0       	lds	r23, 0x88
    1512:	0d 89       	ldd	r16, Y+21	; 0x15
    1514:	1e 89       	ldd	r17, Y+22	; 0x16
    1516:	2f 89       	ldd	r18, Y+23	; 0x17
    1518:	38 8d       	ldd	r19, Y+24	; 0x18
    151a:	e0 e2       	ldi	r30, 0x20	; 32
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	ba 01       	movw	r22, r20
    1524:	88 24       	eor	r8, r8
    1526:	99 24       	eor	r9, r9
    1528:	54 01       	movw	r10, r8
    152a:	cc 24       	eor	r12, r12
    152c:	dd 24       	eor	r13, r13
    152e:	76 01       	movw	r14, r12
    1530:	c2 01       	movw	r24, r4
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	d1 f0       	breq	.+52     	; 0x156e <__mulsf3+0xf0>
    153a:	c0 0e       	add	r12, r16
    153c:	d1 1e       	adc	r13, r17
    153e:	e2 1e       	adc	r14, r18
    1540:	f3 1e       	adc	r15, r19
    1542:	db 01       	movw	r26, r22
    1544:	ca 01       	movw	r24, r20
    1546:	88 0d       	add	r24, r8
    1548:	99 1d       	adc	r25, r9
    154a:	aa 1d       	adc	r26, r10
    154c:	bb 1d       	adc	r27, r11
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	c0 16       	cp	r12, r16
    1558:	d1 06       	cpc	r13, r17
    155a:	e2 06       	cpc	r14, r18
    155c:	f3 06       	cpc	r15, r19
    155e:	18 f0       	brcs	.+6      	; 0x1566 <__mulsf3+0xe8>
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	ba 01       	movw	r22, r20
    1566:	48 0f       	add	r20, r24
    1568:	59 1f       	adc	r21, r25
    156a:	6a 1f       	adc	r22, r26
    156c:	7b 1f       	adc	r23, r27
    156e:	88 0c       	add	r8, r8
    1570:	99 1c       	adc	r9, r9
    1572:	aa 1c       	adc	r10, r10
    1574:	bb 1c       	adc	r11, r11
    1576:	37 ff       	sbrs	r19, 7
    1578:	08 c0       	rjmp	.+16     	; 0x158a <__mulsf3+0x10c>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	88 2a       	or	r8, r24
    1584:	99 2a       	or	r9, r25
    1586:	aa 2a       	or	r10, r26
    1588:	bb 2a       	or	r11, r27
    158a:	00 0f       	add	r16, r16
    158c:	11 1f       	adc	r17, r17
    158e:	22 1f       	adc	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	76 94       	lsr	r7
    1594:	67 94       	ror	r6
    1596:	57 94       	ror	r5
    1598:	47 94       	ror	r4
    159a:	31 97       	sbiw	r30, 0x01	; 1
    159c:	49 f6       	brne	.-110    	; 0x1530 <__mulsf3+0xb2>
    159e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a2:	2b 89       	ldd	r18, Y+19	; 0x13
    15a4:	3c 89       	ldd	r19, Y+20	; 0x14
    15a6:	82 0f       	add	r24, r18
    15a8:	93 1f       	adc	r25, r19
    15aa:	02 96       	adiw	r24, 0x02	; 2
    15ac:	9c 87       	std	Y+12, r25	; 0x0c
    15ae:	8b 87       	std	Y+11, r24	; 0x0b
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    15b4:	9a 89       	ldd	r25, Y+18	; 0x12
    15b6:	29 17       	cp	r18, r25
    15b8:	09 f4       	brne	.+2      	; 0x15bc <__mulsf3+0x13e>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	8a 87       	std	Y+10, r24	; 0x0a
    15be:	2b 85       	ldd	r18, Y+11	; 0x0b
    15c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    15c2:	17 c0       	rjmp	.+46     	; 0x15f2 <__mulsf3+0x174>
    15c4:	ca 01       	movw	r24, r20
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	90 70       	andi	r25, 0x00	; 0
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <__mulsf3+0x168>
    15ce:	f6 94       	lsr	r15
    15d0:	e7 94       	ror	r14
    15d2:	d7 94       	ror	r13
    15d4:	c7 94       	ror	r12
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e8       	ldi	r27, 0x80	; 128
    15de:	c8 2a       	or	r12, r24
    15e0:	d9 2a       	or	r13, r25
    15e2:	ea 2a       	or	r14, r26
    15e4:	fb 2a       	or	r15, r27
    15e6:	76 95       	lsr	r23
    15e8:	67 95       	ror	r22
    15ea:	57 95       	ror	r21
    15ec:	47 95       	ror	r20
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	77 fd       	sbrc	r23, 7
    15f4:	e7 cf       	rjmp	.-50     	; 0x15c4 <__mulsf3+0x146>
    15f6:	c9 01       	movw	r24, r18
    15f8:	0b c0       	rjmp	.+22     	; 0x1610 <__mulsf3+0x192>
    15fa:	44 0f       	add	r20, r20
    15fc:	55 1f       	adc	r21, r21
    15fe:	66 1f       	adc	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	f7 fc       	sbrc	r15, 7
    1604:	41 60       	ori	r20, 0x01	; 1
    1606:	cc 0c       	add	r12, r12
    1608:	dd 1c       	adc	r13, r13
    160a:	ee 1c       	adc	r14, r14
    160c:	ff 1c       	adc	r15, r15
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	40 30       	cpi	r20, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	5a 07       	cpc	r21, r26
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	6a 07       	cpc	r22, r26
    161a:	a0 e4       	ldi	r26, 0x40	; 64
    161c:	7a 07       	cpc	r23, r26
    161e:	68 f3       	brcs	.-38     	; 0x15fa <__mulsf3+0x17c>
    1620:	8b 87       	std	Y+11, r24	; 0x0b
    1622:	9c 87       	std	Y+12, r25	; 0x0c
    1624:	db 01       	movw	r26, r22
    1626:	ca 01       	movw	r24, r20
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	90 70       	andi	r25, 0x00	; 0
    162c:	a0 70       	andi	r26, 0x00	; 0
    162e:	b0 70       	andi	r27, 0x00	; 0
    1630:	80 34       	cpi	r24, 0x40	; 64
    1632:	91 05       	cpc	r25, r1
    1634:	a1 05       	cpc	r26, r1
    1636:	b1 05       	cpc	r27, r1
    1638:	61 f4       	brne	.+24     	; 0x1652 <__mulsf3+0x1d4>
    163a:	47 fd       	sbrc	r20, 7
    163c:	0a c0       	rjmp	.+20     	; 0x1652 <__mulsf3+0x1d4>
    163e:	c1 14       	cp	r12, r1
    1640:	d1 04       	cpc	r13, r1
    1642:	e1 04       	cpc	r14, r1
    1644:	f1 04       	cpc	r15, r1
    1646:	29 f0       	breq	.+10     	; 0x1652 <__mulsf3+0x1d4>
    1648:	40 5c       	subi	r20, 0xC0	; 192
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
    164c:	6f 4f       	sbci	r22, 0xFF	; 255
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	40 78       	andi	r20, 0x80	; 128
    1652:	4d 87       	std	Y+13, r20	; 0x0d
    1654:	5e 87       	std	Y+14, r21	; 0x0e
    1656:	6f 87       	std	Y+15, r22	; 0x0f
    1658:	78 8b       	std	Y+16, r23	; 0x10
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	89 87       	std	Y+9, r24	; 0x09
    165e:	ce 01       	movw	r24, r28
    1660:	09 96       	adiw	r24, 0x09	; 9
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <__mulsf3+0x1ea>
    1664:	81 ec       	ldi	r24, 0xC1	; 193
    1666:	93 e0       	ldi	r25, 0x03	; 3
    1668:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__pack_f>
    166c:	46 2f       	mov	r20, r22
    166e:	57 2f       	mov	r21, r23
    1670:	68 2f       	mov	r22, r24
    1672:	79 2f       	mov	r23, r25
    1674:	cb 01       	movw	r24, r22
    1676:	ba 01       	movw	r22, r20
    1678:	a0 96       	adiw	r28, 0x20	; 32
    167a:	e0 e1       	ldi	r30, 0x10	; 16
    167c:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__epilogue_restores__+0x4>

00001680 <__gesf2>:
    1680:	a8 e1       	ldi	r26, 0x18	; 24
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e6 e4       	ldi	r30, 0x46	; 70
    1686:	fb e0       	ldi	r31, 0x0B	; 11
    1688:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x20>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	af 83       	std	Y+7, r26	; 0x07
    1696:	b8 87       	std	Y+8, r27	; 0x08
    1698:	29 83       	std	Y+1, r18	; 0x01
    169a:	3a 83       	std	Y+2, r19	; 0x02
    169c:	4b 83       	std	Y+3, r20	; 0x03
    169e:	5c 83       	std	Y+4, r21	; 0x04
    16a0:	ce 01       	movw	r24, r28
    16a2:	05 96       	adiw	r24, 0x05	; 5
    16a4:	be 01       	movw	r22, r28
    16a6:	6f 5e       	subi	r22, 0xEF	; 239
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    16ae:	ce 01       	movw	r24, r28
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	be 01       	movw	r22, r28
    16b4:	67 5f       	subi	r22, 0xF7	; 247
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    16bc:	89 89       	ldd	r24, Y+17	; 0x11
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	58 f0       	brcs	.+22     	; 0x16d8 <__gesf2+0x58>
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	82 30       	cpi	r24, 0x02	; 2
    16c6:	40 f0       	brcs	.+16     	; 0x16d8 <__gesf2+0x58>
    16c8:	ce 01       	movw	r24, r28
    16ca:	41 96       	adiw	r24, 0x11	; 17
    16cc:	be 01       	movw	r22, r28
    16ce:	67 5f       	subi	r22, 0xF7	; 247
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <__fpcmp_parts_f>
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <__gesf2+0x5a>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	68 96       	adiw	r28, 0x18	; 24
    16dc:	e2 e0       	ldi	r30, 0x02	; 2
    16de:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x20>

000016e2 <__floatsisf>:
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	28 97       	sbiw	r28, 0x08	; 8
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	6b 01       	movw	r12, r22
    1700:	7c 01       	movw	r14, r24
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	d7 01       	movw	r26, r14
    1708:	c6 01       	movw	r24, r12
    170a:	88 27       	eor	r24, r24
    170c:	b7 fd       	sbrc	r27, 7
    170e:	83 95       	inc	r24
    1710:	99 27       	eor	r25, r25
    1712:	aa 27       	eor	r26, r26
    1714:	bb 27       	eor	r27, r27
    1716:	28 2f       	mov	r18, r24
    1718:	8a 83       	std	Y+2, r24	; 0x02
    171a:	c1 14       	cp	r12, r1
    171c:	d1 04       	cpc	r13, r1
    171e:	e1 04       	cpc	r14, r1
    1720:	f1 04       	cpc	r15, r1
    1722:	19 f4       	brne	.+6      	; 0x172a <__floatsisf+0x48>
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	35 c0       	rjmp	.+106    	; 0x1794 <__floatsisf+0xb2>
    172a:	8e e1       	ldi	r24, 0x1E	; 30
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
    1732:	22 23       	and	r18, r18
    1734:	89 f0       	breq	.+34     	; 0x1758 <__floatsisf+0x76>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	c8 16       	cp	r12, r24
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	d8 06       	cpc	r13, r24
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	e8 06       	cpc	r14, r24
    1742:	80 e8       	ldi	r24, 0x80	; 128
    1744:	f8 06       	cpc	r15, r24
    1746:	59 f1       	breq	.+86     	; 0x179e <__floatsisf+0xbc>
    1748:	f0 94       	com	r15
    174a:	e0 94       	com	r14
    174c:	d0 94       	com	r13
    174e:	c0 94       	com	r12
    1750:	c1 1c       	adc	r12, r1
    1752:	d1 1c       	adc	r13, r1
    1754:	e1 1c       	adc	r14, r1
    1756:	f1 1c       	adc	r15, r1
    1758:	cd 82       	std	Y+5, r12	; 0x05
    175a:	de 82       	std	Y+6, r13	; 0x06
    175c:	ef 82       	std	Y+7, r14	; 0x07
    175e:	f8 86       	std	Y+8, r15	; 0x08
    1760:	c7 01       	movw	r24, r14
    1762:	b6 01       	movw	r22, r12
    1764:	0e 94 b6 0c 	call	0x196c	; 0x196c <__clzsi2>
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	18 16       	cp	r1, r24
    176c:	19 06       	cpc	r1, r25
    176e:	94 f4       	brge	.+36     	; 0x1794 <__floatsisf+0xb2>
    1770:	08 2e       	mov	r0, r24
    1772:	04 c0       	rjmp	.+8      	; 0x177c <__floatsisf+0x9a>
    1774:	cc 0c       	add	r12, r12
    1776:	dd 1c       	adc	r13, r13
    1778:	ee 1c       	adc	r14, r14
    177a:	ff 1c       	adc	r15, r15
    177c:	0a 94       	dec	r0
    177e:	d2 f7       	brpl	.-12     	; 0x1774 <__floatsisf+0x92>
    1780:	cd 82       	std	Y+5, r12	; 0x05
    1782:	de 82       	std	Y+6, r13	; 0x06
    1784:	ef 82       	std	Y+7, r14	; 0x07
    1786:	f8 86       	std	Y+8, r15	; 0x08
    1788:	2e e1       	ldi	r18, 0x1E	; 30
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	28 1b       	sub	r18, r24
    178e:	39 0b       	sbc	r19, r25
    1790:	3c 83       	std	Y+4, r19	; 0x04
    1792:	2b 83       	std	Y+3, r18	; 0x03
    1794:	ce 01       	movw	r24, r28
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__pack_f>
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__floatsisf+0xc4>
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	9f ec       	ldi	r25, 0xCF	; 207
    17a6:	38 2f       	mov	r19, r24
    17a8:	29 2f       	mov	r18, r25
    17aa:	86 2f       	mov	r24, r22
    17ac:	97 2f       	mov	r25, r23
    17ae:	a3 2f       	mov	r26, r19
    17b0:	b2 2f       	mov	r27, r18
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	28 96       	adiw	r28, 0x08	; 8
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	ff 90       	pop	r15
    17c8:	ef 90       	pop	r14
    17ca:	df 90       	pop	r13
    17cc:	cf 90       	pop	r12
    17ce:	08 95       	ret

000017d0 <__fixsfsi>:
    17d0:	ac e0       	ldi	r26, 0x0C	; 12
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	ee ee       	ldi	r30, 0xEE	; 238
    17d6:	fb e0       	ldi	r31, 0x0B	; 11
    17d8:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <__prologue_saves__+0x1c>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	9a 83       	std	Y+2, r25	; 0x02
    17e4:	ab 83       	std	Y+3, r26	; 0x03
    17e6:	bc 83       	std	Y+4, r27	; 0x04
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	be 01       	movw	r22, r28
    17ee:	6b 5f       	subi	r22, 0xFB	; 251
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__unpack_f>
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	69 f1       	breq	.+90     	; 0x1856 <__fixsfsi+0x86>
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	58 f1       	brcs	.+86     	; 0x1856 <__fixsfsi+0x86>
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	39 f0       	breq	.+14     	; 0x1812 <__fixsfsi+0x42>
    1804:	2f 81       	ldd	r18, Y+7	; 0x07
    1806:	38 85       	ldd	r19, Y+8	; 0x08
    1808:	37 fd       	sbrc	r19, 7
    180a:	25 c0       	rjmp	.+74     	; 0x1856 <__fixsfsi+0x86>
    180c:	2f 31       	cpi	r18, 0x1F	; 31
    180e:	31 05       	cpc	r19, r1
    1810:	44 f0       	brlt	.+16     	; 0x1822 <__fixsfsi+0x52>
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	88 23       	and	r24, r24
    1816:	19 f1       	breq	.+70     	; 0x185e <__fixsfsi+0x8e>
    1818:	00 e0       	ldi	r16, 0x00	; 0
    181a:	10 e0       	ldi	r17, 0x00	; 0
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e8       	ldi	r19, 0x80	; 128
    1820:	22 c0       	rjmp	.+68     	; 0x1866 <__fixsfsi+0x96>
    1822:	8e e1       	ldi	r24, 0x1E	; 30
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	82 1b       	sub	r24, r18
    1828:	93 0b       	sbc	r25, r19
    182a:	09 85       	ldd	r16, Y+9	; 0x09
    182c:	1a 85       	ldd	r17, Y+10	; 0x0a
    182e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1830:	3c 85       	ldd	r19, Y+12	; 0x0c
    1832:	04 c0       	rjmp	.+8      	; 0x183c <__fixsfsi+0x6c>
    1834:	36 95       	lsr	r19
    1836:	27 95       	ror	r18
    1838:	17 95       	ror	r17
    183a:	07 95       	ror	r16
    183c:	8a 95       	dec	r24
    183e:	d2 f7       	brpl	.-12     	; 0x1834 <__fixsfsi+0x64>
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	88 23       	and	r24, r24
    1844:	81 f0       	breq	.+32     	; 0x1866 <__fixsfsi+0x96>
    1846:	30 95       	com	r19
    1848:	20 95       	com	r18
    184a:	10 95       	com	r17
    184c:	01 95       	neg	r16
    184e:	1f 4f       	sbci	r17, 0xFF	; 255
    1850:	2f 4f       	sbci	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	08 c0       	rjmp	.+16     	; 0x1866 <__fixsfsi+0x96>
    1856:	00 e0       	ldi	r16, 0x00	; 0
    1858:	10 e0       	ldi	r17, 0x00	; 0
    185a:	98 01       	movw	r18, r16
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <__fixsfsi+0x96>
    185e:	0f ef       	ldi	r16, 0xFF	; 255
    1860:	1f ef       	ldi	r17, 0xFF	; 255
    1862:	2f ef       	ldi	r18, 0xFF	; 255
    1864:	3f e7       	ldi	r19, 0x7F	; 127
    1866:	b8 01       	movw	r22, r16
    1868:	c9 01       	movw	r24, r18
    186a:	2c 96       	adiw	r28, 0x0c	; 12
    186c:	e4 e0       	ldi	r30, 0x04	; 4
    186e:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__epilogue_restores__+0x1c>

00001872 <__floatunsisf>:
    1872:	a8 e0       	ldi	r26, 0x08	; 8
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ef e3       	ldi	r30, 0x3F	; 63
    1878:	fc e0       	ldi	r31, 0x0C	; 12
    187a:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__prologue_saves__+0x14>
    187e:	6b 01       	movw	r12, r22
    1880:	7c 01       	movw	r14, r24
    1882:	1a 82       	std	Y+2, r1	; 0x02
    1884:	61 15       	cp	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	81 05       	cpc	r24, r1
    188a:	91 05       	cpc	r25, r1
    188c:	19 f4       	brne	.+6      	; 0x1894 <__floatunsisf+0x22>
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	5e c0       	rjmp	.+188    	; 0x1950 <__floatunsisf+0xde>
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	0e e1       	ldi	r16, 0x1E	; 30
    189a:	10 e0       	ldi	r17, 0x00	; 0
    189c:	1c 83       	std	Y+4, r17	; 0x04
    189e:	0b 83       	std	Y+3, r16	; 0x03
    18a0:	cd 82       	std	Y+5, r12	; 0x05
    18a2:	de 82       	std	Y+6, r13	; 0x06
    18a4:	ef 82       	std	Y+7, r14	; 0x07
    18a6:	f8 86       	std	Y+8, r15	; 0x08
    18a8:	c7 01       	movw	r24, r14
    18aa:	b6 01       	movw	r22, r12
    18ac:	0e 94 b6 0c 	call	0x196c	; 0x196c <__clzsi2>
    18b0:	9c 01       	movw	r18, r24
    18b2:	21 50       	subi	r18, 0x01	; 1
    18b4:	30 40       	sbci	r19, 0x00	; 0
    18b6:	37 ff       	sbrs	r19, 7
    18b8:	38 c0       	rjmp	.+112    	; 0x192a <__floatunsisf+0xb8>
    18ba:	ee 27       	eor	r30, r30
    18bc:	ff 27       	eor	r31, r31
    18be:	e2 1b       	sub	r30, r18
    18c0:	f3 0b       	sbc	r31, r19
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e0       	ldi	r26, 0x00	; 0
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	0e 2e       	mov	r0, r30
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <__floatunsisf+0x64>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	aa 1f       	adc	r26, r26
    18d4:	bb 1f       	adc	r27, r27
    18d6:	0a 94       	dec	r0
    18d8:	d2 f7       	brpl	.-12     	; 0x18ce <__floatunsisf+0x5c>
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	a1 09       	sbc	r26, r1
    18de:	b1 09       	sbc	r27, r1
    18e0:	8c 21       	and	r24, r12
    18e2:	9d 21       	and	r25, r13
    18e4:	ae 21       	and	r26, r14
    18e6:	bf 21       	and	r27, r15
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	a1 05       	cpc	r26, r1
    18f4:	b1 05       	cpc	r27, r1
    18f6:	19 f4       	brne	.+6      	; 0x18fe <__floatunsisf+0x8c>
    18f8:	40 e0       	ldi	r20, 0x00	; 0
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	ba 01       	movw	r22, r20
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <__floatunsisf+0x96>
    1900:	f6 94       	lsr	r15
    1902:	e7 94       	ror	r14
    1904:	d7 94       	ror	r13
    1906:	c7 94       	ror	r12
    1908:	ea 95       	dec	r30
    190a:	d2 f7       	brpl	.-12     	; 0x1900 <__floatunsisf+0x8e>
    190c:	c4 2a       	or	r12, r20
    190e:	d5 2a       	or	r13, r21
    1910:	e6 2a       	or	r14, r22
    1912:	f7 2a       	or	r15, r23
    1914:	cd 82       	std	Y+5, r12	; 0x05
    1916:	de 82       	std	Y+6, r13	; 0x06
    1918:	ef 82       	std	Y+7, r14	; 0x07
    191a:	f8 86       	std	Y+8, r15	; 0x08
    191c:	8e e1       	ldi	r24, 0x1E	; 30
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	82 1b       	sub	r24, r18
    1922:	93 0b       	sbc	r25, r19
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	13 c0       	rjmp	.+38     	; 0x1950 <__floatunsisf+0xde>
    192a:	21 15       	cp	r18, r1
    192c:	31 05       	cpc	r19, r1
    192e:	81 f0       	breq	.+32     	; 0x1950 <__floatunsisf+0xde>
    1930:	02 2e       	mov	r0, r18
    1932:	04 c0       	rjmp	.+8      	; 0x193c <__floatunsisf+0xca>
    1934:	cc 0c       	add	r12, r12
    1936:	dd 1c       	adc	r13, r13
    1938:	ee 1c       	adc	r14, r14
    193a:	ff 1c       	adc	r15, r15
    193c:	0a 94       	dec	r0
    193e:	d2 f7       	brpl	.-12     	; 0x1934 <__floatunsisf+0xc2>
    1940:	cd 82       	std	Y+5, r12	; 0x05
    1942:	de 82       	std	Y+6, r13	; 0x06
    1944:	ef 82       	std	Y+7, r14	; 0x07
    1946:	f8 86       	std	Y+8, r15	; 0x08
    1948:	02 1b       	sub	r16, r18
    194a:	13 0b       	sbc	r17, r19
    194c:	1c 83       	std	Y+4, r17	; 0x04
    194e:	0b 83       	std	Y+3, r16	; 0x03
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__pack_f>
    1958:	46 2f       	mov	r20, r22
    195a:	57 2f       	mov	r21, r23
    195c:	68 2f       	mov	r22, r24
    195e:	79 2f       	mov	r23, r25
    1960:	cb 01       	movw	r24, r22
    1962:	ba 01       	movw	r22, r20
    1964:	28 96       	adiw	r28, 0x08	; 8
    1966:	e8 e0       	ldi	r30, 0x08	; 8
    1968:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__epilogue_restores__+0x14>

0000196c <__clzsi2>:
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	8b 01       	movw	r16, r22
    197a:	9c 01       	movw	r18, r24
    197c:	00 30       	cpi	r16, 0x00	; 0
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	18 07       	cpc	r17, r24
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	28 07       	cpc	r18, r24
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	38 07       	cpc	r19, r24
    198a:	50 f4       	brcc	.+20     	; 0x19a0 <__clzsi2+0x34>
    198c:	0f 3f       	cpi	r16, 0xFF	; 255
    198e:	11 05       	cpc	r17, r1
    1990:	21 05       	cpc	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	09 f0       	breq	.+2      	; 0x1998 <__clzsi2+0x2c>
    1996:	88 f4       	brcc	.+34     	; 0x19ba <__clzsi2+0x4e>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	dc 01       	movw	r26, r24
    199e:	16 c0       	rjmp	.+44     	; 0x19cc <__clzsi2+0x60>
    19a0:	00 30       	cpi	r16, 0x00	; 0
    19a2:	e0 e0       	ldi	r30, 0x00	; 0
    19a4:	1e 07       	cpc	r17, r30
    19a6:	e0 e0       	ldi	r30, 0x00	; 0
    19a8:	2e 07       	cpc	r18, r30
    19aa:	e1 e0       	ldi	r30, 0x01	; 1
    19ac:	3e 07       	cpc	r19, r30
    19ae:	50 f4       	brcc	.+20     	; 0x19c4 <__clzsi2+0x58>
    19b0:	80 e1       	ldi	r24, 0x10	; 16
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	a0 e0       	ldi	r26, 0x00	; 0
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <__clzsi2+0x60>
    19ba:	88 e0       	ldi	r24, 0x08	; 8
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <__clzsi2+0x60>
    19c4:	88 e1       	ldi	r24, 0x18	; 24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	48 1b       	sub	r20, r24
    19d6:	59 0b       	sbc	r21, r25
    19d8:	6a 0b       	sbc	r22, r26
    19da:	7b 0b       	sbc	r23, r27
    19dc:	68 01       	movw	r12, r16
    19de:	79 01       	movw	r14, r18
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <__clzsi2+0x7e>
    19e2:	f6 94       	lsr	r15
    19e4:	e7 94       	ror	r14
    19e6:	d7 94       	ror	r13
    19e8:	c7 94       	ror	r12
    19ea:	8a 95       	dec	r24
    19ec:	d2 f7       	brpl	.-12     	; 0x19e2 <__clzsi2+0x76>
    19ee:	d7 01       	movw	r26, r14
    19f0:	c6 01       	movw	r24, r12
    19f2:	87 53       	subi	r24, 0x37	; 55
    19f4:	9c 4f       	sbci	r25, 0xFC	; 252
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	48 1b       	sub	r20, r24
    19fc:	51 09       	sbc	r21, r1
    19fe:	61 09       	sbc	r22, r1
    1a00:	71 09       	sbc	r23, r1
    1a02:	ca 01       	movw	r24, r20
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	08 95       	ret

00001a12 <__pack_f>:
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	dc 01       	movw	r26, r24
    1a20:	14 96       	adiw	r26, 0x04	; 4
    1a22:	4d 91       	ld	r20, X+
    1a24:	5d 91       	ld	r21, X+
    1a26:	6d 91       	ld	r22, X+
    1a28:	7c 91       	ld	r23, X
    1a2a:	17 97       	sbiw	r26, 0x07	; 7
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	ec 91       	ld	r30, X
    1a30:	11 97       	sbiw	r26, 0x01	; 1
    1a32:	8c 91       	ld	r24, X
    1a34:	82 30       	cpi	r24, 0x02	; 2
    1a36:	20 f4       	brcc	.+8      	; 0x1a40 <__pack_f+0x2e>
    1a38:	60 61       	ori	r22, 0x10	; 16
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a5 c0       	rjmp	.+330    	; 0x1b8a <__pack_f+0x178>
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <__pack_f+0x34>
    1a44:	9d c0       	rjmp	.+314    	; 0x1b80 <__pack_f+0x16e>
    1a46:	82 30       	cpi	r24, 0x02	; 2
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <__pack_f+0x3a>
    1a4a:	94 c0       	rjmp	.+296    	; 0x1b74 <__pack_f+0x162>
    1a4c:	41 15       	cp	r20, r1
    1a4e:	51 05       	cpc	r21, r1
    1a50:	61 05       	cpc	r22, r1
    1a52:	71 05       	cpc	r23, r1
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <__pack_f+0x46>
    1a56:	91 c0       	rjmp	.+290    	; 0x1b7a <__pack_f+0x168>
    1a58:	12 96       	adiw	r26, 0x02	; 2
    1a5a:	8d 91       	ld	r24, X+
    1a5c:	9c 91       	ld	r25, X
    1a5e:	13 97       	sbiw	r26, 0x03	; 3
    1a60:	2f ef       	ldi	r18, 0xFF	; 255
    1a62:	82 38       	cpi	r24, 0x82	; 130
    1a64:	92 07       	cpc	r25, r18
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <__pack_f+0x58>
    1a68:	59 c0       	rjmp	.+178    	; 0x1b1c <__pack_f+0x10a>
    1a6a:	22 e8       	ldi	r18, 0x82	; 130
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	28 1b       	sub	r18, r24
    1a70:	39 0b       	sbc	r19, r25
    1a72:	2a 31       	cpi	r18, 0x1A	; 26
    1a74:	31 05       	cpc	r19, r1
    1a76:	64 f5       	brge	.+88     	; 0x1ad0 <__pack_f+0xbe>
    1a78:	6a 01       	movw	r12, r20
    1a7a:	7b 01       	movw	r14, r22
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <__pack_f+0x76>
    1a80:	f6 94       	lsr	r15
    1a82:	e7 94       	ror	r14
    1a84:	d7 94       	ror	r13
    1a86:	c7 94       	ror	r12
    1a88:	0a 94       	dec	r0
    1a8a:	d2 f7       	brpl	.-12     	; 0x1a80 <__pack_f+0x6e>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <__pack_f+0x8c>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	aa 1f       	adc	r26, r26
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	2a 95       	dec	r18
    1aa0:	d2 f7       	brpl	.-12     	; 0x1a96 <__pack_f+0x84>
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	a1 09       	sbc	r26, r1
    1aa6:	b1 09       	sbc	r27, r1
    1aa8:	84 23       	and	r24, r20
    1aaa:	95 23       	and	r25, r21
    1aac:	a6 23       	and	r26, r22
    1aae:	b7 23       	and	r27, r23
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	a1 05       	cpc	r26, r1
    1abc:	b1 05       	cpc	r27, r1
    1abe:	19 f4       	brne	.+6      	; 0x1ac6 <__pack_f+0xb4>
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	ba 01       	movw	r22, r20
    1ac6:	4c 29       	or	r20, r12
    1ac8:	5d 29       	or	r21, r13
    1aca:	6e 29       	or	r22, r14
    1acc:	7f 29       	or	r23, r15
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <__pack_f+0xc4>
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	ba 01       	movw	r22, r20
    1ad6:	db 01       	movw	r26, r22
    1ad8:	ca 01       	movw	r24, r20
    1ada:	8f 77       	andi	r24, 0x7F	; 127
    1adc:	90 70       	andi	r25, 0x00	; 0
    1ade:	a0 70       	andi	r26, 0x00	; 0
    1ae0:	b0 70       	andi	r27, 0x00	; 0
    1ae2:	80 34       	cpi	r24, 0x40	; 64
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	a1 05       	cpc	r26, r1
    1ae8:	b1 05       	cpc	r27, r1
    1aea:	39 f4       	brne	.+14     	; 0x1afa <__pack_f+0xe8>
    1aec:	47 ff       	sbrs	r20, 7
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <__pack_f+0xf0>
    1af0:	40 5c       	subi	r20, 0xC0	; 192
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
    1af4:	6f 4f       	sbci	r22, 0xFF	; 255
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <__pack_f+0xf0>
    1afa:	41 5c       	subi	r20, 0xC1	; 193
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	6f 4f       	sbci	r22, 0xFF	; 255
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	40 30       	cpi	r20, 0x00	; 0
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	52 07       	cpc	r21, r18
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	62 07       	cpc	r22, r18
    1b10:	20 e4       	ldi	r18, 0x40	; 64
    1b12:	72 07       	cpc	r23, r18
    1b14:	38 f5       	brcc	.+78     	; 0x1b64 <__pack_f+0x152>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	24 c0       	rjmp	.+72     	; 0x1b64 <__pack_f+0x152>
    1b1c:	80 38       	cpi	r24, 0x80	; 128
    1b1e:	91 05       	cpc	r25, r1
    1b20:	7c f5       	brge	.+94     	; 0x1b80 <__pack_f+0x16e>
    1b22:	8a 01       	movw	r16, r20
    1b24:	9b 01       	movw	r18, r22
    1b26:	0f 77       	andi	r16, 0x7F	; 127
    1b28:	10 70       	andi	r17, 0x00	; 0
    1b2a:	20 70       	andi	r18, 0x00	; 0
    1b2c:	30 70       	andi	r19, 0x00	; 0
    1b2e:	00 34       	cpi	r16, 0x40	; 64
    1b30:	11 05       	cpc	r17, r1
    1b32:	21 05       	cpc	r18, r1
    1b34:	31 05       	cpc	r19, r1
    1b36:	39 f4       	brne	.+14     	; 0x1b46 <__pack_f+0x134>
    1b38:	47 ff       	sbrs	r20, 7
    1b3a:	09 c0       	rjmp	.+18     	; 0x1b4e <__pack_f+0x13c>
    1b3c:	40 5c       	subi	r20, 0xC0	; 192
    1b3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b40:	6f 4f       	sbci	r22, 0xFF	; 255
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <__pack_f+0x13c>
    1b46:	41 5c       	subi	r20, 0xC1	; 193
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4a:	6f 4f       	sbci	r22, 0xFF	; 255
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	77 fd       	sbrc	r23, 7
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <__pack_f+0x146>
    1b52:	81 58       	subi	r24, 0x81	; 129
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	06 c0       	rjmp	.+12     	; 0x1b64 <__pack_f+0x152>
    1b58:	76 95       	lsr	r23
    1b5a:	67 95       	ror	r22
    1b5c:	57 95       	ror	r21
    1b5e:	47 95       	ror	r20
    1b60:	80 58       	subi	r24, 0x80	; 128
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	97 e0       	ldi	r25, 0x07	; 7
    1b66:	76 95       	lsr	r23
    1b68:	67 95       	ror	r22
    1b6a:	57 95       	ror	r21
    1b6c:	47 95       	ror	r20
    1b6e:	9a 95       	dec	r25
    1b70:	d1 f7       	brne	.-12     	; 0x1b66 <__pack_f+0x154>
    1b72:	0b c0       	rjmp	.+22     	; 0x1b8a <__pack_f+0x178>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <__pack_f+0x172>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <__pack_f+0x178>
    1b80:	8f ef       	ldi	r24, 0xFF	; 255
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	ba 01       	movw	r22, r20
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	97 95       	ror	r25
    1b8e:	99 27       	eor	r25, r25
    1b90:	97 95       	ror	r25
    1b92:	a6 2f       	mov	r26, r22
    1b94:	af 77       	andi	r26, 0x7F	; 127
    1b96:	e7 95       	ror	r30
    1b98:	ee 27       	eor	r30, r30
    1b9a:	e7 95       	ror	r30
    1b9c:	86 95       	lsr	r24
    1b9e:	3a 2f       	mov	r19, r26
    1ba0:	39 2b       	or	r19, r25
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	2e 2b       	or	r18, r30
    1ba6:	84 2f       	mov	r24, r20
    1ba8:	95 2f       	mov	r25, r21
    1baa:	a3 2f       	mov	r26, r19
    1bac:	b2 2f       	mov	r27, r18
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	df 90       	pop	r13
    1bbc:	cf 90       	pop	r12
    1bbe:	08 95       	ret

00001bc0 <__unpack_f>:
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	fb 01       	movw	r30, r22
    1bc4:	4c 91       	ld	r20, X
    1bc6:	11 96       	adiw	r26, 0x01	; 1
    1bc8:	5c 91       	ld	r21, X
    1bca:	11 97       	sbiw	r26, 0x01	; 1
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	8c 91       	ld	r24, X
    1bd0:	12 97       	sbiw	r26, 0x02	; 2
    1bd2:	68 2f       	mov	r22, r24
    1bd4:	6f 77       	andi	r22, 0x7F	; 127
    1bd6:	70 e0       	ldi	r23, 0x00	; 0
    1bd8:	98 2f       	mov	r25, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	99 27       	eor	r25, r25
    1bde:	99 1f       	adc	r25, r25
    1be0:	13 96       	adiw	r26, 0x03	; 3
    1be2:	2c 91       	ld	r18, X
    1be4:	13 97       	sbiw	r26, 0x03	; 3
    1be6:	82 2f       	mov	r24, r18
    1be8:	88 0f       	add	r24, r24
    1bea:	89 2b       	or	r24, r25
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	22 1f       	adc	r18, r18
    1bf0:	22 27       	eor	r18, r18
    1bf2:	22 1f       	adc	r18, r18
    1bf4:	21 83       	std	Z+1, r18	; 0x01
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	39 f5       	brne	.+78     	; 0x1c48 <__unpack_f+0x88>
    1bfa:	41 15       	cp	r20, r1
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	61 05       	cpc	r22, r1
    1c00:	71 05       	cpc	r23, r1
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <__unpack_f+0x48>
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	29 c0       	rjmp	.+82     	; 0x1c5a <__unpack_f+0x9a>
    1c08:	82 e8       	ldi	r24, 0x82	; 130
    1c0a:	9f ef       	ldi	r25, 0xFF	; 255
    1c0c:	93 83       	std	Z+3, r25	; 0x03
    1c0e:	82 83       	std	Z+2, r24	; 0x02
    1c10:	27 e0       	ldi	r18, 0x07	; 7
    1c12:	44 0f       	add	r20, r20
    1c14:	55 1f       	adc	r21, r21
    1c16:	66 1f       	adc	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	2a 95       	dec	r18
    1c1c:	d1 f7       	brne	.-12     	; 0x1c12 <__unpack_f+0x52>
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	80 83       	st	Z, r24
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <__unpack_f+0x76>
    1c24:	44 0f       	add	r20, r20
    1c26:	55 1f       	adc	r21, r21
    1c28:	66 1f       	adc	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	93 83       	std	Z+3, r25	; 0x03
    1c34:	82 83       	std	Z+2, r24	; 0x02
    1c36:	40 30       	cpi	r20, 0x00	; 0
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	58 07       	cpc	r21, r24
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	68 07       	cpc	r22, r24
    1c40:	80 e4       	ldi	r24, 0x40	; 64
    1c42:	78 07       	cpc	r23, r24
    1c44:	78 f3       	brcs	.-34     	; 0x1c24 <__unpack_f+0x64>
    1c46:	20 c0       	rjmp	.+64     	; 0x1c88 <__unpack_f+0xc8>
    1c48:	8f 3f       	cpi	r24, 0xFF	; 255
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	79 f4       	brne	.+30     	; 0x1c6c <__unpack_f+0xac>
    1c4e:	41 15       	cp	r20, r1
    1c50:	51 05       	cpc	r21, r1
    1c52:	61 05       	cpc	r22, r1
    1c54:	71 05       	cpc	r23, r1
    1c56:	19 f4       	brne	.+6      	; 0x1c5e <__unpack_f+0x9e>
    1c58:	84 e0       	ldi	r24, 0x04	; 4
    1c5a:	80 83       	st	Z, r24
    1c5c:	08 95       	ret
    1c5e:	64 ff       	sbrs	r22, 4
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <__unpack_f+0xa8>
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	80 83       	st	Z, r24
    1c66:	10 c0       	rjmp	.+32     	; 0x1c88 <__unpack_f+0xc8>
    1c68:	10 82       	st	Z, r1
    1c6a:	0e c0       	rjmp	.+28     	; 0x1c88 <__unpack_f+0xc8>
    1c6c:	8f 57       	subi	r24, 0x7F	; 127
    1c6e:	90 40       	sbci	r25, 0x00	; 0
    1c70:	93 83       	std	Z+3, r25	; 0x03
    1c72:	82 83       	std	Z+2, r24	; 0x02
    1c74:	83 e0       	ldi	r24, 0x03	; 3
    1c76:	80 83       	st	Z, r24
    1c78:	87 e0       	ldi	r24, 0x07	; 7
    1c7a:	44 0f       	add	r20, r20
    1c7c:	55 1f       	adc	r21, r21
    1c7e:	66 1f       	adc	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	8a 95       	dec	r24
    1c84:	d1 f7       	brne	.-12     	; 0x1c7a <__unpack_f+0xba>
    1c86:	70 64       	ori	r23, 0x40	; 64
    1c88:	44 83       	std	Z+4, r20	; 0x04
    1c8a:	55 83       	std	Z+5, r21	; 0x05
    1c8c:	66 83       	std	Z+6, r22	; 0x06
    1c8e:	77 83       	std	Z+7, r23	; 0x07
    1c90:	08 95       	ret

00001c92 <__fpcmp_parts_f>:
    1c92:	cf 93       	push	r28
    1c94:	fc 01       	movw	r30, r24
    1c96:	db 01       	movw	r26, r22
    1c98:	90 81       	ld	r25, Z
    1c9a:	92 30       	cpi	r25, 0x02	; 2
    1c9c:	08 f4       	brcc	.+2      	; 0x1ca0 <__fpcmp_parts_f+0xe>
    1c9e:	4c c0       	rjmp	.+152    	; 0x1d38 <__fpcmp_parts_f+0xa6>
    1ca0:	8c 91       	ld	r24, X
    1ca2:	82 30       	cpi	r24, 0x02	; 2
    1ca4:	08 f4       	brcc	.+2      	; 0x1ca8 <__fpcmp_parts_f+0x16>
    1ca6:	48 c0       	rjmp	.+144    	; 0x1d38 <__fpcmp_parts_f+0xa6>
    1ca8:	94 30       	cpi	r25, 0x04	; 4
    1caa:	69 f4       	brne	.+26     	; 0x1cc6 <__fpcmp_parts_f+0x34>
    1cac:	21 81       	ldd	r18, Z+1	; 0x01
    1cae:	84 30       	cpi	r24, 0x04	; 4
    1cb0:	39 f4       	brne	.+14     	; 0x1cc0 <__fpcmp_parts_f+0x2e>
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	8c 91       	ld	r24, X
    1cb6:	11 97       	sbiw	r26, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	82 1b       	sub	r24, r18
    1cbc:	91 09       	sbc	r25, r1
    1cbe:	44 c0       	rjmp	.+136    	; 0x1d48 <__fpcmp_parts_f+0xb6>
    1cc0:	22 23       	and	r18, r18
    1cc2:	d1 f1       	breq	.+116    	; 0x1d38 <__fpcmp_parts_f+0xa6>
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <__fpcmp_parts_f+0xb2>
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	21 f0       	breq	.+8      	; 0x1cd2 <__fpcmp_parts_f+0x40>
    1cca:	92 30       	cpi	r25, 0x02	; 2
    1ccc:	41 f4       	brne	.+16     	; 0x1cde <__fpcmp_parts_f+0x4c>
    1cce:	82 30       	cpi	r24, 0x02	; 2
    1cd0:	b1 f1       	breq	.+108    	; 0x1d3e <__fpcmp_parts_f+0xac>
    1cd2:	11 96       	adiw	r26, 0x01	; 1
    1cd4:	8c 91       	ld	r24, X
    1cd6:	11 97       	sbiw	r26, 0x01	; 1
    1cd8:	88 23       	and	r24, r24
    1cda:	a1 f1       	breq	.+104    	; 0x1d44 <__fpcmp_parts_f+0xb2>
    1cdc:	2d c0       	rjmp	.+90     	; 0x1d38 <__fpcmp_parts_f+0xa6>
    1cde:	c1 81       	ldd	r28, Z+1	; 0x01
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	01 f1       	breq	.+64     	; 0x1d24 <__fpcmp_parts_f+0x92>
    1ce4:	11 96       	adiw	r26, 0x01	; 1
    1ce6:	8c 91       	ld	r24, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	c8 17       	cp	r28, r24
    1cec:	d9 f4       	brne	.+54     	; 0x1d24 <__fpcmp_parts_f+0x92>
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	12 96       	adiw	r26, 0x02	; 2
    1cf4:	2d 91       	ld	r18, X+
    1cf6:	3c 91       	ld	r19, X
    1cf8:	13 97       	sbiw	r26, 0x03	; 3
    1cfa:	28 17       	cp	r18, r24
    1cfc:	39 07       	cpc	r19, r25
    1cfe:	94 f0       	brlt	.+36     	; 0x1d24 <__fpcmp_parts_f+0x92>
    1d00:	82 17       	cp	r24, r18
    1d02:	93 07       	cpc	r25, r19
    1d04:	bc f0       	brlt	.+46     	; 0x1d34 <__fpcmp_parts_f+0xa2>
    1d06:	44 81       	ldd	r20, Z+4	; 0x04
    1d08:	55 81       	ldd	r21, Z+5	; 0x05
    1d0a:	66 81       	ldd	r22, Z+6	; 0x06
    1d0c:	77 81       	ldd	r23, Z+7	; 0x07
    1d0e:	14 96       	adiw	r26, 0x04	; 4
    1d10:	8d 91       	ld	r24, X+
    1d12:	9d 91       	ld	r25, X+
    1d14:	0d 90       	ld	r0, X+
    1d16:	bc 91       	ld	r27, X
    1d18:	a0 2d       	mov	r26, r0
    1d1a:	84 17       	cp	r24, r20
    1d1c:	95 07       	cpc	r25, r21
    1d1e:	a6 07       	cpc	r26, r22
    1d20:	b7 07       	cpc	r27, r23
    1d22:	18 f4       	brcc	.+6      	; 0x1d2a <__fpcmp_parts_f+0x98>
    1d24:	cc 23       	and	r28, r28
    1d26:	41 f0       	breq	.+16     	; 0x1d38 <__fpcmp_parts_f+0xa6>
    1d28:	0d c0       	rjmp	.+26     	; 0x1d44 <__fpcmp_parts_f+0xb2>
    1d2a:	48 17       	cp	r20, r24
    1d2c:	59 07       	cpc	r21, r25
    1d2e:	6a 07       	cpc	r22, r26
    1d30:	7b 07       	cpc	r23, r27
    1d32:	28 f4       	brcc	.+10     	; 0x1d3e <__fpcmp_parts_f+0xac>
    1d34:	cc 23       	and	r28, r28
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <__fpcmp_parts_f+0xb2>
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	05 c0       	rjmp	.+10     	; 0x1d48 <__fpcmp_parts_f+0xb6>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <__fpcmp_parts_f+0xb6>
    1d44:	8f ef       	ldi	r24, 0xFF	; 255
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <main>:
#include "task.h"
#include "adc.h"
#include "spi.h"

int main()
{
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	2a 97       	sbiw	r28, 0x0a	; 10
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
	int 	tag;
	struct	task task;

	sei();
    1d60:	78 94       	sei
	uart_init();
    1d62:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uart_init>
	task_init();
    1d66:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <task_init>
	timer_init();	
    1d6a:	0e 94 10 06 	call	0xc20	; 0xc20 <timer_init>
	adc_init();
    1d6e:	0e 94 96 00 	call	0x12c	; 0x12c <adc_init>
	spi_init();
    1d72:	0e 94 7e 07 	call	0xefc	; 0xefc <spi_init>

	printf("$ ");
    1d76:	0f 92       	push	r0
    1d78:	0f 92       	push	r0
    1d7a:	82 e3       	ldi	r24, 0x32	; 50
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	ed b7       	in	r30, 0x3d	; 61
    1d80:	fe b7       	in	r31, 0x3e	; 62
    1d82:	92 83       	std	Z+2, r25	; 0x02
    1d84:	81 83       	std	Z+1, r24	; 0x01
    1d86:	0e 94 1e 11 	call	0x223c	; 0x223c <printf>
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
		
	while(1) {
		cli();
    1d8e:	f8 94       	cli
		tag = task_delete(&task);
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	0e 94 19 04 	call	0x832	; 0x832 <task_delete>
		sei();
    1d98:	78 94       	sei
		if (tag)
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	c1 f3       	breq	.-16     	; 0x1d8e <main+0x42>
			(*(task.fun))(task.arg);
    1d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1da0:	fa 81       	ldd	r31, Y+2	; 0x02
    1da2:	ce 01       	movw	r24, r28
    1da4:	03 96       	adiw	r24, 0x03	; 3
    1da6:	19 95       	eicall
    1da8:	f2 cf       	rjmp	.-28     	; 0x1d8e <main+0x42>

00001daa <__divmodhi4>:
    1daa:	97 fb       	bst	r25, 7
    1dac:	09 2e       	mov	r0, r25
    1dae:	07 26       	eor	r0, r23
    1db0:	0a d0       	rcall	.+20     	; 0x1dc6 <__divmodhi4_neg1>
    1db2:	77 fd       	sbrc	r23, 7
    1db4:	04 d0       	rcall	.+8      	; 0x1dbe <__divmodhi4_neg2>
    1db6:	0c d0       	rcall	.+24     	; 0x1dd0 <__udivmodhi4>
    1db8:	06 d0       	rcall	.+12     	; 0x1dc6 <__divmodhi4_neg1>
    1dba:	00 20       	and	r0, r0
    1dbc:	1a f4       	brpl	.+6      	; 0x1dc4 <__divmodhi4_exit>

00001dbe <__divmodhi4_neg2>:
    1dbe:	70 95       	com	r23
    1dc0:	61 95       	neg	r22
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255

00001dc4 <__divmodhi4_exit>:
    1dc4:	08 95       	ret

00001dc6 <__divmodhi4_neg1>:
    1dc6:	f6 f7       	brtc	.-4      	; 0x1dc4 <__divmodhi4_exit>
    1dc8:	90 95       	com	r25
    1dca:	81 95       	neg	r24
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	08 95       	ret

00001dd0 <__udivmodhi4>:
    1dd0:	aa 1b       	sub	r26, r26
    1dd2:	bb 1b       	sub	r27, r27
    1dd4:	51 e1       	ldi	r21, 0x11	; 17
    1dd6:	07 c0       	rjmp	.+14     	; 0x1de6 <__udivmodhi4_ep>

00001dd8 <__udivmodhi4_loop>:
    1dd8:	aa 1f       	adc	r26, r26
    1dda:	bb 1f       	adc	r27, r27
    1ddc:	a6 17       	cp	r26, r22
    1dde:	b7 07       	cpc	r27, r23
    1de0:	10 f0       	brcs	.+4      	; 0x1de6 <__udivmodhi4_ep>
    1de2:	a6 1b       	sub	r26, r22
    1de4:	b7 0b       	sbc	r27, r23

00001de6 <__udivmodhi4_ep>:
    1de6:	88 1f       	adc	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	5a 95       	dec	r21
    1dec:	a9 f7       	brne	.-22     	; 0x1dd8 <__udivmodhi4_loop>
    1dee:	80 95       	com	r24
    1df0:	90 95       	com	r25
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	08 95       	ret

00001df8 <__prologue_saves__>:
    1df8:	2f 92       	push	r2
    1dfa:	3f 92       	push	r3
    1dfc:	4f 92       	push	r4
    1dfe:	5f 92       	push	r5
    1e00:	6f 92       	push	r6
    1e02:	7f 92       	push	r7
    1e04:	8f 92       	push	r8
    1e06:	9f 92       	push	r9
    1e08:	af 92       	push	r10
    1e0a:	bf 92       	push	r11
    1e0c:	cf 92       	push	r12
    1e0e:	df 92       	push	r13
    1e10:	ef 92       	push	r14
    1e12:	ff 92       	push	r15
    1e14:	0f 93       	push	r16
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	ca 1b       	sub	r28, r26
    1e22:	db 0b       	sbc	r29, r27
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	19 94       	eijmp

00001e30 <__epilogue_restores__>:
    1e30:	2a 88       	ldd	r2, Y+18	; 0x12
    1e32:	39 88       	ldd	r3, Y+17	; 0x11
    1e34:	48 88       	ldd	r4, Y+16	; 0x10
    1e36:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e38:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e40:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e42:	b9 84       	ldd	r11, Y+9	; 0x09
    1e44:	c8 84       	ldd	r12, Y+8	; 0x08
    1e46:	df 80       	ldd	r13, Y+7	; 0x07
    1e48:	ee 80       	ldd	r14, Y+6	; 0x06
    1e4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e4c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e50:	aa 81       	ldd	r26, Y+2	; 0x02
    1e52:	b9 81       	ldd	r27, Y+1	; 0x01
    1e54:	ce 0f       	add	r28, r30
    1e56:	d1 1d       	adc	r29, r1
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	ed 01       	movw	r28, r26
    1e64:	08 95       	ret

00001e66 <malloc>:
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	82 30       	cpi	r24, 0x02	; 2
    1e6e:	91 05       	cpc	r25, r1
    1e70:	10 f4       	brcc	.+4      	; 0x1e76 <malloc+0x10>
    1e72:	42 e0       	ldi	r20, 0x02	; 2
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	e0 91 0c 06 	lds	r30, 0x060C
    1e7a:	f0 91 0d 06 	lds	r31, 0x060D
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	a0 e0       	ldi	r26, 0x00	; 0
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	24 c0       	rjmp	.+72     	; 0x1ed0 <malloc+0x6a>
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	84 17       	cp	r24, r20
    1e8e:	95 07       	cpc	r25, r21
    1e90:	d0 f0       	brcs	.+52     	; 0x1ec6 <malloc+0x60>
    1e92:	84 17       	cp	r24, r20
    1e94:	95 07       	cpc	r25, r21
    1e96:	71 f4       	brne	.+28     	; 0x1eb4 <malloc+0x4e>
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	10 97       	sbiw	r26, 0x00	; 0
    1e9e:	29 f0       	breq	.+10     	; 0x1eaa <malloc+0x44>
    1ea0:	13 96       	adiw	r26, 0x03	; 3
    1ea2:	9c 93       	st	X, r25
    1ea4:	8e 93       	st	-X, r24
    1ea6:	12 97       	sbiw	r26, 0x02	; 2
    1ea8:	2c c0       	rjmp	.+88     	; 0x1f02 <malloc+0x9c>
    1eaa:	90 93 0d 06 	sts	0x060D, r25
    1eae:	80 93 0c 06 	sts	0x060C, r24
    1eb2:	27 c0       	rjmp	.+78     	; 0x1f02 <malloc+0x9c>
    1eb4:	21 15       	cp	r18, r1
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	19 f0       	breq	.+6      	; 0x1ec0 <malloc+0x5a>
    1eba:	82 17       	cp	r24, r18
    1ebc:	93 07       	cpc	r25, r19
    1ebe:	18 f4       	brcc	.+6      	; 0x1ec6 <malloc+0x60>
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	bd 01       	movw	r22, r26
    1ec4:	ef 01       	movw	r28, r30
    1ec6:	92 81       	ldd	r25, Z+2	; 0x02
    1ec8:	83 81       	ldd	r24, Z+3	; 0x03
    1eca:	df 01       	movw	r26, r30
    1ecc:	e9 2f       	mov	r30, r25
    1ece:	f8 2f       	mov	r31, r24
    1ed0:	30 97       	sbiw	r30, 0x00	; 0
    1ed2:	d1 f6       	brne	.-76     	; 0x1e88 <malloc+0x22>
    1ed4:	21 15       	cp	r18, r1
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	f9 f0       	breq	.+62     	; 0x1f18 <malloc+0xb2>
    1eda:	c9 01       	movw	r24, r18
    1edc:	84 1b       	sub	r24, r20
    1ede:	95 0b       	sbc	r25, r21
    1ee0:	84 30       	cpi	r24, 0x04	; 4
    1ee2:	91 05       	cpc	r25, r1
    1ee4:	80 f4       	brcc	.+32     	; 0x1f06 <malloc+0xa0>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eea:	61 15       	cp	r22, r1
    1eec:	71 05       	cpc	r23, r1
    1eee:	21 f0       	breq	.+8      	; 0x1ef8 <malloc+0x92>
    1ef0:	fb 01       	movw	r30, r22
    1ef2:	93 83       	std	Z+3, r25	; 0x03
    1ef4:	82 83       	std	Z+2, r24	; 0x02
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <malloc+0x9a>
    1ef8:	90 93 0d 06 	sts	0x060D, r25
    1efc:	80 93 0c 06 	sts	0x060C, r24
    1f00:	fe 01       	movw	r30, r28
    1f02:	32 96       	adiw	r30, 0x02	; 2
    1f04:	42 c0       	rjmp	.+132    	; 0x1f8a <malloc+0x124>
    1f06:	fe 01       	movw	r30, r28
    1f08:	e8 0f       	add	r30, r24
    1f0a:	f9 1f       	adc	r31, r25
    1f0c:	41 93       	st	Z+, r20
    1f0e:	51 93       	st	Z+, r21
    1f10:	02 97       	sbiw	r24, 0x02	; 2
    1f12:	99 83       	std	Y+1, r25	; 0x01
    1f14:	88 83       	st	Y, r24
    1f16:	39 c0       	rjmp	.+114    	; 0x1f8a <malloc+0x124>
    1f18:	80 91 0a 06 	lds	r24, 0x060A
    1f1c:	90 91 0b 06 	lds	r25, 0x060B
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	41 f4       	brne	.+16     	; 0x1f34 <malloc+0xce>
    1f24:	80 91 cb 04 	lds	r24, 0x04CB
    1f28:	90 91 cc 04 	lds	r25, 0x04CC
    1f2c:	90 93 0b 06 	sts	0x060B, r25
    1f30:	80 93 0a 06 	sts	0x060A, r24
    1f34:	20 91 c9 04 	lds	r18, 0x04C9
    1f38:	30 91 ca 04 	lds	r19, 0x04CA
    1f3c:	21 15       	cp	r18, r1
    1f3e:	31 05       	cpc	r19, r1
    1f40:	41 f4       	brne	.+16     	; 0x1f52 <malloc+0xec>
    1f42:	2d b7       	in	r18, 0x3d	; 61
    1f44:	3e b7       	in	r19, 0x3e	; 62
    1f46:	80 91 cd 04 	lds	r24, 0x04CD
    1f4a:	90 91 ce 04 	lds	r25, 0x04CE
    1f4e:	28 1b       	sub	r18, r24
    1f50:	39 0b       	sbc	r19, r25
    1f52:	e0 91 0a 06 	lds	r30, 0x060A
    1f56:	f0 91 0b 06 	lds	r31, 0x060B
    1f5a:	e2 17       	cp	r30, r18
    1f5c:	f3 07       	cpc	r31, r19
    1f5e:	98 f4       	brcc	.+38     	; 0x1f86 <malloc+0x120>
    1f60:	2e 1b       	sub	r18, r30
    1f62:	3f 0b       	sbc	r19, r31
    1f64:	24 17       	cp	r18, r20
    1f66:	35 07       	cpc	r19, r21
    1f68:	70 f0       	brcs	.+28     	; 0x1f86 <malloc+0x120>
    1f6a:	ca 01       	movw	r24, r20
    1f6c:	02 96       	adiw	r24, 0x02	; 2
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	48 f0       	brcs	.+18     	; 0x1f86 <malloc+0x120>
    1f74:	8e 0f       	add	r24, r30
    1f76:	9f 1f       	adc	r25, r31
    1f78:	90 93 0b 06 	sts	0x060B, r25
    1f7c:	80 93 0a 06 	sts	0x060A, r24
    1f80:	41 93       	st	Z+, r20
    1f82:	51 93       	st	Z+, r21
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <malloc+0x124>
    1f86:	e0 e0       	ldi	r30, 0x00	; 0
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	cf 01       	movw	r24, r30
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <free>:
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	9c 01       	movw	r18, r24
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <free+0x10>
    1fa0:	8c c0       	rjmp	.+280    	; 0x20ba <free+0x128>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	12 97       	sbiw	r26, 0x02	; 2
    1fa6:	13 96       	adiw	r26, 0x03	; 3
    1fa8:	1c 92       	st	X, r1
    1faa:	1e 92       	st	-X, r1
    1fac:	12 97       	sbiw	r26, 0x02	; 2
    1fae:	60 91 0c 06 	lds	r22, 0x060C
    1fb2:	70 91 0d 06 	lds	r23, 0x060D
    1fb6:	61 15       	cp	r22, r1
    1fb8:	71 05       	cpc	r23, r1
    1fba:	89 f4       	brne	.+34     	; 0x1fde <free+0x4c>
    1fbc:	8d 91       	ld	r24, X+
    1fbe:	9c 91       	ld	r25, X
    1fc0:	11 97       	sbiw	r26, 0x01	; 1
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	20 91 0a 06 	lds	r18, 0x060A
    1fca:	30 91 0b 06 	lds	r19, 0x060B
    1fce:	28 17       	cp	r18, r24
    1fd0:	39 07       	cpc	r19, r25
    1fd2:	69 f5       	brne	.+90     	; 0x202e <free+0x9c>
    1fd4:	b0 93 0b 06 	sts	0x060B, r27
    1fd8:	a0 93 0a 06 	sts	0x060A, r26
    1fdc:	6e c0       	rjmp	.+220    	; 0x20ba <free+0x128>
    1fde:	fb 01       	movw	r30, r22
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <free+0x56>
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	ea 17       	cp	r30, r26
    1fea:	fb 07       	cpc	r31, r27
    1fec:	30 f4       	brcc	.+12     	; 0x1ffa <free+0x68>
    1fee:	82 81       	ldd	r24, Z+2	; 0x02
    1ff0:	93 81       	ldd	r25, Z+3	; 0x03
    1ff2:	af 01       	movw	r20, r30
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	b9 f7       	brne	.-18     	; 0x1fe6 <free+0x54>
    1ff8:	1f c0       	rjmp	.+62     	; 0x2038 <free+0xa6>
    1ffa:	e9 01       	movw	r28, r18
    1ffc:	22 97       	sbiw	r28, 0x02	; 2
    1ffe:	fb 83       	std	Y+3, r31	; 0x03
    2000:	ea 83       	std	Y+2, r30	; 0x02
    2002:	08 81       	ld	r16, Y
    2004:	19 81       	ldd	r17, Y+1	; 0x01
    2006:	c9 01       	movw	r24, r18
    2008:	80 0f       	add	r24, r16
    200a:	91 1f       	adc	r25, r17
    200c:	8e 17       	cp	r24, r30
    200e:	9f 07       	cpc	r25, r31
    2010:	59 f4       	brne	.+22     	; 0x2028 <free+0x96>
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	80 0f       	add	r24, r16
    2018:	91 1f       	adc	r25, r17
    201a:	02 96       	adiw	r24, 0x02	; 2
    201c:	99 83       	std	Y+1, r25	; 0x01
    201e:	88 83       	st	Y, r24
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	9b 83       	std	Y+3, r25	; 0x03
    2026:	8a 83       	std	Y+2, r24	; 0x02
    2028:	41 15       	cp	r20, r1
    202a:	51 05       	cpc	r21, r1
    202c:	29 f4       	brne	.+10     	; 0x2038 <free+0xa6>
    202e:	b0 93 0d 06 	sts	0x060D, r27
    2032:	a0 93 0c 06 	sts	0x060C, r26
    2036:	41 c0       	rjmp	.+130    	; 0x20ba <free+0x128>
    2038:	fa 01       	movw	r30, r20
    203a:	b3 83       	std	Z+3, r27	; 0x03
    203c:	a2 83       	std	Z+2, r26	; 0x02
    203e:	c1 91       	ld	r28, Z+
    2040:	d1 91       	ld	r29, Z+
    2042:	ec 0f       	add	r30, r28
    2044:	fd 1f       	adc	r31, r29
    2046:	ae 17       	cp	r26, r30
    2048:	bf 07       	cpc	r27, r31
    204a:	81 f4       	brne	.+32     	; 0x206c <free+0xda>
    204c:	f9 01       	movw	r30, r18
    204e:	92 91       	ld	r25, -Z
    2050:	82 91       	ld	r24, -Z
    2052:	8c 0f       	add	r24, r28
    2054:	9d 1f       	adc	r25, r29
    2056:	02 96       	adiw	r24, 0x02	; 2
    2058:	da 01       	movw	r26, r20
    205a:	11 96       	adiw	r26, 0x01	; 1
    205c:	9c 93       	st	X, r25
    205e:	8e 93       	st	-X, r24
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	13 96       	adiw	r26, 0x03	; 3
    2066:	9c 93       	st	X, r25
    2068:	8e 93       	st	-X, r24
    206a:	12 97       	sbiw	r26, 0x02	; 2
    206c:	e0 e0       	ldi	r30, 0x00	; 0
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <free+0xe4>
    2072:	fb 01       	movw	r30, r22
    2074:	bc 01       	movw	r22, r24
    2076:	db 01       	movw	r26, r22
    2078:	12 96       	adiw	r26, 0x02	; 2
    207a:	8d 91       	ld	r24, X+
    207c:	9c 91       	ld	r25, X
    207e:	13 97       	sbiw	r26, 0x03	; 3
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	b9 f7       	brne	.-18     	; 0x2072 <free+0xe0>
    2084:	cb 01       	movw	r24, r22
    2086:	02 96       	adiw	r24, 0x02	; 2
    2088:	2d 91       	ld	r18, X+
    208a:	3c 91       	ld	r19, X
    208c:	11 97       	sbiw	r26, 0x01	; 1
    208e:	82 0f       	add	r24, r18
    2090:	93 1f       	adc	r25, r19
    2092:	20 91 0a 06 	lds	r18, 0x060A
    2096:	30 91 0b 06 	lds	r19, 0x060B
    209a:	28 17       	cp	r18, r24
    209c:	39 07       	cpc	r19, r25
    209e:	69 f4       	brne	.+26     	; 0x20ba <free+0x128>
    20a0:	30 97       	sbiw	r30, 0x00	; 0
    20a2:	29 f4       	brne	.+10     	; 0x20ae <free+0x11c>
    20a4:	10 92 0d 06 	sts	0x060D, r1
    20a8:	10 92 0c 06 	sts	0x060C, r1
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <free+0x120>
    20ae:	13 82       	std	Z+3, r1	; 0x03
    20b0:	12 82       	std	Z+2, r1	; 0x02
    20b2:	70 93 0b 06 	sts	0x060B, r23
    20b6:	60 93 0a 06 	sts	0x060A, r22
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	08 95       	ret

000020c4 <atoi>:
    20c4:	fc 01       	movw	r30, r24
    20c6:	88 27       	eor	r24, r24
    20c8:	99 27       	eor	r25, r25
    20ca:	e8 94       	clt
    20cc:	21 91       	ld	r18, Z+
    20ce:	20 32       	cpi	r18, 0x20	; 32
    20d0:	e9 f3       	breq	.-6      	; 0x20cc <atoi+0x8>
    20d2:	29 30       	cpi	r18, 0x09	; 9
    20d4:	10 f0       	brcs	.+4      	; 0x20da <atoi+0x16>
    20d6:	2e 30       	cpi	r18, 0x0E	; 14
    20d8:	c8 f3       	brcs	.-14     	; 0x20cc <atoi+0x8>
    20da:	2b 32       	cpi	r18, 0x2B	; 43
    20dc:	41 f0       	breq	.+16     	; 0x20ee <atoi+0x2a>
    20de:	2d 32       	cpi	r18, 0x2D	; 45
    20e0:	39 f4       	brne	.+14     	; 0x20f0 <atoi+0x2c>
    20e2:	68 94       	set
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <atoi+0x2a>
    20e6:	0e 94 bc 10 	call	0x2178	; 0x2178 <__mulhi_const_10>
    20ea:	82 0f       	add	r24, r18
    20ec:	91 1d       	adc	r25, r1
    20ee:	21 91       	ld	r18, Z+
    20f0:	20 53       	subi	r18, 0x30	; 48
    20f2:	2a 30       	cpi	r18, 0x0A	; 10
    20f4:	c0 f3       	brcs	.-16     	; 0x20e6 <atoi+0x22>
    20f6:	1e f4       	brtc	.+6      	; 0x20fe <atoi+0x3a>
    20f8:	90 95       	com	r25
    20fa:	81 95       	neg	r24
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	08 95       	ret

00002100 <strtok>:
    2100:	4b ed       	ldi	r20, 0xDB	; 219
    2102:	54 e0       	ldi	r21, 0x04	; 4
    2104:	0e 94 95 10 	call	0x212a	; 0x212a <strtok_r>
    2108:	08 95       	ret

0000210a <strcmp>:
    210a:	fb 01       	movw	r30, r22
    210c:	dc 01       	movw	r26, r24
    210e:	8d 91       	ld	r24, X+
    2110:	01 90       	ld	r0, Z+
    2112:	80 19       	sub	r24, r0
    2114:	01 10       	cpse	r0, r1
    2116:	d9 f3       	breq	.-10     	; 0x210e <strcmp+0x4>
    2118:	99 0b       	sbc	r25, r25
    211a:	08 95       	ret

0000211c <strcpy>:
    211c:	fb 01       	movw	r30, r22
    211e:	dc 01       	movw	r26, r24
    2120:	01 90       	ld	r0, Z+
    2122:	0d 92       	st	X+, r0
    2124:	00 20       	and	r0, r0
    2126:	e1 f7       	brne	.-8      	; 0x2120 <strcpy+0x4>
    2128:	08 95       	ret

0000212a <strtok_r>:
    212a:	fa 01       	movw	r30, r20
    212c:	a1 91       	ld	r26, Z+
    212e:	b0 81       	ld	r27, Z
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	19 f4       	brne	.+6      	; 0x213a <strtok_r+0x10>
    2134:	10 97       	sbiw	r26, 0x00	; 0
    2136:	e1 f0       	breq	.+56     	; 0x2170 <strtok_r+0x46>
    2138:	cd 01       	movw	r24, r26
    213a:	dc 01       	movw	r26, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0d 90       	ld	r0, X+
    2140:	00 20       	and	r0, r0
    2142:	11 f4       	brne	.+4      	; 0x2148 <strtok_r+0x1e>
    2144:	c0 01       	movw	r24, r0
    2146:	13 c0       	rjmp	.+38     	; 0x216e <strtok_r+0x44>
    2148:	fb 01       	movw	r30, r22
    214a:	21 91       	ld	r18, Z+
    214c:	22 23       	and	r18, r18
    214e:	19 f0       	breq	.+6      	; 0x2156 <strtok_r+0x2c>
    2150:	20 15       	cp	r18, r0
    2152:	d9 f7       	brne	.-10     	; 0x214a <strtok_r+0x20>
    2154:	f3 cf       	rjmp	.-26     	; 0x213c <strtok_r+0x12>
    2156:	fb 01       	movw	r30, r22
    2158:	21 91       	ld	r18, Z+
    215a:	20 15       	cp	r18, r0
    215c:	19 f4       	brne	.+6      	; 0x2164 <strtok_r+0x3a>
    215e:	1e 92       	st	-X, r1
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	06 c0       	rjmp	.+12     	; 0x2170 <strtok_r+0x46>
    2164:	22 23       	and	r18, r18
    2166:	c1 f7       	brne	.-16     	; 0x2158 <strtok_r+0x2e>
    2168:	0d 90       	ld	r0, X+
    216a:	00 20       	and	r0, r0
    216c:	a1 f7       	brne	.-24     	; 0x2156 <strtok_r+0x2c>
    216e:	d0 01       	movw	r26, r0
    2170:	fa 01       	movw	r30, r20
    2172:	a1 93       	st	Z+, r26
    2174:	b0 83       	st	Z, r27
    2176:	08 95       	ret

00002178 <__mulhi_const_10>:
    2178:	7a e0       	ldi	r23, 0x0A	; 10
    217a:	97 9f       	mul	r25, r23
    217c:	90 2d       	mov	r25, r0
    217e:	87 9f       	mul	r24, r23
    2180:	80 2d       	mov	r24, r0
    2182:	91 0d       	add	r25, r1
    2184:	11 24       	eor	r1, r1
    2186:	08 95       	ret

00002188 <fgets>:
    2188:	cf 92       	push	r12
    218a:	df 92       	push	r13
    218c:	ef 92       	push	r14
    218e:	ff 92       	push	r15
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	8c 01       	movw	r16, r24
    219a:	6a 01       	movw	r12, r20
    219c:	fa 01       	movw	r30, r20
    219e:	83 81       	ldd	r24, Z+3	; 0x03
    21a0:	80 ff       	sbrs	r24, 0
    21a2:	1a c0       	rjmp	.+52     	; 0x21d8 <fgets+0x50>
    21a4:	16 16       	cp	r1, r22
    21a6:	17 06       	cpc	r1, r23
    21a8:	bc f4       	brge	.+46     	; 0x21d8 <fgets+0x50>
    21aa:	7b 01       	movw	r14, r22
    21ac:	e8 01       	movw	r28, r16
    21ae:	0e c0       	rjmp	.+28     	; 0x21cc <fgets+0x44>
    21b0:	c6 01       	movw	r24, r12
    21b2:	0e 94 b1 13 	call	0x2762	; 0x2762 <fgetc>
    21b6:	ff ef       	ldi	r31, 0xFF	; 255
    21b8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ba:	9f 07       	cpc	r25, r31
    21bc:	69 f0       	breq	.+26     	; 0x21d8 <fgets+0x50>
    21be:	89 93       	st	Y+, r24
    21c0:	08 94       	sec
    21c2:	e1 08       	sbc	r14, r1
    21c4:	f1 08       	sbc	r15, r1
    21c6:	8a 30       	cpi	r24, 0x0A	; 10
    21c8:	91 05       	cpc	r25, r1
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <fgets+0x4c>
    21cc:	21 e0       	ldi	r18, 0x01	; 1
    21ce:	e2 16       	cp	r14, r18
    21d0:	f1 04       	cpc	r15, r1
    21d2:	71 f7       	brne	.-36     	; 0x21b0 <fgets+0x28>
    21d4:	18 82       	st	Y, r1
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <fgets+0x54>
    21d8:	00 e0       	ldi	r16, 0x00	; 0
    21da:	10 e0       	ldi	r17, 0x00	; 0
    21dc:	c8 01       	movw	r24, r16
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	08 95       	ret

000021f0 <gets>:
    21f0:	0f 93       	push	r16
    21f2:	1f 93       	push	r17
    21f4:	cf 93       	push	r28
    21f6:	df 93       	push	r29
    21f8:	8c 01       	movw	r16, r24
    21fa:	e0 91 0e 06 	lds	r30, 0x060E
    21fe:	f0 91 0f 06 	lds	r31, 0x060F
    2202:	83 81       	ldd	r24, Z+3	; 0x03
    2204:	80 ff       	sbrs	r24, 0
    2206:	12 c0       	rjmp	.+36     	; 0x222c <__stack+0x2d>
    2208:	e8 01       	movw	r28, r16
    220a:	80 91 0e 06 	lds	r24, 0x060E
    220e:	90 91 0f 06 	lds	r25, 0x060F
    2212:	0e 94 b1 13 	call	0x2762	; 0x2762 <fgetc>
    2216:	2f ef       	ldi	r18, 0xFF	; 255
    2218:	8f 3f       	cpi	r24, 0xFF	; 255
    221a:	92 07       	cpc	r25, r18
    221c:	39 f0       	breq	.+14     	; 0x222c <__stack+0x2d>
    221e:	89 93       	st	Y+, r24
    2220:	8a 30       	cpi	r24, 0x0A	; 10
    2222:	91 05       	cpc	r25, r1
    2224:	91 f7       	brne	.-28     	; 0x220a <__stack+0xb>
    2226:	21 97       	sbiw	r28, 0x01	; 1
    2228:	18 82       	st	Y, r1
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <__stack+0x31>
    222c:	00 e0       	ldi	r16, 0x00	; 0
    222e:	10 e0       	ldi	r17, 0x00	; 0
    2230:	c8 01       	movw	r24, r16
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	08 95       	ret

0000223c <printf>:
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	fe 01       	movw	r30, r28
    2246:	36 96       	adiw	r30, 0x06	; 6
    2248:	61 91       	ld	r22, Z+
    224a:	71 91       	ld	r23, Z+
    224c:	80 91 10 06 	lds	r24, 0x0610
    2250:	90 91 11 06 	lds	r25, 0x0611
    2254:	af 01       	movw	r20, r30
    2256:	0e 94 94 11 	call	0x2328	; 0x2328 <vfprintf>
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <putchar>:
    2260:	60 91 10 06 	lds	r22, 0x0610
    2264:	70 91 11 06 	lds	r23, 0x0611
    2268:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    226c:	08 95       	ret

0000226e <puts>:
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	8c 01       	movw	r16, r24
    2278:	e0 91 10 06 	lds	r30, 0x0610
    227c:	f0 91 11 06 	lds	r31, 0x0611
    2280:	83 81       	ldd	r24, Z+3	; 0x03
    2282:	81 ff       	sbrs	r24, 1
    2284:	1a c0       	rjmp	.+52     	; 0x22ba <puts+0x4c>
    2286:	c0 e0       	ldi	r28, 0x00	; 0
    2288:	d0 e0       	ldi	r29, 0x00	; 0
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <puts+0x28>
    228c:	19 95       	eicall
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	11 f0       	breq	.+4      	; 0x2296 <puts+0x28>
    2292:	cf ef       	ldi	r28, 0xFF	; 255
    2294:	df ef       	ldi	r29, 0xFF	; 255
    2296:	f8 01       	movw	r30, r16
    2298:	81 91       	ld	r24, Z+
    229a:	8f 01       	movw	r16, r30
    229c:	60 91 10 06 	lds	r22, 0x0610
    22a0:	70 91 11 06 	lds	r23, 0x0611
    22a4:	db 01       	movw	r26, r22
    22a6:	18 96       	adiw	r26, 0x08	; 8
    22a8:	ed 91       	ld	r30, X+
    22aa:	fc 91       	ld	r31, X
    22ac:	19 97       	sbiw	r26, 0x09	; 9
    22ae:	88 23       	and	r24, r24
    22b0:	69 f7       	brne	.-38     	; 0x228c <puts+0x1e>
    22b2:	8a e0       	ldi	r24, 0x0A	; 10
    22b4:	19 95       	eicall
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	11 f0       	breq	.+4      	; 0x22be <puts+0x50>
    22ba:	cf ef       	ldi	r28, 0xFF	; 255
    22bc:	df ef       	ldi	r29, 0xFF	; 255
    22be:	ce 01       	movw	r24, r28
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <sprintf>:
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	2e 97       	sbiw	r28, 0x0e	; 14
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	0e 89       	ldd	r16, Y+22	; 0x16
    22e4:	1f 89       	ldd	r17, Y+23	; 0x17
    22e6:	86 e0       	ldi	r24, 0x06	; 6
    22e8:	8c 83       	std	Y+4, r24	; 0x04
    22ea:	1a 83       	std	Y+2, r17	; 0x02
    22ec:	09 83       	std	Y+1, r16	; 0x01
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	9f e7       	ldi	r25, 0x7F	; 127
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	ae 01       	movw	r20, r28
    22f8:	46 5e       	subi	r20, 0xE6	; 230
    22fa:	5f 4f       	sbci	r21, 0xFF	; 255
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	68 8d       	ldd	r22, Y+24	; 0x18
    2302:	79 8d       	ldd	r23, Y+25	; 0x19
    2304:	0e 94 94 11 	call	0x2328	; 0x2328 <vfprintf>
    2308:	ef 81       	ldd	r30, Y+7	; 0x07
    230a:	f8 85       	ldd	r31, Y+8	; 0x08
    230c:	e0 0f       	add	r30, r16
    230e:	f1 1f       	adc	r31, r17
    2310:	10 82       	st	Z, r1
    2312:	2e 96       	adiw	r28, 0x0e	; 14
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	08 95       	ret

00002328 <vfprintf>:
    2328:	2f 92       	push	r2
    232a:	3f 92       	push	r3
    232c:	4f 92       	push	r4
    232e:	5f 92       	push	r5
    2330:	6f 92       	push	r6
    2332:	7f 92       	push	r7
    2334:	8f 92       	push	r8
    2336:	9f 92       	push	r9
    2338:	af 92       	push	r10
    233a:	bf 92       	push	r11
    233c:	cf 92       	push	r12
    233e:	df 92       	push	r13
    2340:	ef 92       	push	r14
    2342:	ff 92       	push	r15
    2344:	0f 93       	push	r16
    2346:	1f 93       	push	r17
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	2d 97       	sbiw	r28, 0x0d	; 13
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	3c 01       	movw	r6, r24
    235e:	7d 87       	std	Y+13, r23	; 0x0d
    2360:	6c 87       	std	Y+12, r22	; 0x0c
    2362:	5a 01       	movw	r10, r20
    2364:	fc 01       	movw	r30, r24
    2366:	17 82       	std	Z+7, r1	; 0x07
    2368:	16 82       	std	Z+6, r1	; 0x06
    236a:	83 81       	ldd	r24, Z+3	; 0x03
    236c:	81 ff       	sbrs	r24, 1
    236e:	c8 c1       	rjmp	.+912    	; 0x2700 <vfprintf+0x3d8>
    2370:	2e 01       	movw	r4, r28
    2372:	08 94       	sec
    2374:	41 1c       	adc	r4, r1
    2376:	51 1c       	adc	r5, r1
    2378:	f3 01       	movw	r30, r6
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	ec 85       	ldd	r30, Y+12	; 0x0c
    237e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2380:	93 fd       	sbrc	r25, 3
    2382:	85 91       	lpm	r24, Z+
    2384:	93 ff       	sbrs	r25, 3
    2386:	81 91       	ld	r24, Z+
    2388:	fd 87       	std	Y+13, r31	; 0x0d
    238a:	ec 87       	std	Y+12, r30	; 0x0c
    238c:	88 23       	and	r24, r24
    238e:	09 f4       	brne	.+2      	; 0x2392 <vfprintf+0x6a>
    2390:	b3 c1       	rjmp	.+870    	; 0x26f8 <vfprintf+0x3d0>
    2392:	85 32       	cpi	r24, 0x25	; 37
    2394:	41 f4       	brne	.+16     	; 0x23a6 <vfprintf+0x7e>
    2396:	93 fd       	sbrc	r25, 3
    2398:	85 91       	lpm	r24, Z+
    239a:	93 ff       	sbrs	r25, 3
    239c:	81 91       	ld	r24, Z+
    239e:	fd 87       	std	Y+13, r31	; 0x0d
    23a0:	ec 87       	std	Y+12, r30	; 0x0c
    23a2:	85 32       	cpi	r24, 0x25	; 37
    23a4:	29 f4       	brne	.+10     	; 0x23b0 <vfprintf+0x88>
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	b3 01       	movw	r22, r6
    23aa:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    23ae:	e4 cf       	rjmp	.-56     	; 0x2378 <vfprintf+0x50>
    23b0:	ff 24       	eor	r15, r15
    23b2:	ee 24       	eor	r14, r14
    23b4:	10 e0       	ldi	r17, 0x00	; 0
    23b6:	10 32       	cpi	r17, 0x20	; 32
    23b8:	b0 f4       	brcc	.+44     	; 0x23e6 <vfprintf+0xbe>
    23ba:	8b 32       	cpi	r24, 0x2B	; 43
    23bc:	69 f0       	breq	.+26     	; 0x23d8 <vfprintf+0xb0>
    23be:	8c 32       	cpi	r24, 0x2C	; 44
    23c0:	28 f4       	brcc	.+10     	; 0x23cc <vfprintf+0xa4>
    23c2:	80 32       	cpi	r24, 0x20	; 32
    23c4:	51 f0       	breq	.+20     	; 0x23da <vfprintf+0xb2>
    23c6:	83 32       	cpi	r24, 0x23	; 35
    23c8:	71 f4       	brne	.+28     	; 0x23e6 <vfprintf+0xbe>
    23ca:	0b c0       	rjmp	.+22     	; 0x23e2 <vfprintf+0xba>
    23cc:	8d 32       	cpi	r24, 0x2D	; 45
    23ce:	39 f0       	breq	.+14     	; 0x23de <vfprintf+0xb6>
    23d0:	80 33       	cpi	r24, 0x30	; 48
    23d2:	49 f4       	brne	.+18     	; 0x23e6 <vfprintf+0xbe>
    23d4:	11 60       	ori	r17, 0x01	; 1
    23d6:	2c c0       	rjmp	.+88     	; 0x2430 <vfprintf+0x108>
    23d8:	12 60       	ori	r17, 0x02	; 2
    23da:	14 60       	ori	r17, 0x04	; 4
    23dc:	29 c0       	rjmp	.+82     	; 0x2430 <vfprintf+0x108>
    23de:	18 60       	ori	r17, 0x08	; 8
    23e0:	27 c0       	rjmp	.+78     	; 0x2430 <vfprintf+0x108>
    23e2:	10 61       	ori	r17, 0x10	; 16
    23e4:	25 c0       	rjmp	.+74     	; 0x2430 <vfprintf+0x108>
    23e6:	17 fd       	sbrc	r17, 7
    23e8:	2e c0       	rjmp	.+92     	; 0x2446 <vfprintf+0x11e>
    23ea:	28 2f       	mov	r18, r24
    23ec:	20 53       	subi	r18, 0x30	; 48
    23ee:	2a 30       	cpi	r18, 0x0A	; 10
    23f0:	98 f4       	brcc	.+38     	; 0x2418 <vfprintf+0xf0>
    23f2:	16 ff       	sbrs	r17, 6
    23f4:	08 c0       	rjmp	.+16     	; 0x2406 <vfprintf+0xde>
    23f6:	8f 2d       	mov	r24, r15
    23f8:	88 0f       	add	r24, r24
    23fa:	f8 2e       	mov	r15, r24
    23fc:	ff 0c       	add	r15, r15
    23fe:	ff 0c       	add	r15, r15
    2400:	f8 0e       	add	r15, r24
    2402:	f2 0e       	add	r15, r18
    2404:	15 c0       	rjmp	.+42     	; 0x2430 <vfprintf+0x108>
    2406:	8e 2d       	mov	r24, r14
    2408:	88 0f       	add	r24, r24
    240a:	e8 2e       	mov	r14, r24
    240c:	ee 0c       	add	r14, r14
    240e:	ee 0c       	add	r14, r14
    2410:	e8 0e       	add	r14, r24
    2412:	e2 0e       	add	r14, r18
    2414:	10 62       	ori	r17, 0x20	; 32
    2416:	0c c0       	rjmp	.+24     	; 0x2430 <vfprintf+0x108>
    2418:	8e 32       	cpi	r24, 0x2E	; 46
    241a:	21 f4       	brne	.+8      	; 0x2424 <vfprintf+0xfc>
    241c:	16 fd       	sbrc	r17, 6
    241e:	6c c1       	rjmp	.+728    	; 0x26f8 <vfprintf+0x3d0>
    2420:	10 64       	ori	r17, 0x40	; 64
    2422:	06 c0       	rjmp	.+12     	; 0x2430 <vfprintf+0x108>
    2424:	8c 36       	cpi	r24, 0x6C	; 108
    2426:	11 f4       	brne	.+4      	; 0x242c <vfprintf+0x104>
    2428:	10 68       	ori	r17, 0x80	; 128
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <vfprintf+0x108>
    242c:	88 36       	cpi	r24, 0x68	; 104
    242e:	59 f4       	brne	.+22     	; 0x2446 <vfprintf+0x11e>
    2430:	ec 85       	ldd	r30, Y+12	; 0x0c
    2432:	fd 85       	ldd	r31, Y+13	; 0x0d
    2434:	93 fd       	sbrc	r25, 3
    2436:	85 91       	lpm	r24, Z+
    2438:	93 ff       	sbrs	r25, 3
    243a:	81 91       	ld	r24, Z+
    243c:	fd 87       	std	Y+13, r31	; 0x0d
    243e:	ec 87       	std	Y+12, r30	; 0x0c
    2440:	88 23       	and	r24, r24
    2442:	09 f0       	breq	.+2      	; 0x2446 <vfprintf+0x11e>
    2444:	b8 cf       	rjmp	.-144    	; 0x23b6 <vfprintf+0x8e>
    2446:	98 2f       	mov	r25, r24
    2448:	95 54       	subi	r25, 0x45	; 69
    244a:	93 30       	cpi	r25, 0x03	; 3
    244c:	18 f0       	brcs	.+6      	; 0x2454 <vfprintf+0x12c>
    244e:	90 52       	subi	r25, 0x20	; 32
    2450:	93 30       	cpi	r25, 0x03	; 3
    2452:	38 f4       	brcc	.+14     	; 0x2462 <vfprintf+0x13a>
    2454:	24 e0       	ldi	r18, 0x04	; 4
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	a2 0e       	add	r10, r18
    245a:	b3 1e       	adc	r11, r19
    245c:	3f e3       	ldi	r19, 0x3F	; 63
    245e:	39 83       	std	Y+1, r19	; 0x01
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <vfprintf+0x158>
    2462:	83 36       	cpi	r24, 0x63	; 99
    2464:	31 f0       	breq	.+12     	; 0x2472 <vfprintf+0x14a>
    2466:	83 37       	cpi	r24, 0x73	; 115
    2468:	81 f0       	breq	.+32     	; 0x248a <vfprintf+0x162>
    246a:	83 35       	cpi	r24, 0x53	; 83
    246c:	09 f0       	breq	.+2      	; 0x2470 <vfprintf+0x148>
    246e:	5a c0       	rjmp	.+180    	; 0x2524 <vfprintf+0x1fc>
    2470:	22 c0       	rjmp	.+68     	; 0x24b6 <vfprintf+0x18e>
    2472:	f5 01       	movw	r30, r10
    2474:	80 81       	ld	r24, Z
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	22 e0       	ldi	r18, 0x02	; 2
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	a2 0e       	add	r10, r18
    247e:	b3 1e       	adc	r11, r19
    2480:	21 e0       	ldi	r18, 0x01	; 1
    2482:	c2 2e       	mov	r12, r18
    2484:	d1 2c       	mov	r13, r1
    2486:	42 01       	movw	r8, r4
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <vfprintf+0x18a>
    248a:	92 e0       	ldi	r25, 0x02	; 2
    248c:	29 2e       	mov	r2, r25
    248e:	31 2c       	mov	r3, r1
    2490:	2a 0c       	add	r2, r10
    2492:	3b 1c       	adc	r3, r11
    2494:	f5 01       	movw	r30, r10
    2496:	80 80       	ld	r8, Z
    2498:	91 80       	ldd	r9, Z+1	; 0x01
    249a:	16 ff       	sbrs	r17, 6
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <vfprintf+0x17c>
    249e:	6f 2d       	mov	r22, r15
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	02 c0       	rjmp	.+4      	; 0x24a8 <vfprintf+0x180>
    24a4:	6f ef       	ldi	r22, 0xFF	; 255
    24a6:	7f ef       	ldi	r23, 0xFF	; 255
    24a8:	c4 01       	movw	r24, r8
    24aa:	0e 94 a6 13 	call	0x274c	; 0x274c <strnlen>
    24ae:	6c 01       	movw	r12, r24
    24b0:	51 01       	movw	r10, r2
    24b2:	1f 77       	andi	r17, 0x7F	; 127
    24b4:	15 c0       	rjmp	.+42     	; 0x24e0 <vfprintf+0x1b8>
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	28 2e       	mov	r2, r24
    24ba:	31 2c       	mov	r3, r1
    24bc:	2a 0c       	add	r2, r10
    24be:	3b 1c       	adc	r3, r11
    24c0:	f5 01       	movw	r30, r10
    24c2:	80 80       	ld	r8, Z
    24c4:	91 80       	ldd	r9, Z+1	; 0x01
    24c6:	16 ff       	sbrs	r17, 6
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <vfprintf+0x1a8>
    24ca:	6f 2d       	mov	r22, r15
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <vfprintf+0x1ac>
    24d0:	6f ef       	ldi	r22, 0xFF	; 255
    24d2:	7f ef       	ldi	r23, 0xFF	; 255
    24d4:	c4 01       	movw	r24, r8
    24d6:	0e 94 9b 13 	call	0x2736	; 0x2736 <strnlen_P>
    24da:	6c 01       	movw	r12, r24
    24dc:	10 68       	ori	r17, 0x80	; 128
    24de:	51 01       	movw	r10, r2
    24e0:	13 fd       	sbrc	r17, 3
    24e2:	1c c0       	rjmp	.+56     	; 0x251c <vfprintf+0x1f4>
    24e4:	06 c0       	rjmp	.+12     	; 0x24f2 <vfprintf+0x1ca>
    24e6:	80 e2       	ldi	r24, 0x20	; 32
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	b3 01       	movw	r22, r6
    24ec:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    24f0:	ea 94       	dec	r14
    24f2:	8e 2d       	mov	r24, r14
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	c8 16       	cp	r12, r24
    24f8:	d9 06       	cpc	r13, r25
    24fa:	a8 f3       	brcs	.-22     	; 0x24e6 <vfprintf+0x1be>
    24fc:	0f c0       	rjmp	.+30     	; 0x251c <vfprintf+0x1f4>
    24fe:	f4 01       	movw	r30, r8
    2500:	17 fd       	sbrc	r17, 7
    2502:	85 91       	lpm	r24, Z+
    2504:	17 ff       	sbrs	r17, 7
    2506:	81 91       	ld	r24, Z+
    2508:	4f 01       	movw	r8, r30
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	b3 01       	movw	r22, r6
    250e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2512:	e1 10       	cpse	r14, r1
    2514:	ea 94       	dec	r14
    2516:	08 94       	sec
    2518:	c1 08       	sbc	r12, r1
    251a:	d1 08       	sbc	r13, r1
    251c:	c1 14       	cp	r12, r1
    251e:	d1 04       	cpc	r13, r1
    2520:	71 f7       	brne	.-36     	; 0x24fe <vfprintf+0x1d6>
    2522:	e7 c0       	rjmp	.+462    	; 0x26f2 <vfprintf+0x3ca>
    2524:	84 36       	cpi	r24, 0x64	; 100
    2526:	11 f0       	breq	.+4      	; 0x252c <vfprintf+0x204>
    2528:	89 36       	cpi	r24, 0x69	; 105
    252a:	51 f5       	brne	.+84     	; 0x2580 <vfprintf+0x258>
    252c:	f5 01       	movw	r30, r10
    252e:	17 ff       	sbrs	r17, 7
    2530:	07 c0       	rjmp	.+14     	; 0x2540 <vfprintf+0x218>
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	a2 81       	ldd	r26, Z+2	; 0x02
    2538:	b3 81       	ldd	r27, Z+3	; 0x03
    253a:	24 e0       	ldi	r18, 0x04	; 4
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	08 c0       	rjmp	.+16     	; 0x2550 <vfprintf+0x228>
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	aa 27       	eor	r26, r26
    2546:	97 fd       	sbrc	r25, 7
    2548:	a0 95       	com	r26
    254a:	ba 2f       	mov	r27, r26
    254c:	22 e0       	ldi	r18, 0x02	; 2
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	a2 0e       	add	r10, r18
    2552:	b3 1e       	adc	r11, r19
    2554:	01 2f       	mov	r16, r17
    2556:	0f 76       	andi	r16, 0x6F	; 111
    2558:	b7 ff       	sbrs	r27, 7
    255a:	08 c0       	rjmp	.+16     	; 0x256c <vfprintf+0x244>
    255c:	b0 95       	com	r27
    255e:	a0 95       	com	r26
    2560:	90 95       	com	r25
    2562:	81 95       	neg	r24
    2564:	9f 4f       	sbci	r25, 0xFF	; 255
    2566:	af 4f       	sbci	r26, 0xFF	; 255
    2568:	bf 4f       	sbci	r27, 0xFF	; 255
    256a:	00 68       	ori	r16, 0x80	; 128
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	a2 01       	movw	r20, r4
    2572:	2a e0       	ldi	r18, 0x0A	; 10
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	0e 94 1d 14 	call	0x283a	; 0x283a <__ultoa_invert>
    257a:	d8 2e       	mov	r13, r24
    257c:	d4 18       	sub	r13, r4
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <vfprintf+0x2d6>
    2580:	85 37       	cpi	r24, 0x75	; 117
    2582:	21 f4       	brne	.+8      	; 0x258c <vfprintf+0x264>
    2584:	1f 7e       	andi	r17, 0xEF	; 239
    2586:	2a e0       	ldi	r18, 0x0A	; 10
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	20 c0       	rjmp	.+64     	; 0x25cc <vfprintf+0x2a4>
    258c:	19 7f       	andi	r17, 0xF9	; 249
    258e:	8f 36       	cpi	r24, 0x6F	; 111
    2590:	a9 f0       	breq	.+42     	; 0x25bc <vfprintf+0x294>
    2592:	80 37       	cpi	r24, 0x70	; 112
    2594:	20 f4       	brcc	.+8      	; 0x259e <vfprintf+0x276>
    2596:	88 35       	cpi	r24, 0x58	; 88
    2598:	09 f0       	breq	.+2      	; 0x259c <vfprintf+0x274>
    259a:	ae c0       	rjmp	.+348    	; 0x26f8 <vfprintf+0x3d0>
    259c:	0b c0       	rjmp	.+22     	; 0x25b4 <vfprintf+0x28c>
    259e:	80 37       	cpi	r24, 0x70	; 112
    25a0:	21 f0       	breq	.+8      	; 0x25aa <vfprintf+0x282>
    25a2:	88 37       	cpi	r24, 0x78	; 120
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <vfprintf+0x280>
    25a6:	a8 c0       	rjmp	.+336    	; 0x26f8 <vfprintf+0x3d0>
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <vfprintf+0x284>
    25aa:	10 61       	ori	r17, 0x10	; 16
    25ac:	14 ff       	sbrs	r17, 4
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <vfprintf+0x29a>
    25b0:	14 60       	ori	r17, 0x04	; 4
    25b2:	07 c0       	rjmp	.+14     	; 0x25c2 <vfprintf+0x29a>
    25b4:	14 ff       	sbrs	r17, 4
    25b6:	08 c0       	rjmp	.+16     	; 0x25c8 <vfprintf+0x2a0>
    25b8:	16 60       	ori	r17, 0x06	; 6
    25ba:	06 c0       	rjmp	.+12     	; 0x25c8 <vfprintf+0x2a0>
    25bc:	28 e0       	ldi	r18, 0x08	; 8
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <vfprintf+0x2a4>
    25c2:	20 e1       	ldi	r18, 0x10	; 16
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0x2a4>
    25c8:	20 e1       	ldi	r18, 0x10	; 16
    25ca:	32 e0       	ldi	r19, 0x02	; 2
    25cc:	f5 01       	movw	r30, r10
    25ce:	17 ff       	sbrs	r17, 7
    25d0:	07 c0       	rjmp	.+14     	; 0x25e0 <vfprintf+0x2b8>
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	44 e0       	ldi	r20, 0x04	; 4
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	06 c0       	rjmp	.+12     	; 0x25ec <vfprintf+0x2c4>
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	42 e0       	ldi	r20, 0x02	; 2
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	a4 0e       	add	r10, r20
    25ee:	b5 1e       	adc	r11, r21
    25f0:	a2 01       	movw	r20, r4
    25f2:	0e 94 1d 14 	call	0x283a	; 0x283a <__ultoa_invert>
    25f6:	d8 2e       	mov	r13, r24
    25f8:	d4 18       	sub	r13, r4
    25fa:	01 2f       	mov	r16, r17
    25fc:	0f 77       	andi	r16, 0x7F	; 127
    25fe:	06 ff       	sbrs	r16, 6
    2600:	09 c0       	rjmp	.+18     	; 0x2614 <vfprintf+0x2ec>
    2602:	0e 7f       	andi	r16, 0xFE	; 254
    2604:	df 14       	cp	r13, r15
    2606:	30 f4       	brcc	.+12     	; 0x2614 <vfprintf+0x2ec>
    2608:	04 ff       	sbrs	r16, 4
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <vfprintf+0x2f0>
    260c:	02 fd       	sbrc	r16, 2
    260e:	04 c0       	rjmp	.+8      	; 0x2618 <vfprintf+0x2f0>
    2610:	0f 7e       	andi	r16, 0xEF	; 239
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <vfprintf+0x2f0>
    2614:	1d 2d       	mov	r17, r13
    2616:	01 c0       	rjmp	.+2      	; 0x261a <vfprintf+0x2f2>
    2618:	1f 2d       	mov	r17, r15
    261a:	80 2f       	mov	r24, r16
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	04 ff       	sbrs	r16, 4
    2620:	0c c0       	rjmp	.+24     	; 0x263a <vfprintf+0x312>
    2622:	fe 01       	movw	r30, r28
    2624:	ed 0d       	add	r30, r13
    2626:	f1 1d       	adc	r31, r1
    2628:	20 81       	ld	r18, Z
    262a:	20 33       	cpi	r18, 0x30	; 48
    262c:	11 f4       	brne	.+4      	; 0x2632 <vfprintf+0x30a>
    262e:	09 7e       	andi	r16, 0xE9	; 233
    2630:	09 c0       	rjmp	.+18     	; 0x2644 <vfprintf+0x31c>
    2632:	02 ff       	sbrs	r16, 2
    2634:	06 c0       	rjmp	.+12     	; 0x2642 <vfprintf+0x31a>
    2636:	1e 5f       	subi	r17, 0xFE	; 254
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <vfprintf+0x31c>
    263a:	86 78       	andi	r24, 0x86	; 134
    263c:	90 70       	andi	r25, 0x00	; 0
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	09 f0       	breq	.+2      	; 0x2644 <vfprintf+0x31c>
    2642:	1f 5f       	subi	r17, 0xFF	; 255
    2644:	80 2e       	mov	r8, r16
    2646:	99 24       	eor	r9, r9
    2648:	03 fd       	sbrc	r16, 3
    264a:	12 c0       	rjmp	.+36     	; 0x2670 <vfprintf+0x348>
    264c:	00 ff       	sbrs	r16, 0
    264e:	0d c0       	rjmp	.+26     	; 0x266a <vfprintf+0x342>
    2650:	fd 2c       	mov	r15, r13
    2652:	1e 15       	cp	r17, r14
    2654:	50 f4       	brcc	.+20     	; 0x266a <vfprintf+0x342>
    2656:	fe 0c       	add	r15, r14
    2658:	f1 1a       	sub	r15, r17
    265a:	1e 2d       	mov	r17, r14
    265c:	06 c0       	rjmp	.+12     	; 0x266a <vfprintf+0x342>
    265e:	80 e2       	ldi	r24, 0x20	; 32
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	b3 01       	movw	r22, r6
    2664:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2668:	1f 5f       	subi	r17, 0xFF	; 255
    266a:	1e 15       	cp	r17, r14
    266c:	c0 f3       	brcs	.-16     	; 0x265e <vfprintf+0x336>
    266e:	04 c0       	rjmp	.+8      	; 0x2678 <vfprintf+0x350>
    2670:	1e 15       	cp	r17, r14
    2672:	10 f4       	brcc	.+4      	; 0x2678 <vfprintf+0x350>
    2674:	e1 1a       	sub	r14, r17
    2676:	01 c0       	rjmp	.+2      	; 0x267a <vfprintf+0x352>
    2678:	ee 24       	eor	r14, r14
    267a:	84 fe       	sbrs	r8, 4
    267c:	0f c0       	rjmp	.+30     	; 0x269c <vfprintf+0x374>
    267e:	80 e3       	ldi	r24, 0x30	; 48
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	b3 01       	movw	r22, r6
    2684:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    2688:	82 fe       	sbrs	r8, 2
    268a:	1f c0       	rjmp	.+62     	; 0x26ca <vfprintf+0x3a2>
    268c:	81 fe       	sbrs	r8, 1
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <vfprintf+0x36e>
    2690:	88 e5       	ldi	r24, 0x58	; 88
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	10 c0       	rjmp	.+32     	; 0x26b6 <vfprintf+0x38e>
    2696:	88 e7       	ldi	r24, 0x78	; 120
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	0d c0       	rjmp	.+26     	; 0x26b6 <vfprintf+0x38e>
    269c:	c4 01       	movw	r24, r8
    269e:	86 78       	andi	r24, 0x86	; 134
    26a0:	90 70       	andi	r25, 0x00	; 0
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	91 f0       	breq	.+36     	; 0x26ca <vfprintf+0x3a2>
    26a6:	81 fc       	sbrc	r8, 1
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <vfprintf+0x386>
    26aa:	80 e2       	ldi	r24, 0x20	; 32
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <vfprintf+0x388>
    26ae:	8b e2       	ldi	r24, 0x2B	; 43
    26b0:	07 fd       	sbrc	r16, 7
    26b2:	8d e2       	ldi	r24, 0x2D	; 45
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	b3 01       	movw	r22, r6
    26b8:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    26bc:	06 c0       	rjmp	.+12     	; 0x26ca <vfprintf+0x3a2>
    26be:	80 e3       	ldi	r24, 0x30	; 48
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	b3 01       	movw	r22, r6
    26c4:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    26c8:	fa 94       	dec	r15
    26ca:	df 14       	cp	r13, r15
    26cc:	c0 f3       	brcs	.-16     	; 0x26be <vfprintf+0x396>
    26ce:	da 94       	dec	r13
    26d0:	f2 01       	movw	r30, r4
    26d2:	ed 0d       	add	r30, r13
    26d4:	f1 1d       	adc	r31, r1
    26d6:	80 81       	ld	r24, Z
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	b3 01       	movw	r22, r6
    26dc:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    26e0:	dd 20       	and	r13, r13
    26e2:	a9 f7       	brne	.-22     	; 0x26ce <vfprintf+0x3a6>
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <vfprintf+0x3ca>
    26e6:	80 e2       	ldi	r24, 0x20	; 32
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	b3 01       	movw	r22, r6
    26ec:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <fputc>
    26f0:	ea 94       	dec	r14
    26f2:	ee 20       	and	r14, r14
    26f4:	c1 f7       	brne	.-16     	; 0x26e6 <vfprintf+0x3be>
    26f6:	40 ce       	rjmp	.-896    	; 0x2378 <vfprintf+0x50>
    26f8:	f3 01       	movw	r30, r6
    26fa:	86 81       	ldd	r24, Z+6	; 0x06
    26fc:	97 81       	ldd	r25, Z+7	; 0x07
    26fe:	02 c0       	rjmp	.+4      	; 0x2704 <vfprintf+0x3dc>
    2700:	8f ef       	ldi	r24, 0xFF	; 255
    2702:	9f ef       	ldi	r25, 0xFF	; 255
    2704:	2d 96       	adiw	r28, 0x0d	; 13
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	ff 90       	pop	r15
    271a:	ef 90       	pop	r14
    271c:	df 90       	pop	r13
    271e:	cf 90       	pop	r12
    2720:	bf 90       	pop	r11
    2722:	af 90       	pop	r10
    2724:	9f 90       	pop	r9
    2726:	8f 90       	pop	r8
    2728:	7f 90       	pop	r7
    272a:	6f 90       	pop	r6
    272c:	5f 90       	pop	r5
    272e:	4f 90       	pop	r4
    2730:	3f 90       	pop	r3
    2732:	2f 90       	pop	r2
    2734:	08 95       	ret

00002736 <strnlen_P>:
    2736:	fc 01       	movw	r30, r24
    2738:	05 90       	lpm	r0, Z+
    273a:	61 50       	subi	r22, 0x01	; 1
    273c:	70 40       	sbci	r23, 0x00	; 0
    273e:	01 10       	cpse	r0, r1
    2740:	d8 f7       	brcc	.-10     	; 0x2738 <strnlen_P+0x2>
    2742:	80 95       	com	r24
    2744:	90 95       	com	r25
    2746:	8e 0f       	add	r24, r30
    2748:	9f 1f       	adc	r25, r31
    274a:	08 95       	ret

0000274c <strnlen>:
    274c:	fc 01       	movw	r30, r24
    274e:	61 50       	subi	r22, 0x01	; 1
    2750:	70 40       	sbci	r23, 0x00	; 0
    2752:	01 90       	ld	r0, Z+
    2754:	01 10       	cpse	r0, r1
    2756:	d8 f7       	brcc	.-10     	; 0x274e <strnlen+0x2>
    2758:	80 95       	com	r24
    275a:	90 95       	com	r25
    275c:	8e 0f       	add	r24, r30
    275e:	9f 1f       	adc	r25, r31
    2760:	08 95       	ret

00002762 <fgetc>:
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	ec 01       	movw	r28, r24
    2768:	2b 81       	ldd	r18, Y+3	; 0x03
    276a:	20 ff       	sbrs	r18, 0
    276c:	35 c0       	rjmp	.+106    	; 0x27d8 <fgetc+0x76>
    276e:	26 ff       	sbrs	r18, 6
    2770:	09 c0       	rjmp	.+18     	; 0x2784 <fgetc+0x22>
    2772:	2f 7b       	andi	r18, 0xBF	; 191
    2774:	2b 83       	std	Y+3, r18	; 0x03
    2776:	8e 81       	ldd	r24, Y+6	; 0x06
    2778:	9f 81       	ldd	r25, Y+7	; 0x07
    277a:	01 96       	adiw	r24, 0x01	; 1
    277c:	9f 83       	std	Y+7, r25	; 0x07
    277e:	8e 83       	std	Y+6, r24	; 0x06
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	28 c0       	rjmp	.+80     	; 0x27d4 <fgetc+0x72>
    2784:	22 ff       	sbrs	r18, 2
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <fgetc+0x44>
    2788:	e8 81       	ld	r30, Y
    278a:	f9 81       	ldd	r31, Y+1	; 0x01
    278c:	80 81       	ld	r24, Z
    278e:	99 27       	eor	r25, r25
    2790:	87 fd       	sbrc	r24, 7
    2792:	90 95       	com	r25
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	19 f4       	brne	.+6      	; 0x279e <fgetc+0x3c>
    2798:	20 62       	ori	r18, 0x20	; 32
    279a:	2b 83       	std	Y+3, r18	; 0x03
    279c:	1d c0       	rjmp	.+58     	; 0x27d8 <fgetc+0x76>
    279e:	31 96       	adiw	r30, 0x01	; 1
    27a0:	f9 83       	std	Y+1, r31	; 0x01
    27a2:	e8 83       	st	Y, r30
    27a4:	11 c0       	rjmp	.+34     	; 0x27c8 <fgetc+0x66>
    27a6:	ea 85       	ldd	r30, Y+10	; 0x0a
    27a8:	fb 85       	ldd	r31, Y+11	; 0x0b
    27aa:	ce 01       	movw	r24, r28
    27ac:	19 95       	eicall
    27ae:	97 ff       	sbrs	r25, 7
    27b0:	0b c0       	rjmp	.+22     	; 0x27c8 <fgetc+0x66>
    27b2:	2b 81       	ldd	r18, Y+3	; 0x03
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	8f 3f       	cpi	r24, 0xFF	; 255
    27b8:	93 07       	cpc	r25, r19
    27ba:	11 f4       	brne	.+4      	; 0x27c0 <fgetc+0x5e>
    27bc:	80 e1       	ldi	r24, 0x10	; 16
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <fgetc+0x60>
    27c0:	80 e2       	ldi	r24, 0x20	; 32
    27c2:	82 2b       	or	r24, r18
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	08 c0       	rjmp	.+16     	; 0x27d8 <fgetc+0x76>
    27c8:	2e 81       	ldd	r18, Y+6	; 0x06
    27ca:	3f 81       	ldd	r19, Y+7	; 0x07
    27cc:	2f 5f       	subi	r18, 0xFF	; 255
    27ce:	3f 4f       	sbci	r19, 0xFF	; 255
    27d0:	3f 83       	std	Y+7, r19	; 0x07
    27d2:	2e 83       	std	Y+6, r18	; 0x06
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <fgetc+0x7a>
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	9f ef       	ldi	r25, 0xFF	; 255
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	08 95       	ret

000027e2 <fputc>:
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	8c 01       	movw	r16, r24
    27ec:	eb 01       	movw	r28, r22
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	81 ff       	sbrs	r24, 1
    27f2:	1b c0       	rjmp	.+54     	; 0x282a <fputc+0x48>
    27f4:	82 ff       	sbrs	r24, 2
    27f6:	0d c0       	rjmp	.+26     	; 0x2812 <fputc+0x30>
    27f8:	2e 81       	ldd	r18, Y+6	; 0x06
    27fa:	3f 81       	ldd	r19, Y+7	; 0x07
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	28 17       	cp	r18, r24
    2802:	39 07       	cpc	r19, r25
    2804:	64 f4       	brge	.+24     	; 0x281e <fputc+0x3c>
    2806:	e8 81       	ld	r30, Y
    2808:	f9 81       	ldd	r31, Y+1	; 0x01
    280a:	01 93       	st	Z+, r16
    280c:	f9 83       	std	Y+1, r31	; 0x01
    280e:	e8 83       	st	Y, r30
    2810:	06 c0       	rjmp	.+12     	; 0x281e <fputc+0x3c>
    2812:	e8 85       	ldd	r30, Y+8	; 0x08
    2814:	f9 85       	ldd	r31, Y+9	; 0x09
    2816:	80 2f       	mov	r24, r16
    2818:	19 95       	eicall
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	31 f4       	brne	.+12     	; 0x282a <fputc+0x48>
    281e:	8e 81       	ldd	r24, Y+6	; 0x06
    2820:	9f 81       	ldd	r25, Y+7	; 0x07
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	9f 83       	std	Y+7, r25	; 0x07
    2826:	8e 83       	std	Y+6, r24	; 0x06
    2828:	02 c0       	rjmp	.+4      	; 0x282e <fputc+0x4c>
    282a:	0f ef       	ldi	r16, 0xFF	; 255
    282c:	1f ef       	ldi	r17, 0xFF	; 255
    282e:	c8 01       	movw	r24, r16
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret

0000283a <__ultoa_invert>:
    283a:	fa 01       	movw	r30, r20
    283c:	aa 27       	eor	r26, r26
    283e:	28 30       	cpi	r18, 0x08	; 8
    2840:	51 f1       	breq	.+84     	; 0x2896 <__ultoa_invert+0x5c>
    2842:	20 31       	cpi	r18, 0x10	; 16
    2844:	81 f1       	breq	.+96     	; 0x28a6 <__ultoa_invert+0x6c>
    2846:	e8 94       	clt
    2848:	6f 93       	push	r22
    284a:	6e 7f       	andi	r22, 0xFE	; 254
    284c:	6e 5f       	subi	r22, 0xFE	; 254
    284e:	7f 4f       	sbci	r23, 0xFF	; 255
    2850:	8f 4f       	sbci	r24, 0xFF	; 255
    2852:	9f 4f       	sbci	r25, 0xFF	; 255
    2854:	af 4f       	sbci	r26, 0xFF	; 255
    2856:	b1 e0       	ldi	r27, 0x01	; 1
    2858:	3e d0       	rcall	.+124    	; 0x28d6 <__ultoa_invert+0x9c>
    285a:	b4 e0       	ldi	r27, 0x04	; 4
    285c:	3c d0       	rcall	.+120    	; 0x28d6 <__ultoa_invert+0x9c>
    285e:	67 0f       	add	r22, r23
    2860:	78 1f       	adc	r23, r24
    2862:	89 1f       	adc	r24, r25
    2864:	9a 1f       	adc	r25, r26
    2866:	a1 1d       	adc	r26, r1
    2868:	68 0f       	add	r22, r24
    286a:	79 1f       	adc	r23, r25
    286c:	8a 1f       	adc	r24, r26
    286e:	91 1d       	adc	r25, r1
    2870:	a1 1d       	adc	r26, r1
    2872:	6a 0f       	add	r22, r26
    2874:	71 1d       	adc	r23, r1
    2876:	81 1d       	adc	r24, r1
    2878:	91 1d       	adc	r25, r1
    287a:	a1 1d       	adc	r26, r1
    287c:	20 d0       	rcall	.+64     	; 0x28be <__ultoa_invert+0x84>
    287e:	09 f4       	brne	.+2      	; 0x2882 <__ultoa_invert+0x48>
    2880:	68 94       	set
    2882:	3f 91       	pop	r19
    2884:	2a e0       	ldi	r18, 0x0A	; 10
    2886:	26 9f       	mul	r18, r22
    2888:	11 24       	eor	r1, r1
    288a:	30 19       	sub	r19, r0
    288c:	30 5d       	subi	r19, 0xD0	; 208
    288e:	31 93       	st	Z+, r19
    2890:	de f6       	brtc	.-74     	; 0x2848 <__ultoa_invert+0xe>
    2892:	cf 01       	movw	r24, r30
    2894:	08 95       	ret
    2896:	46 2f       	mov	r20, r22
    2898:	47 70       	andi	r20, 0x07	; 7
    289a:	40 5d       	subi	r20, 0xD0	; 208
    289c:	41 93       	st	Z+, r20
    289e:	b3 e0       	ldi	r27, 0x03	; 3
    28a0:	0f d0       	rcall	.+30     	; 0x28c0 <__ultoa_invert+0x86>
    28a2:	c9 f7       	brne	.-14     	; 0x2896 <__ultoa_invert+0x5c>
    28a4:	f6 cf       	rjmp	.-20     	; 0x2892 <__ultoa_invert+0x58>
    28a6:	46 2f       	mov	r20, r22
    28a8:	4f 70       	andi	r20, 0x0F	; 15
    28aa:	40 5d       	subi	r20, 0xD0	; 208
    28ac:	4a 33       	cpi	r20, 0x3A	; 58
    28ae:	18 f0       	brcs	.+6      	; 0x28b6 <__ultoa_invert+0x7c>
    28b0:	49 5d       	subi	r20, 0xD9	; 217
    28b2:	31 fd       	sbrc	r19, 1
    28b4:	40 52       	subi	r20, 0x20	; 32
    28b6:	41 93       	st	Z+, r20
    28b8:	02 d0       	rcall	.+4      	; 0x28be <__ultoa_invert+0x84>
    28ba:	a9 f7       	brne	.-22     	; 0x28a6 <__ultoa_invert+0x6c>
    28bc:	ea cf       	rjmp	.-44     	; 0x2892 <__ultoa_invert+0x58>
    28be:	b4 e0       	ldi	r27, 0x04	; 4
    28c0:	a6 95       	lsr	r26
    28c2:	97 95       	ror	r25
    28c4:	87 95       	ror	r24
    28c6:	77 95       	ror	r23
    28c8:	67 95       	ror	r22
    28ca:	ba 95       	dec	r27
    28cc:	c9 f7       	brne	.-14     	; 0x28c0 <__ultoa_invert+0x86>
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	61 05       	cpc	r22, r1
    28d2:	71 05       	cpc	r23, r1
    28d4:	08 95       	ret
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	0a 2e       	mov	r0, r26
    28dc:	06 94       	lsr	r0
    28de:	57 95       	ror	r21
    28e0:	47 95       	ror	r20
    28e2:	37 95       	ror	r19
    28e4:	27 95       	ror	r18
    28e6:	ba 95       	dec	r27
    28e8:	c9 f7       	brne	.-14     	; 0x28dc <__ultoa_invert+0xa2>
    28ea:	62 0f       	add	r22, r18
    28ec:	73 1f       	adc	r23, r19
    28ee:	84 1f       	adc	r24, r20
    28f0:	95 1f       	adc	r25, r21
    28f2:	a0 1d       	adc	r26, r0
    28f4:	08 95       	ret

000028f6 <_exit>:
    28f6:	f8 94       	cli

000028f8 <__stop_program>:
    28f8:	ff cf       	rjmp	.-2      	; 0x28f8 <__stop_program>
