
Pjt11_timer_task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f4  00800200  0000184a  000018de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000184a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013d  008002f4  008002f4  000019d2  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c8  00000000  00000000  00002ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028e1  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b0  00000000  00000000  00005a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000151e  00000000  00000000  00006e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000808  00000000  00000000  00008368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f7  00000000  00000000  00008b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e20  00000000  00000000  00009367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000b187  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e4       	ldi	r30, 0x4A	; 74
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3f       	cpi	r26, 0xF4	; 244
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	a4 ef       	ldi	r26, 0xF4	; 244
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a1 33       	cpi	r26, 0x31	; 49
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 b8 06 	call	0xd70	; 0xd70 <main>
     124:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 0a 07 	call	0xe14	; 0xe14 <malloc>
	return(cp);
}
     134:	08 95       	ret

00000136 <free_node>:

void free_node(struct node *np)
{
	free(np);
     136:	0e 94 a0 07 	call	0xf40	; 0xf40 <free>
}
     13a:	08 95       	ret

0000013c <insert_node_head>:

void insert_node_head(struct node *np)
{
     13c:	fc 01       	movw	r30, r24
	if(!Head) {
     13e:	80 91 f4 02 	lds	r24, 0x02F4
     142:	90 91 f5 02 	lds	r25, 0x02F5
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	39 f4       	brne	.+14     	; 0x158 <insert_node_head+0x1c>
		Head = np;
     14a:	f0 93 f5 02 	sts	0x02F5, r31
     14e:	e0 93 f4 02 	sts	0x02F4, r30
		np->link = NULL;
     152:	13 82       	std	Z+3, r1	; 0x03
     154:	12 82       	std	Z+2, r1	; 0x02
     156:	08 95       	ret
	} else {
		np->link = Head;
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     15c:	f0 93 f5 02 	sts	0x02F5, r31
     160:	e0 93 f4 02 	sts	0x02F4, r30
     164:	08 95       	ret

00000166 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     166:	e0 91 f4 02 	lds	r30, 0x02F4
     16a:	f0 91 f5 02 	lds	r31, 0x02F5
     16e:	30 97       	sbiw	r30, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <insert_node_tail+0x18>
		Head = np;
     172:	90 93 f5 02 	sts	0x02F5, r25
     176:	80 93 f4 02 	sts	0x02F4, r24
     17a:	08 c0       	rjmp	.+16     	; 0x18c <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     17c:	f9 01       	movw	r30, r18
     17e:	22 81       	ldd	r18, Z+2	; 0x02
     180:	33 81       	ldd	r19, Z+3	; 0x03
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	d1 f7       	brne	.-12     	; 0x17c <insert_node_tail+0x16>
			;
		cp->link = np;
     188:	93 83       	std	Z+3, r25	; 0x03
     18a:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     18c:	fc 01       	movw	r30, r24
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
}
     192:	08 95       	ret

00000194 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	
	if(!Head) {
     19a:	20 91 f4 02 	lds	r18, 0x02F4
     19e:	30 91 f5 02 	lds	r19, 0x02F5
     1a2:	21 15       	cp	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     1a8:	40 81       	ld	r20, Z
     1aa:	51 81       	ldd	r21, Z+1	; 0x01
     1ac:	d9 01       	movw	r26, r18
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	
	if(!Head) {
		Head = np;
     1b4:	90 93 f5 02 	sts	0x02F5, r25
     1b8:	80 93 f4 02 	sts	0x02F4, r24
		np->link = NULL;
     1bc:	13 82       	std	Z+3, r1	; 0x03
     1be:	12 82       	std	Z+2, r1	; 0x02
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <insert_node_ascn+0x68>
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	13 97       	sbiw	r26, 0x03	; 3
     1ca:	ed 01       	movw	r28, r26
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	39 f0       	breq	.+14     	; 0x1de <insert_node_ascn+0x4a>
     1d0:	dc 01       	movw	r26, r24
     1d2:	8d 91       	ld	r24, X+
     1d4:	9c 91       	ld	r25, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	94 f3       	brlt	.-28     	; 0x1c2 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     1de:	20 97       	sbiw	r28, 0x00	; 0
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <insert_node_ascn+0x5c>
			np->link = Head;
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1e6:	f0 93 f5 02 	sts	0x02F5, r31
     1ea:	e0 93 f4 02 	sts	0x02F4, r30
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     1f8:	fb 83       	std	Y+3, r31	; 0x03
     1fa:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <tour_list>:

void tour_list()
{
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     20a:	8a e0       	ldi	r24, 0x0A	; 10
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 07 09 	call	0x120e	; 0x120e <putchar>
	for(cp = Head; cp->link != NULL; cp = cp->link)
     212:	c0 91 f4 02 	lds	r28, 0x02F4
     216:	d0 91 f5 02 	lds	r29, 0x02F5
		printf("-->%c ", cp->data);
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     21e:	13 c0       	rjmp	.+38     	; 0x246 <tour_list+0x44>
		printf("-->%c ", cp->data);
     220:	00 d0       	rcall	.+0      	; 0x222 <tour_list+0x20>
     222:	0f 92       	push	r0
     224:	ed b7       	in	r30, 0x3d	; 61
     226:	fe b7       	in	r31, 0x3e	; 62
     228:	12 83       	std	Z+2, r17	; 0x02
     22a:	01 83       	std	Z+1, r16	; 0x01
     22c:	88 81       	ld	r24, Y
     22e:	99 81       	ldd	r25, Y+1	; 0x01
     230:	94 83       	std	Z+4, r25	; 0x04
     232:	83 83       	std	Z+3, r24	; 0x03
     234:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     238:	0a 80       	ldd	r0, Y+2	; 0x02
     23a:	db 81       	ldd	r29, Y+3	; 0x03
     23c:	c0 2d       	mov	r28, r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	9b 81       	ldd	r25, Y+3	; 0x03
     24a:	00 97       	sbiw	r24, 0x00	; 0
     24c:	49 f7       	brne	.-46     	; 0x220 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     24e:	8a e0       	ldi	r24, 0x0A	; 10
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 07 09 	call	0x120e	; 0x120e <putchar>
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	08 95       	ret

00000260 <free_list>:

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     260:	09 c0       	rjmp	.+18     	; 0x274 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     262:	fc 01       	movw	r30, r24
     264:	22 81       	ldd	r18, Z+2	; 0x02
     266:	33 81       	ldd	r19, Z+3	; 0x03
     268:	30 93 f5 02 	sts	0x02F5, r19
     26c:	20 93 f4 02 	sts	0x02F4, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     270:	0e 94 a0 07 	call	0xf40	; 0xf40 <free>

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     274:	80 91 f4 02 	lds	r24, 0x02F4
     278:	90 91 f5 02 	lds	r25, 0x02F5
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	89 f7       	brne	.-30     	; 0x262 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     280:	08 95       	ret

00000282 <app_list>:

void app_list(char *ap)
{
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	28 97       	sbiw	r28, 0x08	; 8
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     29c:	00 97       	sbiw	r24, 0x00	; 0
     29e:	19 f0       	breq	.+6      	; 0x2a6 <app_list+0x24>
     2a0:	fc 01       	movw	r30, r24
     2a2:	10 81       	ld	r17, Z
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <app_list+0x26>
	}
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     2a6:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     2a8:	87 e0       	ldi	r24, 0x07	; 7
     2aa:	e8 2e       	mov	r14, r24
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	f8 2e       	mov	r15, r24
     2b0:	0f 92       	push	r0
     2b2:	0f 92       	push	r0
     2b4:	ed b7       	in	r30, 0x3d	; 61
     2b6:	fe b7       	in	r31, 0x3e	; 62
     2b8:	f2 82       	std	Z+2, r15	; 0x02
     2ba:	e1 82       	std	Z+1, r14	; 0x01
     2bc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
		if(fgets(buf, 8, stdin) == NULL) {
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	40 91 2b 04 	lds	r20, 0x042B
     2c8:	50 91 2c 04 	lds	r21, 0x042C
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	68 e0       	ldi	r22, 0x08	; 8
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	0e 94 9b 08 	call	0x1136	; 0x1136 <fgets>
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	a1 f0       	breq	.+40     	; 0x304 <app_list+0x82>
			break;
		}
		np = get_node();
     2dc:	0e 94 96 00 	call	0x12c	; 0x12c <get_node>
		np->data = buf[0];
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
     2e6:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     2e8:	18 36       	cpi	r17, 0x68	; 104
     2ea:	19 f0       	breq	.+6      	; 0x2f2 <app_list+0x70>
     2ec:	14 37       	cpi	r17, 0x74	; 116
     2ee:	39 f4       	brne	.+14     	; 0x2fe <app_list+0x7c>
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <app_list+0x76>
			case	'h' : insert_node_head(np); break;
     2f2:	0e 94 9e 00 	call	0x13c	; 0x13c <insert_node_head>
     2f6:	dc cf       	rjmp	.-72     	; 0x2b0 <app_list+0x2e>
			case	't' : insert_node_tail(np); break;
     2f8:	0e 94 b3 00 	call	0x166	; 0x166 <insert_node_tail>
     2fc:	d9 cf       	rjmp	.-78     	; 0x2b0 <app_list+0x2e>
			default     : insert_node_ascn(np);
     2fe:	0e 94 ca 00 	call	0x194	; 0x194 <insert_node_ascn>
     302:	d6 cf       	rjmp	.-84     	; 0x2b0 <app_list+0x2e>
		}
	}
	tour_list();
     304:	0e 94 01 01 	call	0x202	; 0x202 <tour_list>
	free_list();
     308:	0e 94 30 01 	call	0x260	; 0x260 <free_list>
}
     30c:	28 96       	adiw	r28, 0x08	; 8
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	08 95       	ret

00000324 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	fc 01       	movw	r30, r24
	int i; 
	for (i = 2; i <= n/2; i++)
     32a:	62 e0       	ldi	r22, 0x02	; 2
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     332:	eb 01       	movw	r28, r22
     334:	22 e0       	ldi	r18, 0x02	; 2
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	08 c0       	rjmp	.+16     	; 0x34a <is_prime+0x26>
		if((n % i) == 0)
     33a:	cf 01       	movw	r24, r30
     33c:	b9 01       	movw	r22, r18
     33e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	41 f0       	breq	.+16     	; 0x356 <is_prime+0x32>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
     346:	2f 5f       	subi	r18, 0xFF	; 255
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	c2 17       	cp	r28, r18
     34c:	d3 07       	cpc	r29, r19
     34e:	ac f7       	brge	.-22     	; 0x33a <is_prime+0x16>
		if((n % i) == 0)
			return (0);
	return (1);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <is_prime+0x36>

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return (0);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <task_prime>:

void task_prime(char *ap)
{
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	21 f0       	breq	.+8      	; 0x37c <task_prime+0x1c>
     374:	0e 94 39 08 	call	0x1072	; 0x1072 <atoi>
     378:	7c 01       	movw	r14, r24
     37a:	04 c0       	rjmp	.+8      	; 0x384 <task_prime+0x24>
	return (1);
}

void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;
     37c:	90 ed       	ldi	r25, 0xD0	; 208
     37e:	e9 2e       	mov	r14, r25
     380:	97 e0       	ldi	r25, 0x07	; 7
     382:	f9 2e       	mov	r15, r25
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     388:	c2 e0       	ldi	r28, 0x02	; 2
     38a:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
     38c:	8d e0       	ldi	r24, 0x0D	; 13
     38e:	c8 2e       	mov	r12, r24
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	d8 2e       	mov	r13, r24
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     394:	16 c0       	rjmp	.+44     	; 0x3c2 <task_prime+0x62>
		if (is_prime(n)) {
     396:	ce 01       	movw	r24, r28
     398:	0e 94 92 01 	call	0x324	; 0x324 <is_prime>
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	81 f0       	breq	.+32     	; 0x3c0 <task_prime+0x60>
			count++;
     3a0:	0f 5f       	subi	r16, 0xFF	; 255
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n", n);
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <task_prime+0x46>
     3a6:	0f 92       	push	r0
     3a8:	ed b7       	in	r30, 0x3d	; 61
     3aa:	fe b7       	in	r31, 0x3e	; 62
     3ac:	d2 82       	std	Z+2, r13	; 0x02
     3ae:	c1 82       	std	Z+1, r12	; 0x01
     3b0:	d4 83       	std	Z+4, r29	; 0x04
     3b2:	c3 83       	std	Z+3, r28	; 0x03
     3b4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	ec 16       	cp	r14, r28
     3c4:	fd 06       	cpc	r15, r29
     3c6:	3c f7       	brge	.-50     	; 0x396 <task_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
		}
	}
	printf("count = %d\n", count);
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <task_prime+0x6a>
     3ca:	0f 92       	push	r0
     3cc:	87 e2       	ldi	r24, 0x27	; 39
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	ed b7       	in	r30, 0x3d	; 61
     3d2:	fe b7       	in	r31, 0x3e	; 62
     3d4:	92 83       	std	Z+2, r25	; 0x02
     3d6:	81 83       	std	Z+1, r24	; 0x01
     3d8:	14 83       	std	Z+4, r17	; 0x04
     3da:	03 83       	std	Z+3, r16	; 0x03
     3dc:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
	printf("$ ");
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	83 e3       	ldi	r24, 0x33	; 51
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	81 83       	std	Z+1, r24	; 0x01
     3f0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	08 95       	ret

0000040a <task_sum>:

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	19 f0       	breq	.+6      	; 0x414 <task_sum+0xa>
     40e:	0e 94 39 08 	call	0x1072	; 0x1072 <atoi>
     412:	02 c0       	rjmp	.+4      	; 0x418 <task_sum+0xe>
	printf("$ ");
}

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;
     414:	84 e6       	ldi	r24, 0x64	; 100
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	04 c0       	rjmp	.+8      	; 0x42a <task_sum+0x20>
		sum += n; 
     422:	42 0f       	add	r20, r18
     424:	53 1f       	adc	r21, r19
void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	82 17       	cp	r24, r18
     42c:	93 07       	cpc	r25, r19
     42e:	cc f7       	brge	.-14     	; 0x422 <task_sum+0x18>
		sum += n; 
	}
	printf("sum = %d\n", sum);
     430:	00 d0       	rcall	.+0      	; 0x432 <task_sum+0x28>
     432:	0f 92       	push	r0
     434:	86 e3       	ldi	r24, 0x36	; 54
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	ed b7       	in	r30, 0x3d	; 61
     43a:	fe b7       	in	r31, 0x3e	; 62
     43c:	92 83       	std	Z+2, r25	; 0x02
     43e:	81 83       	std	Z+1, r24	; 0x01
     440:	54 83       	std	Z+4, r21	; 0x04
     442:	43 83       	std	Z+3, r20	; 0x03
     444:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
	printf("$ ");
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	83 e3       	ldi	r24, 0x33	; 51
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	92 83       	std	Z+2, r25	; 0x02
     456:	81 83       	std	Z+1, r24	; 0x01
     458:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
}
     460:	08 95       	ret

00000462 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int  fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     462:	10 92 3f 03 	sts	0x033F, r1
     466:	10 92 3e 03 	sts	0x033E, r1
     46a:	10 92 3d 03 	sts	0x033D, r1
     46e:	10 92 3c 03 	sts	0x033C, r1
     472:	10 92 41 03 	sts	0x0341, r1
     476:	10 92 40 03 	sts	0x0340, r1
     47a:	10 92 fb 02 	sts	0x02FB, r1
     47e:	10 92 fa 02 	sts	0x02FA, r1
}
     482:	08 95       	ret

00000484 <qi_insert>:

int qi_insert(char ch)
{
     484:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     486:	20 91 40 03 	lds	r18, 0x0340
     48a:	30 91 41 03 	lds	r19, 0x0341
     48e:	2f 5f       	subi	r18, 0xFF	; 255
     490:	3f 4f       	sbci	r19, 0xFF	; 255
     492:	c9 01       	movw	r24, r18
     494:	60 e4       	ldi	r22, 0x40	; 64
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     49c:	9c 01       	movw	r18, r24
     49e:	80 91 fa 02 	lds	r24, 0x02FA
     4a2:	90 91 fb 02 	lds	r25, 0x02FB
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     4ac:	30 93 41 03 	sts	0x0341, r19
     4b0:	20 93 40 03 	sts	0x0340, r18
	qi[ri] = ch;
     4b4:	2e 5b       	subi	r18, 0xBE	; 190
     4b6:	3c 4f       	sbci	r19, 0xFC	; 252
     4b8:	f9 01       	movw	r30, r18
     4ba:	40 83       	st	Z, r20
	return(1);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     4c6:	08 95       	ret

000004c8 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     4c8:	80 91 fa 02 	lds	r24, 0x02FA
     4cc:	90 91 fb 02 	lds	r25, 0x02FB
     4d0:	20 91 40 03 	lds	r18, 0x0340
     4d4:	30 91 41 03 	lds	r19, 0x0341
     4d8:	28 17       	cp	r18, r24
     4da:	39 07       	cpc	r19, r25
     4dc:	79 f0       	breq	.+30     	; 0x4fc <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	60 e4       	ldi	r22, 0x40	; 64
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     4e8:	90 93 fb 02 	sts	0x02FB, r25
     4ec:	80 93 fa 02 	sts	0x02FA, r24
	return(qi[fi]);
     4f0:	8e 5b       	subi	r24, 0xBE	; 190
     4f2:	9c 4f       	sbci	r25, 0xFC	; 252
     4f4:	fc 01       	movw	r30, r24
     4f6:	80 81       	ld	r24, Z
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return(0);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     500:	08 95       	ret

00000502 <qo_insert>:

int qo_insert(char ch)
{
     502:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     504:	20 91 3e 03 	lds	r18, 0x033E
     508:	30 91 3f 03 	lds	r19, 0x033F
     50c:	2f 5f       	subi	r18, 0xFF	; 255
     50e:	3f 4f       	sbci	r19, 0xFF	; 255
     510:	c9 01       	movw	r24, r18
     512:	60 e4       	ldi	r22, 0x40	; 64
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     51a:	9c 01       	movw	r18, r24
     51c:	80 91 3c 03 	lds	r24, 0x033C
     520:	90 91 3d 03 	lds	r25, 0x033D
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	59 f0       	breq	.+22     	; 0x540 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     52a:	30 93 3f 03 	sts	0x033F, r19
     52e:	20 93 3e 03 	sts	0x033E, r18
	qo[ro] = ch;
     532:	24 50       	subi	r18, 0x04	; 4
     534:	3d 4f       	sbci	r19, 0xFD	; 253
     536:	f9 01       	movw	r30, r18
     538:	40 83       	st	Z, r20
	return(1);
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     544:	08 95       	ret

00000546 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     546:	80 91 3c 03 	lds	r24, 0x033C
     54a:	90 91 3d 03 	lds	r25, 0x033D
     54e:	20 91 3e 03 	lds	r18, 0x033E
     552:	30 91 3f 03 	lds	r19, 0x033F
     556:	28 17       	cp	r18, r24
     558:	39 07       	cpc	r19, r25
     55a:	79 f0       	breq	.+30     	; 0x57a <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	60 e4       	ldi	r22, 0x40	; 64
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     566:	90 93 3d 03 	sts	0x033D, r25
     56a:	80 93 3c 03 	sts	0x033C, r24
	return(qo[fo]);
     56e:	84 50       	subi	r24, 0x04	; 4
     570:	9d 4f       	sbci	r25, 0xFD	; 253
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     57e:	08 95       	ret

00000580 <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     580:	80 91 fa 02 	lds	r24, 0x02FA
     584:	90 91 fb 02 	lds	r25, 0x02FB
     588:	20 91 40 03 	lds	r18, 0x0340
     58c:	30 91 41 03 	lds	r19, 0x0341
     590:	82 17       	cp	r24, r18
     592:	93 07       	cpc	r25, r19
     594:	59 f0       	breq	.+22     	; 0x5ac <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	60 e4       	ldi	r22, 0x40	; 64
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     5a0:	8e 5b       	subi	r24, 0xBE	; 190
     5a2:	9c 4f       	sbci	r25, 0xFC	; 252
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     5b0:	08 95       	ret

000005b2 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     5b2:	8e e0       	ldi	r24, 0x0E	; 14
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 0a 07 	call	0xe14	; 0xe14 <malloc>
	return(tp);
}
     5ba:	08 95       	ret

000005bc <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	f8 2e       	mov	r15, r24
     5ca:	e9 2e       	mov	r14, r25
     5cc:	8b 01       	movw	r16, r22
	int			total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     5ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <get_timer>
     5d2:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     5d4:	dc 01       	movw	r26, r24
     5d6:	12 96       	adiw	r26, 0x02	; 2
     5d8:	ef 2d       	mov	r30, r15
     5da:	fe 2d       	mov	r31, r14
     5dc:	8a e0       	ldi	r24, 0x0A	; 10
     5de:	01 90       	ld	r0, Z+
     5e0:	0d 92       	st	X+, r0
     5e2:	81 50       	subi	r24, 0x01	; 1
     5e4:	e1 f7       	brne	.-8      	; 0x5de <insert_timer+0x22>
	tp->time = ms;
     5e6:	19 83       	std	Y+1, r17	; 0x01
     5e8:	08 83       	st	Y, r16

	if(Thead == NULL) {
     5ea:	e0 91 f6 02 	lds	r30, 0x02F6
     5ee:	f0 91 f7 02 	lds	r31, 0x02F7
     5f2:	30 97       	sbiw	r30, 0x00	; 0
     5f4:	29 f4       	brne	.+10     	; 0x600 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     5f6:	d0 93 f7 02 	sts	0x02F7, r29
     5fa:	c0 93 f6 02 	sts	0x02F6, r28
     5fe:	2f c0       	rjmp	.+94     	; 0x65e <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	01 c0       	rjmp	.+2      	; 0x60c <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     60a:	fd 01       	movw	r30, r26
		total += cp->time;
     60c:	80 81       	ld	r24, Z
     60e:	91 81       	ldd	r25, Z+1	; 0x01
     610:	28 0f       	add	r18, r24
     612:	39 1f       	adc	r19, r25
		if(total >= ms)
     614:	20 17       	cp	r18, r16
     616:	31 07       	cpc	r19, r17
     618:	34 f4       	brge	.+12     	; 0x626 <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     61a:	a4 85       	ldd	r26, Z+12	; 0x0c
     61c:	b5 85       	ldd	r27, Z+13	; 0x0d
     61e:	af 01       	movw	r20, r30
     620:	10 97       	sbiw	r26, 0x00	; 0
     622:	99 f7       	brne	.-26     	; 0x60a <insert_timer+0x4e>
     624:	01 c0       	rjmp	.+2      	; 0x628 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     626:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     628:	41 15       	cp	r20, r1
     62a:	51 05       	cpc	r21, r1
     62c:	79 f4       	brne	.+30     	; 0x64c <insert_timer+0x90>
		cp->time -= tp->time;
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	11 97       	sbiw	r26, 0x01	; 1
     634:	80 1b       	sub	r24, r16
     636:	91 0b       	sbc	r25, r17
     638:	11 96       	adiw	r26, 0x01	; 1
     63a:	9c 93       	st	X, r25
     63c:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     63e:	bd 87       	std	Y+13, r27	; 0x0d
     640:	ac 87       	std	Y+12, r26	; 0x0c
     642:	d0 93 f7 02 	sts	0x02F7, r29
     646:	c0 93 f6 02 	sts	0x02F6, r28
     64a:	24 c0       	rjmp	.+72     	; 0x694 <insert_timer+0xd8>
	} else if(cp == NULL) {
     64c:	10 97       	sbiw	r26, 0x00	; 0
     64e:	51 f4       	brne	.+20     	; 0x664 <insert_timer+0xa8>
		tp->time -= total;
     650:	02 1b       	sub	r16, r18
     652:	13 0b       	sbc	r17, r19
     654:	19 83       	std	Y+1, r17	; 0x01
     656:	08 83       	st	Y, r16
		pp->link = tp;
     658:	fa 01       	movw	r30, r20
     65a:	d5 87       	std	Z+13, r29	; 0x0d
     65c:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     65e:	1d 86       	std	Y+13, r1	; 0x0d
     660:	1c 86       	std	Y+12, r1	; 0x0c
     662:	18 c0       	rjmp	.+48     	; 0x694 <insert_timer+0xd8>
	} else {
		total -= cp->time;
     664:	8d 91       	ld	r24, X+
     666:	9c 91       	ld	r25, X
     668:	11 97       	sbiw	r26, 0x01	; 1
     66a:	b9 01       	movw	r22, r18
     66c:	68 1b       	sub	r22, r24
     66e:	79 0b       	sbc	r23, r25
		tp->time -= total;
     670:	98 01       	movw	r18, r16
     672:	26 1b       	sub	r18, r22
     674:	37 0b       	sbc	r19, r23
     676:	39 83       	std	Y+1, r19	; 0x01
     678:	28 83       	st	Y, r18
		cp->time -= tp->time;
     67a:	8d 91       	ld	r24, X+
     67c:	9c 91       	ld	r25, X
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	82 1b       	sub	r24, r18
     682:	93 0b       	sbc	r25, r19
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	9c 93       	st	X, r25
     688:	8e 93       	st	-X, r24
		pp->link = tp;
     68a:	fa 01       	movw	r30, r20
     68c:	d5 87       	std	Z+13, r29	; 0x0d
     68e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     690:	bd 87       	std	Y+13, r27	; 0x0d
     692:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	08 95       	ret

000006a2 <tour_timer>:

void tour_timer()
{
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     6ae:	8a e0       	ldi	r24, 0x0A	; 10
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 07 09 	call	0x120e	; 0x120e <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     6b6:	c0 91 f6 02 	lds	r28, 0x02F6
     6ba:	d0 91 f7 02 	lds	r29, 0x02F7
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     6c2:	80 e4       	ldi	r24, 0x40	; 64
     6c4:	e8 2e       	mov	r14, r24
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     6ca:	20 c0       	rjmp	.+64     	; 0x70c <tour_timer+0x6a>
		total += cp->time;
     6cc:	88 81       	ld	r24, Y
     6ce:	99 81       	ldd	r25, Y+1	; 0x01
     6d0:	08 0f       	add	r16, r24
     6d2:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <tour_timer+0x34>
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <tour_timer+0x36>
     6d8:	ed b7       	in	r30, 0x3d	; 61
     6da:	fe b7       	in	r31, 0x3e	; 62
     6dc:	31 96       	adiw	r30, 0x01	; 1
     6de:	ad b7       	in	r26, 0x3d	; 61
     6e0:	be b7       	in	r27, 0x3e	; 62
     6e2:	12 96       	adiw	r26, 0x02	; 2
     6e4:	fc 92       	st	X, r15
     6e6:	ee 92       	st	-X, r14
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	93 83       	std	Z+3, r25	; 0x03
     6ec:	82 83       	std	Z+2, r24	; 0x02
     6ee:	15 83       	std	Z+5, r17	; 0x05
     6f0:	04 83       	std	Z+4, r16	; 0x04
     6f2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     6f6:	0c 84       	ldd	r0, Y+12	; 0x0c
     6f8:	dd 85       	ldd	r29, Y+13	; 0x0d
     6fa:	c0 2d       	mov	r28, r0
     6fc:	8d b7       	in	r24, 0x3d	; 61
     6fe:	9e b7       	in	r25, 0x3e	; 62
     700:	06 96       	adiw	r24, 0x06	; 6
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	9e bf       	out	0x3e, r25	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	8d bf       	out	0x3d, r24	; 61
     70c:	20 97       	sbiw	r28, 0x00	; 0
     70e:	f1 f6       	brne	.-68     	; 0x6cc <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     710:	8a e0       	ldi	r24, 0x0A	; 10
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 07 09 	call	0x120e	; 0x120e <putchar>
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	08 95       	ret

00000726 <free_timer>:

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     726:	09 c0       	rjmp	.+18     	; 0x73a <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     728:	fc 01       	movw	r30, r24
     72a:	24 85       	ldd	r18, Z+12	; 0x0c
     72c:	35 85       	ldd	r19, Z+13	; 0x0d
     72e:	30 93 f7 02 	sts	0x02F7, r19
     732:	20 93 f6 02 	sts	0x02F6, r18
		free(cp);
     736:	0e 94 a0 07 	call	0xf40	; 0xf40 <free>

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     73a:	80 91 f6 02 	lds	r24, 0x02F6
     73e:	90 91 f7 02 	lds	r25, 0x02F7
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	89 f7       	brne	.-30     	; 0x728 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     746:	08 95       	ret

00000748 <app_timer>:

void app_timer(char *ap)
{
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	62 97       	sbiw	r28, 0x12	; 18
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task	tsk;

	while(1) {
		printf(">> ");
     760:	0b e4       	ldi	r16, 0x4B	; 75
     762:	12 e0       	ldi	r17, 0x02	; 2
     764:	0f 92       	push	r0
     766:	0f 92       	push	r0
     768:	ed b7       	in	r30, 0x3d	; 61
     76a:	fe b7       	in	r31, 0x3e	; 62
     76c:	12 83       	std	Z+2, r17	; 0x02
     76e:	01 83       	std	Z+1, r16	; 0x01
     770:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	40 91 2b 04 	lds	r20, 0x042B
     77c:	50 91 2c 04 	lds	r21, 0x042C
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	68 e0       	ldi	r22, 0x08	; 8
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	0e 94 9b 08 	call	0x1136	; 0x1136 <fgets>
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	61 f0       	breq	.+24     	; 0x7a8 <app_timer+0x60>
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 39 08 	call	0x1072	; 0x1072 <atoi>
     798:	bc 01       	movw	r22, r24
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	29 f0       	breq	.+10     	; 0x7a8 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     79e:	ce 01       	movw	r24, r28
     7a0:	09 96       	adiw	r24, 0x09	; 9
     7a2:	0e 94 de 02 	call	0x5bc	; 0x5bc <insert_timer>
	}
     7a6:	de cf       	rjmp	.-68     	; 0x764 <app_timer+0x1c>

	tour_timer();
     7a8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <tour_timer>
	free_timer();
     7ac:	0e 94 93 03 	call	0x726	; 0x726 <free_timer>
}
     7b0:	62 96       	adiw	r28, 0x12	; 18
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <timer_init>:

void timer_init() {
	TCNT2 = 0;
     7c6:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     7ca:	e6 eb       	ldi	r30, 0xB6	; 182
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	80 81       	ld	r24, Z
     7d0:	80 62       	ori	r24, 0x20	; 32
     7d2:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     7d4:	e0 e7       	ldi	r30, 0x70	; 112
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	81 60       	ori	r24, 0x01	; 1
     7dc:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     7de:	e1 eb       	ldi	r30, 0xB1	; 177
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	81 60       	ori	r24, 0x01	; 1
     7e6:	80 83       	st	Z, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	82 60       	ori	r24, 0x02	; 2
     7ec:	80 83       	st	Z, r24
}
     7ee:	08 95       	ret

000007f0 <timer_expire>:
 	if (--Thead->time == 0)
		timer_expire();
}

void timer_expire(void)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     7f4:	0d c0       	rjmp	.+26     	; 0x810 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     7f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     7fa:	90 93 f7 02 	sts	0x02F7, r25
     7fe:	80 93 f6 02 	sts	0x02F6, r24

		task_insert(&tp->task);
     802:	ce 01       	movw	r24, r28
     804:	02 96       	adiw	r24, 0x02	; 2
     806:	0e 94 8b 05 	call	0xb16	; 0xb16 <task_insert>

		free(tp);
     80a:	ce 01       	movw	r24, r28
     80c:	0e 94 a0 07 	call	0xf40	; 0xf40 <free>

void timer_expire(void)
{
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     810:	c0 91 f6 02 	lds	r28, 0x02F6
     814:	d0 91 f7 02 	lds	r29, 0x02F7
     818:	20 97       	sbiw	r28, 0x00	; 0
     81a:	21 f0       	breq	.+8      	; 0x824 <timer_expire+0x34>
     81c:	88 81       	ld	r24, Y
     81e:	99 81       	ldd	r25, Y+1	; 0x01
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	49 f3       	breq	.-46     	; 0x7f6 <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <__vector_15>:
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
}

ISR(TIMER2_OVF_vect)
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	0b b6       	in	r0, 0x3b	; 59
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
	if (!Thead)
     850:	e0 91 f6 02 	lds	r30, 0x02F6
     854:	f0 91 f7 02 	lds	r31, 0x02F7
     858:	30 97       	sbiw	r30, 0x00	; 0
     85a:	49 f0       	breq	.+18     	; 0x86e <__vector_15+0x44>
		return;
 	if (--Thead->time == 0)
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	91 83       	std	Z+1, r25	; 0x01
     864:	80 83       	st	Z, r24
     866:	00 97       	sbiw	r24, 0x00	; 0
     868:	11 f4       	brne	.+4      	; 0x86e <__vector_15+0x44>
		timer_expire();
     86a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <timer_expire>
}
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	0f 90       	pop	r0
     888:	0b be       	out	0x3b, r0	; 59
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	0f 90       	pop	r0
     890:	1f 90       	pop	r1
     892:	18 95       	reti

00000894 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     894:	f8 94       	cli
		ch = qi_delete();
     896:	0e 94 64 02 	call	0x4c8	; 0x4c8 <qi_delete>
		sei();
     89a:	78 94       	sei
	} while(ch == 0);
     89c:	88 23       	and	r24, r24
     89e:	d1 f3       	breq	.-12     	; 0x894 <uart_getchar>

	if(ch == EOT)	return(-1);
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <uart_getchar+0x14>
	else			return(ch);
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while(ch == 0);

	if(ch == EOT)	return(-1);
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     8ac:	08 95       	ret

000008ae <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     8ae:	cf 93       	push	r28
     8b0:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     8b2:	8a 30       	cpi	r24, 0x0A	; 10
     8b4:	19 f4       	brne	.+6      	; 0x8bc <uart_putchar+0xe>
		uart_putchar('\r', stream);
     8b6:	8d e0       	ldi	r24, 0x0D	; 13
     8b8:	0e 94 57 04 	call	0x8ae	; 0x8ae <uart_putchar>
	
	cli();
     8bc:	f8 94       	cli

	if(!uart_busy) {
     8be:	80 91 82 03 	lds	r24, 0x0382
     8c2:	88 23       	and	r24, r24
     8c4:	59 f4       	brne	.+22     	; 0x8dc <uart_putchar+0x2e>
		UDR0 = ch;
     8c6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 82 03 	sts	0x0382, r24
     8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     8d2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8d4:	86 ef       	ldi	r24, 0xF6	; 246
     8d6:	8a 95       	dec	r24
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     8da:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     8dc:	8c 2f       	mov	r24, r28
     8de:	0e 94 81 02 	call	0x502	; 0x502 <qo_insert>
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	b1 f3       	breq	.-20     	; 0x8d2 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}			
	}
	sei();
     8e6:	78 94       	sei

	return(1);
}
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     8f0:	80 e5       	ldi	r24, 0x50	; 80
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	90 93 2c 04 	sts	0x042C, r25
     8f8:	80 93 2b 04 	sts	0x042B, r24
     8fc:	8e e5       	ldi	r24, 0x5E	; 94
     8fe:	92 e0       	ldi	r25, 0x02	; 2
     900:	90 93 2e 04 	sts	0x042E, r25
     904:	80 93 2d 04 	sts	0x042D, r24
	uart_busy = 0;
     908:	10 92 82 03 	sts	0x0382, r1
	q_init();
     90c:	0e 94 31 02 	call	0x462	; 0x462 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     910:	10 92 c5 00 	sts	0x00C5, r1
     914:	87 e0       	ldi	r24, 0x07	; 7
     916:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     91a:	e0 ec       	ldi	r30, 0xC0	; 192
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	82 60       	ori	r24, 0x02	; 2
     922:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     924:	e1 ec       	ldi	r30, 0xC1	; 193
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	80 81       	ld	r24, Z
     92a:	88 60       	ori	r24, 0x08	; 8
     92c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     92e:	80 81       	ld	r24, Z
     930:	80 64       	ori	r24, 0x40	; 64
     932:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     934:	80 81       	ld	r24, Z
     936:	80 61       	ori	r24, 0x10	; 16
     938:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     93a:	80 81       	ld	r24, Z
     93c:	80 68       	ori	r24, 0x80	; 128
     93e:	80 83       	st	Z, r24
}
     940:	08 95       	ret

00000942 <__vector_27>:
	if(ch == EOT)	return(-1);
	else			return(ch);
}

ISR(USART0_TX_vect)
{
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	0b b6       	in	r0, 0x3b	; 59
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     968:	0e 94 a3 02 	call	0x546	; 0x546 <qo_delete>
     96c:	88 23       	and	r24, r24
     96e:	19 f4       	brne	.+6      	; 0x976 <__vector_27+0x34>
		uart_busy = 0;
     970:	10 92 82 03 	sts	0x0382, r1
     974:	02 c0       	rjmp	.+4      	; 0x97a <__vector_27+0x38>
	else
		UDR0 = ch;
     976:	80 93 c6 00 	sts	0x00C6, r24
}
     97a:	ff 91       	pop	r31
     97c:	ef 91       	pop	r30
     97e:	bf 91       	pop	r27
     980:	af 91       	pop	r26
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	7f 91       	pop	r23
     988:	6f 91       	pop	r22
     98a:	5f 91       	pop	r21
     98c:	4f 91       	pop	r20
     98e:	3f 91       	pop	r19
     990:	2f 91       	pop	r18
     992:	0f 90       	pop	r0
     994:	0b be       	out	0x3b, r0	; 59
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	0f 90       	pop	r0
     99c:	1f 90       	pop	r1
     99e:	18 95       	reti

000009a0 <uart_echo>:
		task_insert(&task);
	}
}

void uart_echo(char ch)
{
     9a0:	cf 93       	push	r28
     9a2:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     9a4:	8a 30       	cpi	r24, 0x0A	; 10
     9a6:	19 f4       	brne	.+6      	; 0x9ae <uart_echo+0xe>
     9a8:	8d e0       	ldi	r24, 0x0D	; 13
     9aa:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_echo>
	if(!uart_busy) {
     9ae:	80 91 82 03 	lds	r24, 0x0382
     9b2:	88 23       	and	r24, r24
     9b4:	31 f4       	brne	.+12     	; 0x9c2 <uart_echo+0x22>
		UDR0 = ch;
     9b6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	80 93 82 03 	sts	0x0382, r24
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <uart_echo+0x28>
	}
	else {
		qo_insert(ch);			
     9c2:	8c 2f       	mov	r24, r28
     9c4:	0e 94 81 02 	call	0x502	; 0x502 <qo_insert>
	}
}
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <__vector_25>:
	else
		UDR0 = ch;
}

ISR(USART0_RX_vect)
{
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	1f 93       	push	r17
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	2a 97       	sbiw	r28, 0x0a	; 10
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     a02:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     a06:	1b 31       	cpi	r17, 0x1B	; 27
     a08:	61 f4       	brne	.+24     	; 0xa22 <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     a0a:	80 91 6c 02 	lds	r24, 0x026C
     a0e:	90 91 6d 02 	lds	r25, 0x026D
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	81 70       	andi	r24, 0x01	; 1
     a16:	90 70       	andi	r25, 0x00	; 0
     a18:	90 93 6d 02 	sts	0x026D, r25
     a1c:	80 93 6c 02 	sts	0x026C, r24
		return;
     a20:	24 c0       	rjmp	.+72     	; 0xa6a <__vector_25+0x9e>
	}

	if(ch !=EOT) {
     a22:	14 30       	cpi	r17, 0x04	; 4
     a24:	69 f0       	breq	.+26     	; 0xa40 <__vector_25+0x74>
		if(ch == '\r') ch = '\n';
     a26:	1d 30       	cpi	r17, 0x0D	; 13
     a28:	09 f4       	brne	.+2      	; 0xa2c <__vector_25+0x60>
     a2a:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode)  uart_echo(ch);
     a2c:	20 91 6c 02 	lds	r18, 0x026C
     a30:	30 91 6d 02 	lds	r19, 0x026D
     a34:	21 15       	cp	r18, r1
     a36:	31 05       	cpc	r19, r1
     a38:	19 f0       	breq	.+6      	; 0xa40 <__vector_25+0x74>
     a3a:	81 2f       	mov	r24, r17
     a3c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uart_echo>
	}
	qi_insert(ch);
     a40:	81 2f       	mov	r24, r17
     a42:	0e 94 42 02 	call	0x484	; 0x484 <qi_insert>
	if(ch == EOT || ch == '\n') {
     a46:	14 30       	cpi	r17, 0x04	; 4
     a48:	11 f0       	breq	.+4      	; 0xa4e <__vector_25+0x82>
     a4a:	1a 30       	cpi	r17, 0x0A	; 10
     a4c:	71 f4       	brne	.+28     	; 0xa6a <__vector_25+0x9e>
		task.fun = task_cmd;
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	96 e0       	ldi	r25, 0x06	; 6
     a52:	9a 83       	std	Y+2, r25	; 0x02
     a54:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     a56:	ce 01       	movw	r24, r28
     a58:	03 96       	adiw	r24, 0x03	; 3
     a5a:	6f e4       	ldi	r22, 0x4F	; 79
     a5c:	72 e0       	ldi	r23, 0x02	; 2
     a5e:	0e 94 65 08 	call	0x10ca	; 0x10ca <strcpy>
		task_insert(&task);
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	0e 94 8b 05 	call	0xb16	; 0xb16 <task_insert>
	}
}
     a6a:	2a 96       	adiw	r28, 0x0a	; 10
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	ff 91       	pop	r31
     a76:	ef 91       	pop	r30
     a78:	bf 91       	pop	r27
     a7a:	af 91       	pop	r26
     a7c:	9f 91       	pop	r25
     a7e:	8f 91       	pop	r24
     a80:	7f 91       	pop	r23
     a82:	6f 91       	pop	r22
     a84:	5f 91       	pop	r21
     a86:	4f 91       	pop	r20
     a88:	3f 91       	pop	r19
     a8a:	2f 91       	pop	r18
     a8c:	1f 91       	pop	r17
     a8e:	0f 90       	pop	r0
     a90:	0b be       	out	0x3b, r0	; 59
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	0f 90       	pop	r0
     a98:	1f 90       	pop	r1
     a9a:	18 95       	reti

00000a9c <uart_peek>:
	}
}

int uart_peek()
{
	return(qi_peek());
     a9c:	0e 94 c0 02 	call	0x580	; 0x580 <qi_peek>
}
     aa0:	08 95       	ret

00000aa2 <what_task>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     ab0:	00 e0       	ldi	r16, 0x00	; 0
     ab2:	10 e0       	ldi	r17, 0x00	; 0
     ab4:	17 c0       	rjmp	.+46     	; 0xae4 <what_task+0x42>
		if (!strcmp(name, Task_tab[i].task_name))
     ab6:	e8 01       	movw	r28, r16
     ab8:	cc 0f       	add	r28, r28
     aba:	dd 1f       	adc	r29, r29
     abc:	c8 01       	movw	r24, r16
     abe:	25 e0       	ldi	r18, 0x05	; 5
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	2a 95       	dec	r18
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <what_task+0x1e>
     ac8:	c8 0f       	add	r28, r24
     aca:	d9 1f       	adc	r29, r25
     acc:	c7 55       	subi	r28, 0x57	; 87
     ace:	dd 4f       	sbci	r29, 0xFD	; 253
     ad0:	c7 01       	movw	r24, r14
     ad2:	be 01       	movw	r22, r28
     ad4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <strcmp>
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	11 f4       	brne	.+4      	; 0xae0 <what_task+0x3e>
			return(&Task_tab[i]);
     adc:	ce 01       	movw	r24, r28
     ade:	0b c0       	rjmp	.+22     	; 0xaf6 <what_task+0x54>
int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
	int i;
	for (i = 0; i < Task_cnt; i++)
     ae0:	0f 5f       	subi	r16, 0xFF	; 255
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	80 91 a7 02 	lds	r24, 0x02A7
     ae8:	90 91 a8 02 	lds	r25, 0x02A8
     aec:	08 17       	cp	r16, r24
     aee:	19 07       	cpc	r17, r25
     af0:	14 f3       	brlt	.-60     	; 0xab6 <what_task+0x14>
		if (!strcmp(name, Task_tab[i].task_name))
			return(&Task_tab[i]);

	return(NULL);
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <task_init>:
struct task 	Task_q[MAX_TASK];
volatile int	Task_f, Task_r;

void task_init()
{
	Task_f = Task_r = 0;
     b04:	10 92 84 03 	sts	0x0384, r1
     b08:	10 92 83 03 	sts	0x0383, r1
     b0c:	10 92 26 04 	sts	0x0426, r1
     b10:	10 92 25 04 	sts	0x0425, r1
}
     b14:	08 95       	ret

00000b16 <task_insert>:

int task_insert(struct task *tskp)
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	48 2f       	mov	r20, r24
     b1c:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     b1e:	80 91 83 03 	lds	r24, 0x0383
     b22:	90 91 84 03 	lds	r25, 0x0384
     b26:	c0 91 25 04 	lds	r28, 0x0425
     b2a:	d0 91 26 04 	lds	r29, 0x0426
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	20 e1       	ldi	r18, 0x10	; 16
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	b9 01       	movw	r22, r18
     b36:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     b3a:	8c 17       	cp	r24, r28
     b3c:	9d 07       	cpc	r25, r29
     b3e:	31 f1       	breq	.+76     	; 0xb8c <task_insert+0x76>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     b40:	80 91 83 03 	lds	r24, 0x0383
     b44:	90 91 84 03 	lds	r25, 0x0384
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	b9 01       	movw	r22, r18
     b4c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     b50:	90 93 84 03 	sts	0x0384, r25
     b54:	80 93 83 03 	sts	0x0383, r24
	Task_q[Task_r] = *tskp;
     b58:	80 91 83 03 	lds	r24, 0x0383
     b5c:	90 91 84 03 	lds	r25, 0x0384
     b60:	dc 01       	movw	r26, r24
     b62:	aa 0f       	add	r26, r26
     b64:	bb 1f       	adc	r27, r27
     b66:	63 e0       	ldi	r22, 0x03	; 3
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	6a 95       	dec	r22
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <task_insert+0x52>
     b70:	a8 0f       	add	r26, r24
     b72:	b9 1f       	adc	r27, r25
     b74:	ab 57       	subi	r26, 0x7B	; 123
     b76:	bc 4f       	sbci	r27, 0xFC	; 252
     b78:	c4 2f       	mov	r28, r20
     b7a:	de 2f       	mov	r29, r30
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	09 90       	ld	r0, Y+
     b80:	0d 92       	st	X+, r0
     b82:	81 50       	subi	r24, 0x01	; 1
     b84:	e1 f7       	brne	.-8      	; 0xb7e <task_insert+0x68>
	return (1);
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return 0;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <task_delete>:

int task_delete(struct task *tskp)
{
     b96:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     b98:	40 91 83 03 	lds	r20, 0x0383
     b9c:	50 91 84 03 	lds	r21, 0x0384
     ba0:	80 91 25 04 	lds	r24, 0x0425
     ba4:	90 91 26 04 	lds	r25, 0x0426
     ba8:	48 17       	cp	r20, r24
     baa:	59 07       	cpc	r21, r25
     bac:	31 f1       	breq	.+76     	; 0xbfa <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     bae:	80 91 25 04 	lds	r24, 0x0425
     bb2:	90 91 26 04 	lds	r25, 0x0426
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	60 e1       	ldi	r22, 0x10	; 16
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
     bc0:	90 93 26 04 	sts	0x0426, r25
     bc4:	80 93 25 04 	sts	0x0425, r24
	*tskp = Task_q[Task_f];
     bc8:	80 91 25 04 	lds	r24, 0x0425
     bcc:	90 91 26 04 	lds	r25, 0x0426
     bd0:	fc 01       	movw	r30, r24
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	a3 e0       	ldi	r26, 0x03	; 3
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	aa 95       	dec	r26
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <task_delete+0x42>
     be0:	e8 0f       	add	r30, r24
     be2:	f9 1f       	adc	r31, r25
     be4:	d9 01       	movw	r26, r18
     be6:	eb 57       	subi	r30, 0x7B	; 123
     be8:	fc 4f       	sbci	r31, 0xFC	; 252
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	81 50       	subi	r24, 0x01	; 1
     bf2:	e1 f7       	brne	.-8      	; 0xbec <task_delete+0x56>
	return(1);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)
		return(0);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     bfe:	08 95       	ret

00000c00 <task_cmd>:

void task_cmd(char *arg)
{
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	ca 54       	subi	r28, 0x4A	; 74
     c1a:	d0 40       	sbci	r29, 0x00	; 0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task_tab *tp;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     c26:	0e 94 4e 05 	call	0xa9c	; 0xa9c <uart_peek>
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	09 f4       	brne	.+2      	; 0xc30 <task_cmd+0x30>
     c2e:	8e c0       	rjmp	.+284    	; 0xd4c <task_cmd+0x14c>

	if (gets(buf) == NULL) {
     c30:	ce 01       	movw	r24, r28
     c32:	0b 96       	adiw	r24, 0x0b	; 11
     c34:	0e 94 cf 08 	call	0x119e	; 0x119e <gets>
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	29 f4       	brne	.+10     	; 0xc46 <task_cmd+0x46>
		printf("logout, goodbye !!!\n");
     c3c:	8e e6       	ldi	r24, 0x6E	; 110
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 0e 09 	call	0x121c	; 0x121c <puts>
     c44:	ff cf       	rjmp	.-2      	; 0xc44 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf,  " \t\n\r");
     c46:	ce 01       	movw	r24, r28
     c48:	0b 96       	adiw	r24, 0x0b	; 11
     c4a:	62 e8       	ldi	r22, 0x82	; 130
     c4c:	72 e0       	ldi	r23, 0x02	; 2
     c4e:	0e 94 57 08 	call	0x10ae	; 0x10ae <strtok>
     c52:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	62 e8       	ldi	r22, 0x82	; 130
     c5a:	72 e0       	ldi	r23, 0x02	; 2
     c5c:	0e 94 57 08 	call	0x10ae	; 0x10ae <strtok>
     c60:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	62 e8       	ldi	r22, 0x82	; 130
     c68:	72 e0       	ldi	r23, 0x02	; 2
     c6a:	0e 94 57 08 	call	0x10ae	; 0x10ae <strtok>
     c6e:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	62 e8       	ldi	r22, 0x82	; 130
     c76:	72 e0       	ldi	r23, 0x02	; 2
     c78:	0e 94 57 08 	call	0x10ae	; 0x10ae <strtok>
     c7c:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     c7e:	01 15       	cp	r16, r1
     c80:	11 05       	cpc	r17, r1
     c82:	29 f4       	brne	.+10     	; 0xc8e <task_cmd+0x8e>
		printf("$ "); return;
     c84:	0f 92       	push	r0
     c86:	0f 92       	push	r0
     c88:	87 e8       	ldi	r24, 0x87	; 135
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	47 c0       	rjmp	.+142    	; 0xd1c <task_cmd+0x11c>
	}

	if (!strcmp(cp0, "timer")) {
     c8e:	c8 01       	movw	r24, r16
     c90:	6a e8       	ldi	r22, 0x8A	; 138
     c92:	72 e0       	ldi	r23, 0x02	; 2
     c94:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <strcmp>
     c98:	00 97       	sbiw	r24, 0x00	; 0
     c9a:	b9 f5       	brne	.+110    	; 0xd0a <task_cmd+0x10a>
		if (!cp1 || !cp2) 
     c9c:	e1 14       	cp	r14, r1
     c9e:	f1 04       	cpc	r15, r1
     ca0:	19 f0       	breq	.+6      	; 0xca8 <task_cmd+0xa8>
     ca2:	c1 14       	cp	r12, r1
     ca4:	d1 04       	cpc	r13, r1
     ca6:	61 f4       	brne	.+24     	; 0xcc0 <task_cmd+0xc0>
			printf("Unknown command...\n$ ");
     ca8:	0f 92       	push	r0
     caa:	0f 92       	push	r0
     cac:	80 e9       	ldi	r24, 0x90	; 144
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	ed b7       	in	r30, 0x3d	; 61
     cb2:	fe b7       	in	r31, 0x3e	; 62
     cb4:	92 83       	std	Z+2, r25	; 0x02
     cb6:	81 83       	std	Z+1, r24	; 0x01
     cb8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
		ms = atoi(cp1) / 256;
     cc0:	c7 01       	movw	r24, r14
     cc2:	0e 94 39 08 	call	0x1072	; 0x1072 <atoi>
     cc6:	8c 01       	movw	r16, r24

		if (!(tp = what_task(cp2))) {
     cc8:	c6 01       	movw	r24, r12
     cca:	0e 94 51 05 	call	0xaa2	; 0xaa2 <what_task>
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	09 f1       	breq	.+66     	; 0xd14 <task_cmd+0x114>
			printf("Unknown command...\n$ ");
			return;
		}

		task.fun = tp->task_fun;
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 a1       	lds	r24, 0x40
     cd6:	91 a1       	lds	r25, 0x41
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     cdc:	ce 01       	movw	r24, r28
     cde:	03 96       	adiw	r24, 0x03	; 3
     ce0:	a1 14       	cp	r10, r1
     ce2:	b1 04       	cpc	r11, r1
     ce4:	11 f0       	breq	.+4      	; 0xcea <task_cmd+0xea>
     ce6:	b5 01       	movw	r22, r10
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <task_cmd+0xee>
		else	 strcpy(task.arg, "");
     cea:	66 ea       	ldi	r22, 0xA6	; 166
     cec:	72 e0       	ldi	r23, 0x02	; 2
     cee:	0e 94 65 08 	call	0x10ca	; 0x10ca <strcpy>
		
		cli();
     cf2:	f8 94       	cli
	}

	if (!strcmp(cp0, "timer")) {
		if (!cp1 || !cp2) 
			printf("Unknown command...\n$ ");
		ms = atoi(cp1) / 256;
     cf4:	c8 01       	movw	r24, r16
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__divmodhi4>
		task.fun = tp->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else	 strcpy(task.arg, "");
		
		cli();
		insert_timer(&task, ms);
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 de 02 	call	0x5bc	; 0x5bc <insert_timer>
		sei();
     d06:	78 94       	sei
     d08:	21 c0       	rjmp	.+66     	; 0xd4c <task_cmd+0x14c>
	} else {
		if (!(tp = what_task(cp0))) {
     d0a:	c8 01       	movw	r24, r16
     d0c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <what_task>
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	79 f4       	brne	.+30     	; 0xd32 <task_cmd+0x132>
			printf("Unknown command...\n$ ");
     d14:	0f 92       	push	r0
     d16:	0f 92       	push	r0
     d18:	80 e9       	ldi	r24, 0x90	; 144
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	ad b7       	in	r26, 0x3d	; 61
     d1e:	be b7       	in	r27, 0x3e	; 62
     d20:	12 96       	adiw	r26, 0x02	; 2
     d22:	9c 93       	st	X, r25
     d24:	8e 93       	st	-X, r24
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
			return;
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <task_cmd+0x14c>
     d32:	dc 01       	movw	r26, r24
     d34:	90 96       	adiw	r26, 0x20	; 32
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	91 97       	sbiw	r26, 0x21	; 33
		}
		if (cp2) {
     d3c:	c1 14       	cp	r12, r1
     d3e:	d1 04       	cpc	r13, r1
     d40:	11 f0       	breq	.+4      	; 0xd46 <task_cmd+0x146>
			(*tp->task_fun)(cp1);
     d42:	c7 01       	movw	r24, r14
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <task_cmd+0x14a>
		} else {
			(*tp->task_fun)("");
     d46:	86 ea       	ldi	r24, 0xA6	; 166
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	19 95       	eicall
		}
	}
}
     d4c:	c6 5b       	subi	r28, 0xB6	; 182
     d4e:	df 4f       	sbci	r29, 0xFF	; 255
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	08 95       	ret

00000d70 <main>:
#include "list.h"
#include "timer.h"
#include "task.h"

int main()
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2a 97       	sbiw	r28, 0x0a	; 10
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
	int 	tag;
	struct	task task;

	sei();
     d84:	78 94       	sei
	uart_init();
     d86:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_init>
	task_init();
     d8a:	0e 94 82 05 	call	0xb04	; 0xb04 <task_init>
	timer_init();	
     d8e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <timer_init>

	printf("$ ");
     d92:	0f 92       	push	r0
     d94:	0f 92       	push	r0
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	92 e0       	ldi	r25, 0x02	; 2
     d9a:	ed b7       	in	r30, 0x3d	; 61
     d9c:	fe b7       	in	r31, 0x3e	; 62
     d9e:	92 83       	std	Z+2, r25	; 0x02
     da0:	81 83       	std	Z+1, r24	; 0x01
     da2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <printf>
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
		
	while(1) {
		cli();
     daa:	f8 94       	cli
		tag = task_delete(&task);
     dac:	ce 01       	movw	r24, r28
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	0e 94 cb 05 	call	0xb96	; 0xb96 <task_delete>
		sei();
     db4:	78 94       	sei
		if (tag)
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	c1 f3       	breq	.-16     	; 0xdaa <main+0x3a>
			(*(task.fun))(task.arg);
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	ce 01       	movw	r24, r28
     dc0:	03 96       	adiw	r24, 0x03	; 3
     dc2:	19 95       	eicall
     dc4:	f2 cf       	rjmp	.-28     	; 0xdaa <main+0x3a>

00000dc6 <__divmodhi4>:
     dc6:	97 fb       	bst	r25, 7
     dc8:	09 2e       	mov	r0, r25
     dca:	07 26       	eor	r0, r23
     dcc:	0a d0       	rcall	.+20     	; 0xde2 <__divmodhi4_neg1>
     dce:	77 fd       	sbrc	r23, 7
     dd0:	04 d0       	rcall	.+8      	; 0xdda <__divmodhi4_neg2>
     dd2:	0c d0       	rcall	.+24     	; 0xdec <__udivmodhi4>
     dd4:	06 d0       	rcall	.+12     	; 0xde2 <__divmodhi4_neg1>
     dd6:	00 20       	and	r0, r0
     dd8:	1a f4       	brpl	.+6      	; 0xde0 <__divmodhi4_exit>

00000dda <__divmodhi4_neg2>:
     dda:	70 95       	com	r23
     ddc:	61 95       	neg	r22
     dde:	7f 4f       	sbci	r23, 0xFF	; 255

00000de0 <__divmodhi4_exit>:
     de0:	08 95       	ret

00000de2 <__divmodhi4_neg1>:
     de2:	f6 f7       	brtc	.-4      	; 0xde0 <__divmodhi4_exit>
     de4:	90 95       	com	r25
     de6:	81 95       	neg	r24
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	08 95       	ret

00000dec <__udivmodhi4>:
     dec:	aa 1b       	sub	r26, r26
     dee:	bb 1b       	sub	r27, r27
     df0:	51 e1       	ldi	r21, 0x11	; 17
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <__udivmodhi4_ep>

00000df4 <__udivmodhi4_loop>:
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	a6 17       	cp	r26, r22
     dfa:	b7 07       	cpc	r27, r23
     dfc:	10 f0       	brcs	.+4      	; 0xe02 <__udivmodhi4_ep>
     dfe:	a6 1b       	sub	r26, r22
     e00:	b7 0b       	sbc	r27, r23

00000e02 <__udivmodhi4_ep>:
     e02:	88 1f       	adc	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	5a 95       	dec	r21
     e08:	a9 f7       	brne	.-22     	; 0xdf4 <__udivmodhi4_loop>
     e0a:	80 95       	com	r24
     e0c:	90 95       	com	r25
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	08 95       	ret

00000e14 <malloc>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ac 01       	movw	r20, r24
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	91 05       	cpc	r25, r1
     e1e:	10 f4       	brcc	.+4      	; 0xe24 <malloc+0x10>
     e20:	42 e0       	ldi	r20, 0x02	; 2
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	e0 91 29 04 	lds	r30, 0x0429
     e28:	f0 91 2a 04 	lds	r31, 0x042A
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	a0 e0       	ldi	r26, 0x00	; 0
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	24 c0       	rjmp	.+72     	; 0xe7e <malloc+0x6a>
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	84 17       	cp	r24, r20
     e3c:	95 07       	cpc	r25, r21
     e3e:	d0 f0       	brcs	.+52     	; 0xe74 <malloc+0x60>
     e40:	84 17       	cp	r24, r20
     e42:	95 07       	cpc	r25, r21
     e44:	71 f4       	brne	.+28     	; 0xe62 <malloc+0x4e>
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	10 97       	sbiw	r26, 0x00	; 0
     e4c:	29 f0       	breq	.+10     	; 0xe58 <malloc+0x44>
     e4e:	13 96       	adiw	r26, 0x03	; 3
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	2c c0       	rjmp	.+88     	; 0xeb0 <malloc+0x9c>
     e58:	90 93 2a 04 	sts	0x042A, r25
     e5c:	80 93 29 04 	sts	0x0429, r24
     e60:	27 c0       	rjmp	.+78     	; 0xeb0 <malloc+0x9c>
     e62:	21 15       	cp	r18, r1
     e64:	31 05       	cpc	r19, r1
     e66:	19 f0       	breq	.+6      	; 0xe6e <malloc+0x5a>
     e68:	82 17       	cp	r24, r18
     e6a:	93 07       	cpc	r25, r19
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <malloc+0x60>
     e6e:	9c 01       	movw	r18, r24
     e70:	bd 01       	movw	r22, r26
     e72:	ef 01       	movw	r28, r30
     e74:	92 81       	ldd	r25, Z+2	; 0x02
     e76:	83 81       	ldd	r24, Z+3	; 0x03
     e78:	df 01       	movw	r26, r30
     e7a:	e9 2f       	mov	r30, r25
     e7c:	f8 2f       	mov	r31, r24
     e7e:	30 97       	sbiw	r30, 0x00	; 0
     e80:	d1 f6       	brne	.-76     	; 0xe36 <malloc+0x22>
     e82:	21 15       	cp	r18, r1
     e84:	31 05       	cpc	r19, r1
     e86:	f9 f0       	breq	.+62     	; 0xec6 <malloc+0xb2>
     e88:	c9 01       	movw	r24, r18
     e8a:	84 1b       	sub	r24, r20
     e8c:	95 0b       	sbc	r25, r21
     e8e:	84 30       	cpi	r24, 0x04	; 4
     e90:	91 05       	cpc	r25, r1
     e92:	80 f4       	brcc	.+32     	; 0xeb4 <malloc+0xa0>
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	9b 81       	ldd	r25, Y+3	; 0x03
     e98:	61 15       	cp	r22, r1
     e9a:	71 05       	cpc	r23, r1
     e9c:	21 f0       	breq	.+8      	; 0xea6 <malloc+0x92>
     e9e:	fb 01       	movw	r30, r22
     ea0:	93 83       	std	Z+3, r25	; 0x03
     ea2:	82 83       	std	Z+2, r24	; 0x02
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <malloc+0x9a>
     ea6:	90 93 2a 04 	sts	0x042A, r25
     eaa:	80 93 29 04 	sts	0x0429, r24
     eae:	fe 01       	movw	r30, r28
     eb0:	32 96       	adiw	r30, 0x02	; 2
     eb2:	42 c0       	rjmp	.+132    	; 0xf38 <malloc+0x124>
     eb4:	fe 01       	movw	r30, r28
     eb6:	e8 0f       	add	r30, r24
     eb8:	f9 1f       	adc	r31, r25
     eba:	41 93       	st	Z+, r20
     ebc:	51 93       	st	Z+, r21
     ebe:	02 97       	sbiw	r24, 0x02	; 2
     ec0:	99 83       	std	Y+1, r25	; 0x01
     ec2:	88 83       	st	Y, r24
     ec4:	39 c0       	rjmp	.+114    	; 0xf38 <malloc+0x124>
     ec6:	80 91 27 04 	lds	r24, 0x0427
     eca:	90 91 28 04 	lds	r25, 0x0428
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	41 f4       	brne	.+16     	; 0xee2 <malloc+0xce>
     ed2:	80 91 ef 02 	lds	r24, 0x02EF
     ed6:	90 91 f0 02 	lds	r25, 0x02F0
     eda:	90 93 28 04 	sts	0x0428, r25
     ede:	80 93 27 04 	sts	0x0427, r24
     ee2:	20 91 ed 02 	lds	r18, 0x02ED
     ee6:	30 91 ee 02 	lds	r19, 0x02EE
     eea:	21 15       	cp	r18, r1
     eec:	31 05       	cpc	r19, r1
     eee:	41 f4       	brne	.+16     	; 0xf00 <malloc+0xec>
     ef0:	2d b7       	in	r18, 0x3d	; 61
     ef2:	3e b7       	in	r19, 0x3e	; 62
     ef4:	80 91 f1 02 	lds	r24, 0x02F1
     ef8:	90 91 f2 02 	lds	r25, 0x02F2
     efc:	28 1b       	sub	r18, r24
     efe:	39 0b       	sbc	r19, r25
     f00:	e0 91 27 04 	lds	r30, 0x0427
     f04:	f0 91 28 04 	lds	r31, 0x0428
     f08:	e2 17       	cp	r30, r18
     f0a:	f3 07       	cpc	r31, r19
     f0c:	98 f4       	brcc	.+38     	; 0xf34 <malloc+0x120>
     f0e:	2e 1b       	sub	r18, r30
     f10:	3f 0b       	sbc	r19, r31
     f12:	24 17       	cp	r18, r20
     f14:	35 07       	cpc	r19, r21
     f16:	70 f0       	brcs	.+28     	; 0xf34 <malloc+0x120>
     f18:	ca 01       	movw	r24, r20
     f1a:	02 96       	adiw	r24, 0x02	; 2
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	48 f0       	brcs	.+18     	; 0xf34 <malloc+0x120>
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	90 93 28 04 	sts	0x0428, r25
     f2a:	80 93 27 04 	sts	0x0427, r24
     f2e:	41 93       	st	Z+, r20
     f30:	51 93       	st	Z+, r21
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <malloc+0x124>
     f34:	e0 e0       	ldi	r30, 0x00	; 0
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	cf 01       	movw	r24, r30
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <free>:
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	9c 01       	movw	r18, r24
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	09 f4       	brne	.+2      	; 0xf50 <free+0x10>
     f4e:	8c c0       	rjmp	.+280    	; 0x1068 <free+0x128>
     f50:	dc 01       	movw	r26, r24
     f52:	12 97       	sbiw	r26, 0x02	; 2
     f54:	13 96       	adiw	r26, 0x03	; 3
     f56:	1c 92       	st	X, r1
     f58:	1e 92       	st	-X, r1
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	60 91 29 04 	lds	r22, 0x0429
     f60:	70 91 2a 04 	lds	r23, 0x042A
     f64:	61 15       	cp	r22, r1
     f66:	71 05       	cpc	r23, r1
     f68:	89 f4       	brne	.+34     	; 0xf8c <free+0x4c>
     f6a:	8d 91       	ld	r24, X+
     f6c:	9c 91       	ld	r25, X
     f6e:	11 97       	sbiw	r26, 0x01	; 1
     f70:	82 0f       	add	r24, r18
     f72:	93 1f       	adc	r25, r19
     f74:	20 91 27 04 	lds	r18, 0x0427
     f78:	30 91 28 04 	lds	r19, 0x0428
     f7c:	28 17       	cp	r18, r24
     f7e:	39 07       	cpc	r19, r25
     f80:	69 f5       	brne	.+90     	; 0xfdc <free+0x9c>
     f82:	b0 93 28 04 	sts	0x0428, r27
     f86:	a0 93 27 04 	sts	0x0427, r26
     f8a:	6e c0       	rjmp	.+220    	; 0x1068 <free+0x128>
     f8c:	fb 01       	movw	r30, r22
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <free+0x56>
     f94:	fc 01       	movw	r30, r24
     f96:	ea 17       	cp	r30, r26
     f98:	fb 07       	cpc	r31, r27
     f9a:	30 f4       	brcc	.+12     	; 0xfa8 <free+0x68>
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	93 81       	ldd	r25, Z+3	; 0x03
     fa0:	af 01       	movw	r20, r30
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	b9 f7       	brne	.-18     	; 0xf94 <free+0x54>
     fa6:	1f c0       	rjmp	.+62     	; 0xfe6 <free+0xa6>
     fa8:	e9 01       	movw	r28, r18
     faa:	22 97       	sbiw	r28, 0x02	; 2
     fac:	fb 83       	std	Y+3, r31	; 0x03
     fae:	ea 83       	std	Y+2, r30	; 0x02
     fb0:	08 81       	ld	r16, Y
     fb2:	19 81       	ldd	r17, Y+1	; 0x01
     fb4:	c9 01       	movw	r24, r18
     fb6:	80 0f       	add	r24, r16
     fb8:	91 1f       	adc	r25, r17
     fba:	8e 17       	cp	r24, r30
     fbc:	9f 07       	cpc	r25, r31
     fbe:	59 f4       	brne	.+22     	; 0xfd6 <free+0x96>
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	80 0f       	add	r24, r16
     fc6:	91 1f       	adc	r25, r17
     fc8:	02 96       	adiw	r24, 0x02	; 2
     fca:	99 83       	std	Y+1, r25	; 0x01
     fcc:	88 83       	st	Y, r24
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	9b 83       	std	Y+3, r25	; 0x03
     fd4:	8a 83       	std	Y+2, r24	; 0x02
     fd6:	41 15       	cp	r20, r1
     fd8:	51 05       	cpc	r21, r1
     fda:	29 f4       	brne	.+10     	; 0xfe6 <free+0xa6>
     fdc:	b0 93 2a 04 	sts	0x042A, r27
     fe0:	a0 93 29 04 	sts	0x0429, r26
     fe4:	41 c0       	rjmp	.+130    	; 0x1068 <free+0x128>
     fe6:	fa 01       	movw	r30, r20
     fe8:	b3 83       	std	Z+3, r27	; 0x03
     fea:	a2 83       	std	Z+2, r26	; 0x02
     fec:	c1 91       	ld	r28, Z+
     fee:	d1 91       	ld	r29, Z+
     ff0:	ec 0f       	add	r30, r28
     ff2:	fd 1f       	adc	r31, r29
     ff4:	ae 17       	cp	r26, r30
     ff6:	bf 07       	cpc	r27, r31
     ff8:	81 f4       	brne	.+32     	; 0x101a <free+0xda>
     ffa:	f9 01       	movw	r30, r18
     ffc:	92 91       	ld	r25, -Z
     ffe:	82 91       	ld	r24, -Z
    1000:	8c 0f       	add	r24, r28
    1002:	9d 1f       	adc	r25, r29
    1004:	02 96       	adiw	r24, 0x02	; 2
    1006:	da 01       	movw	r26, r20
    1008:	11 96       	adiw	r26, 0x01	; 1
    100a:	9c 93       	st	X, r25
    100c:	8e 93       	st	-X, r24
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	13 96       	adiw	r26, 0x03	; 3
    1014:	9c 93       	st	X, r25
    1016:	8e 93       	st	-X, r24
    1018:	12 97       	sbiw	r26, 0x02	; 2
    101a:	e0 e0       	ldi	r30, 0x00	; 0
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <free+0xe4>
    1020:	fb 01       	movw	r30, r22
    1022:	bc 01       	movw	r22, r24
    1024:	db 01       	movw	r26, r22
    1026:	12 96       	adiw	r26, 0x02	; 2
    1028:	8d 91       	ld	r24, X+
    102a:	9c 91       	ld	r25, X
    102c:	13 97       	sbiw	r26, 0x03	; 3
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	b9 f7       	brne	.-18     	; 0x1020 <free+0xe0>
    1032:	cb 01       	movw	r24, r22
    1034:	02 96       	adiw	r24, 0x02	; 2
    1036:	2d 91       	ld	r18, X+
    1038:	3c 91       	ld	r19, X
    103a:	11 97       	sbiw	r26, 0x01	; 1
    103c:	82 0f       	add	r24, r18
    103e:	93 1f       	adc	r25, r19
    1040:	20 91 27 04 	lds	r18, 0x0427
    1044:	30 91 28 04 	lds	r19, 0x0428
    1048:	28 17       	cp	r18, r24
    104a:	39 07       	cpc	r19, r25
    104c:	69 f4       	brne	.+26     	; 0x1068 <free+0x128>
    104e:	30 97       	sbiw	r30, 0x00	; 0
    1050:	29 f4       	brne	.+10     	; 0x105c <free+0x11c>
    1052:	10 92 2a 04 	sts	0x042A, r1
    1056:	10 92 29 04 	sts	0x0429, r1
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <free+0x120>
    105c:	13 82       	std	Z+3, r1	; 0x03
    105e:	12 82       	std	Z+2, r1	; 0x02
    1060:	70 93 28 04 	sts	0x0428, r23
    1064:	60 93 27 04 	sts	0x0427, r22
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <atoi>:
    1072:	fc 01       	movw	r30, r24
    1074:	88 27       	eor	r24, r24
    1076:	99 27       	eor	r25, r25
    1078:	e8 94       	clt
    107a:	21 91       	ld	r18, Z+
    107c:	20 32       	cpi	r18, 0x20	; 32
    107e:	e9 f3       	breq	.-6      	; 0x107a <atoi+0x8>
    1080:	29 30       	cpi	r18, 0x09	; 9
    1082:	10 f0       	brcs	.+4      	; 0x1088 <atoi+0x16>
    1084:	2e 30       	cpi	r18, 0x0E	; 14
    1086:	c8 f3       	brcs	.-14     	; 0x107a <atoi+0x8>
    1088:	2b 32       	cpi	r18, 0x2B	; 43
    108a:	41 f0       	breq	.+16     	; 0x109c <atoi+0x2a>
    108c:	2d 32       	cpi	r18, 0x2D	; 45
    108e:	39 f4       	brne	.+14     	; 0x109e <atoi+0x2c>
    1090:	68 94       	set
    1092:	04 c0       	rjmp	.+8      	; 0x109c <atoi+0x2a>
    1094:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulhi_const_10>
    1098:	82 0f       	add	r24, r18
    109a:	91 1d       	adc	r25, r1
    109c:	21 91       	ld	r18, Z+
    109e:	20 53       	subi	r18, 0x30	; 48
    10a0:	2a 30       	cpi	r18, 0x0A	; 10
    10a2:	c0 f3       	brcs	.-16     	; 0x1094 <atoi+0x22>
    10a4:	1e f4       	brtc	.+6      	; 0x10ac <atoi+0x3a>
    10a6:	90 95       	com	r25
    10a8:	81 95       	neg	r24
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <strtok>:
    10ae:	48 ef       	ldi	r20, 0xF8	; 248
    10b0:	52 e0       	ldi	r21, 0x02	; 2
    10b2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <strtok_r>
    10b6:	08 95       	ret

000010b8 <strcmp>:
    10b8:	fb 01       	movw	r30, r22
    10ba:	dc 01       	movw	r26, r24
    10bc:	8d 91       	ld	r24, X+
    10be:	01 90       	ld	r0, Z+
    10c0:	80 19       	sub	r24, r0
    10c2:	01 10       	cpse	r0, r1
    10c4:	d9 f3       	breq	.-10     	; 0x10bc <strcmp+0x4>
    10c6:	99 0b       	sbc	r25, r25
    10c8:	08 95       	ret

000010ca <strcpy>:
    10ca:	fb 01       	movw	r30, r22
    10cc:	dc 01       	movw	r26, r24
    10ce:	01 90       	ld	r0, Z+
    10d0:	0d 92       	st	X+, r0
    10d2:	00 20       	and	r0, r0
    10d4:	e1 f7       	brne	.-8      	; 0x10ce <strcpy+0x4>
    10d6:	08 95       	ret

000010d8 <strtok_r>:
    10d8:	fa 01       	movw	r30, r20
    10da:	a1 91       	ld	r26, Z+
    10dc:	b0 81       	ld	r27, Z
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	19 f4       	brne	.+6      	; 0x10e8 <strtok_r+0x10>
    10e2:	10 97       	sbiw	r26, 0x00	; 0
    10e4:	e1 f0       	breq	.+56     	; 0x111e <strtok_r+0x46>
    10e6:	cd 01       	movw	r24, r26
    10e8:	dc 01       	movw	r26, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0d 90       	ld	r0, X+
    10ee:	00 20       	and	r0, r0
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <strtok_r+0x1e>
    10f2:	c0 01       	movw	r24, r0
    10f4:	13 c0       	rjmp	.+38     	; 0x111c <strtok_r+0x44>
    10f6:	fb 01       	movw	r30, r22
    10f8:	21 91       	ld	r18, Z+
    10fa:	22 23       	and	r18, r18
    10fc:	19 f0       	breq	.+6      	; 0x1104 <strtok_r+0x2c>
    10fe:	20 15       	cp	r18, r0
    1100:	d9 f7       	brne	.-10     	; 0x10f8 <strtok_r+0x20>
    1102:	f3 cf       	rjmp	.-26     	; 0x10ea <strtok_r+0x12>
    1104:	fb 01       	movw	r30, r22
    1106:	21 91       	ld	r18, Z+
    1108:	20 15       	cp	r18, r0
    110a:	19 f4       	brne	.+6      	; 0x1112 <strtok_r+0x3a>
    110c:	1e 92       	st	-X, r1
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	06 c0       	rjmp	.+12     	; 0x111e <strtok_r+0x46>
    1112:	22 23       	and	r18, r18
    1114:	c1 f7       	brne	.-16     	; 0x1106 <strtok_r+0x2e>
    1116:	0d 90       	ld	r0, X+
    1118:	00 20       	and	r0, r0
    111a:	a1 f7       	brne	.-24     	; 0x1104 <strtok_r+0x2c>
    111c:	d0 01       	movw	r26, r0
    111e:	fa 01       	movw	r30, r20
    1120:	a1 93       	st	Z+, r26
    1122:	b0 83       	st	Z, r27
    1124:	08 95       	ret

00001126 <__mulhi_const_10>:
    1126:	7a e0       	ldi	r23, 0x0A	; 10
    1128:	97 9f       	mul	r25, r23
    112a:	90 2d       	mov	r25, r0
    112c:	87 9f       	mul	r24, r23
    112e:	80 2d       	mov	r24, r0
    1130:	91 0d       	add	r25, r1
    1132:	11 24       	eor	r1, r1
    1134:	08 95       	ret

00001136 <fgets>:
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	8c 01       	movw	r16, r24
    1148:	6a 01       	movw	r12, r20
    114a:	fa 01       	movw	r30, r20
    114c:	83 81       	ldd	r24, Z+3	; 0x03
    114e:	80 ff       	sbrs	r24, 0
    1150:	1a c0       	rjmp	.+52     	; 0x1186 <fgets+0x50>
    1152:	16 16       	cp	r1, r22
    1154:	17 06       	cpc	r1, r23
    1156:	bc f4       	brge	.+46     	; 0x1186 <fgets+0x50>
    1158:	7b 01       	movw	r14, r22
    115a:	e8 01       	movw	r28, r16
    115c:	0e c0       	rjmp	.+28     	; 0x117a <fgets+0x44>
    115e:	c6 01       	movw	r24, r12
    1160:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <fgetc>
    1164:	ff ef       	ldi	r31, 0xFF	; 255
    1166:	8f 3f       	cpi	r24, 0xFF	; 255
    1168:	9f 07       	cpc	r25, r31
    116a:	69 f0       	breq	.+26     	; 0x1186 <fgets+0x50>
    116c:	89 93       	st	Y+, r24
    116e:	08 94       	sec
    1170:	e1 08       	sbc	r14, r1
    1172:	f1 08       	sbc	r15, r1
    1174:	8a 30       	cpi	r24, 0x0A	; 10
    1176:	91 05       	cpc	r25, r1
    1178:	21 f0       	breq	.+8      	; 0x1182 <fgets+0x4c>
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	e2 16       	cp	r14, r18
    117e:	f1 04       	cpc	r15, r1
    1180:	71 f7       	brne	.-36     	; 0x115e <fgets+0x28>
    1182:	18 82       	st	Y, r1
    1184:	02 c0       	rjmp	.+4      	; 0x118a <fgets+0x54>
    1186:	00 e0       	ldi	r16, 0x00	; 0
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	c8 01       	movw	r24, r16
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	df 90       	pop	r13
    119a:	cf 90       	pop	r12
    119c:	08 95       	ret

0000119e <gets>:
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	8c 01       	movw	r16, r24
    11a8:	e0 91 2b 04 	lds	r30, 0x042B
    11ac:	f0 91 2c 04 	lds	r31, 0x042C
    11b0:	83 81       	ldd	r24, Z+3	; 0x03
    11b2:	80 ff       	sbrs	r24, 0
    11b4:	12 c0       	rjmp	.+36     	; 0x11da <gets+0x3c>
    11b6:	e8 01       	movw	r28, r16
    11b8:	80 91 2b 04 	lds	r24, 0x042B
    11bc:	90 91 2c 04 	lds	r25, 0x042C
    11c0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <fgetc>
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	8f 3f       	cpi	r24, 0xFF	; 255
    11c8:	92 07       	cpc	r25, r18
    11ca:	39 f0       	breq	.+14     	; 0x11da <gets+0x3c>
    11cc:	89 93       	st	Y+, r24
    11ce:	8a 30       	cpi	r24, 0x0A	; 10
    11d0:	91 05       	cpc	r25, r1
    11d2:	91 f7       	brne	.-28     	; 0x11b8 <gets+0x1a>
    11d4:	21 97       	sbiw	r28, 0x01	; 1
    11d6:	18 82       	st	Y, r1
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <gets+0x40>
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
    11de:	c8 01       	movw	r24, r16
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <printf>:
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	fe 01       	movw	r30, r28
    11f4:	36 96       	adiw	r30, 0x06	; 6
    11f6:	61 91       	ld	r22, Z+
    11f8:	71 91       	ld	r23, Z+
    11fa:	80 91 2d 04 	lds	r24, 0x042D
    11fe:	90 91 2e 04 	lds	r25, 0x042E
    1202:	af 01       	movw	r20, r30
    1204:	0e 94 3c 09 	call	0x1278	; 0x1278 <vfprintf>
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <putchar>:
    120e:	60 91 2d 04 	lds	r22, 0x042D
    1212:	70 91 2e 04 	lds	r23, 0x042E
    1216:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    121a:	08 95       	ret

0000121c <puts>:
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	8c 01       	movw	r16, r24
    1226:	e0 91 2d 04 	lds	r30, 0x042D
    122a:	f0 91 2e 04 	lds	r31, 0x042E
    122e:	83 81       	ldd	r24, Z+3	; 0x03
    1230:	81 ff       	sbrs	r24, 1
    1232:	1a c0       	rjmp	.+52     	; 0x1268 <puts+0x4c>
    1234:	c0 e0       	ldi	r28, 0x00	; 0
    1236:	d0 e0       	ldi	r29, 0x00	; 0
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <puts+0x28>
    123a:	19 95       	eicall
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	11 f0       	breq	.+4      	; 0x1244 <puts+0x28>
    1240:	cf ef       	ldi	r28, 0xFF	; 255
    1242:	df ef       	ldi	r29, 0xFF	; 255
    1244:	f8 01       	movw	r30, r16
    1246:	81 91       	ld	r24, Z+
    1248:	8f 01       	movw	r16, r30
    124a:	60 91 2d 04 	lds	r22, 0x042D
    124e:	70 91 2e 04 	lds	r23, 0x042E
    1252:	db 01       	movw	r26, r22
    1254:	18 96       	adiw	r26, 0x08	; 8
    1256:	ed 91       	ld	r30, X+
    1258:	fc 91       	ld	r31, X
    125a:	19 97       	sbiw	r26, 0x09	; 9
    125c:	88 23       	and	r24, r24
    125e:	69 f7       	brne	.-38     	; 0x123a <puts+0x1e>
    1260:	8a e0       	ldi	r24, 0x0A	; 10
    1262:	19 95       	eicall
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	11 f0       	breq	.+4      	; 0x126c <puts+0x50>
    1268:	cf ef       	ldi	r28, 0xFF	; 255
    126a:	df ef       	ldi	r29, 0xFF	; 255
    126c:	ce 01       	movw	r24, r28
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <vfprintf>:
    1278:	2f 92       	push	r2
    127a:	3f 92       	push	r3
    127c:	4f 92       	push	r4
    127e:	5f 92       	push	r5
    1280:	6f 92       	push	r6
    1282:	7f 92       	push	r7
    1284:	8f 92       	push	r8
    1286:	9f 92       	push	r9
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	2d 97       	sbiw	r28, 0x0d	; 13
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	3c 01       	movw	r6, r24
    12ae:	7d 87       	std	Y+13, r23	; 0x0d
    12b0:	6c 87       	std	Y+12, r22	; 0x0c
    12b2:	5a 01       	movw	r10, r20
    12b4:	fc 01       	movw	r30, r24
    12b6:	17 82       	std	Z+7, r1	; 0x07
    12b8:	16 82       	std	Z+6, r1	; 0x06
    12ba:	83 81       	ldd	r24, Z+3	; 0x03
    12bc:	81 ff       	sbrs	r24, 1
    12be:	c8 c1       	rjmp	.+912    	; 0x1650 <vfprintf+0x3d8>
    12c0:	2e 01       	movw	r4, r28
    12c2:	08 94       	sec
    12c4:	41 1c       	adc	r4, r1
    12c6:	51 1c       	adc	r5, r1
    12c8:	f3 01       	movw	r30, r6
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    12ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    12d0:	93 fd       	sbrc	r25, 3
    12d2:	85 91       	lpm	r24, Z+
    12d4:	93 ff       	sbrs	r25, 3
    12d6:	81 91       	ld	r24, Z+
    12d8:	fd 87       	std	Y+13, r31	; 0x0d
    12da:	ec 87       	std	Y+12, r30	; 0x0c
    12dc:	88 23       	and	r24, r24
    12de:	09 f4       	brne	.+2      	; 0x12e2 <vfprintf+0x6a>
    12e0:	b3 c1       	rjmp	.+870    	; 0x1648 <vfprintf+0x3d0>
    12e2:	85 32       	cpi	r24, 0x25	; 37
    12e4:	41 f4       	brne	.+16     	; 0x12f6 <vfprintf+0x7e>
    12e6:	93 fd       	sbrc	r25, 3
    12e8:	85 91       	lpm	r24, Z+
    12ea:	93 ff       	sbrs	r25, 3
    12ec:	81 91       	ld	r24, Z+
    12ee:	fd 87       	std	Y+13, r31	; 0x0d
    12f0:	ec 87       	std	Y+12, r30	; 0x0c
    12f2:	85 32       	cpi	r24, 0x25	; 37
    12f4:	29 f4       	brne	.+10     	; 0x1300 <vfprintf+0x88>
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	b3 01       	movw	r22, r6
    12fa:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    12fe:	e4 cf       	rjmp	.-56     	; 0x12c8 <vfprintf+0x50>
    1300:	ff 24       	eor	r15, r15
    1302:	ee 24       	eor	r14, r14
    1304:	10 e0       	ldi	r17, 0x00	; 0
    1306:	10 32       	cpi	r17, 0x20	; 32
    1308:	b0 f4       	brcc	.+44     	; 0x1336 <vfprintf+0xbe>
    130a:	8b 32       	cpi	r24, 0x2B	; 43
    130c:	69 f0       	breq	.+26     	; 0x1328 <vfprintf+0xb0>
    130e:	8c 32       	cpi	r24, 0x2C	; 44
    1310:	28 f4       	brcc	.+10     	; 0x131c <vfprintf+0xa4>
    1312:	80 32       	cpi	r24, 0x20	; 32
    1314:	51 f0       	breq	.+20     	; 0x132a <vfprintf+0xb2>
    1316:	83 32       	cpi	r24, 0x23	; 35
    1318:	71 f4       	brne	.+28     	; 0x1336 <vfprintf+0xbe>
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <vfprintf+0xba>
    131c:	8d 32       	cpi	r24, 0x2D	; 45
    131e:	39 f0       	breq	.+14     	; 0x132e <vfprintf+0xb6>
    1320:	80 33       	cpi	r24, 0x30	; 48
    1322:	49 f4       	brne	.+18     	; 0x1336 <vfprintf+0xbe>
    1324:	11 60       	ori	r17, 0x01	; 1
    1326:	2c c0       	rjmp	.+88     	; 0x1380 <vfprintf+0x108>
    1328:	12 60       	ori	r17, 0x02	; 2
    132a:	14 60       	ori	r17, 0x04	; 4
    132c:	29 c0       	rjmp	.+82     	; 0x1380 <vfprintf+0x108>
    132e:	18 60       	ori	r17, 0x08	; 8
    1330:	27 c0       	rjmp	.+78     	; 0x1380 <vfprintf+0x108>
    1332:	10 61       	ori	r17, 0x10	; 16
    1334:	25 c0       	rjmp	.+74     	; 0x1380 <vfprintf+0x108>
    1336:	17 fd       	sbrc	r17, 7
    1338:	2e c0       	rjmp	.+92     	; 0x1396 <vfprintf+0x11e>
    133a:	28 2f       	mov	r18, r24
    133c:	20 53       	subi	r18, 0x30	; 48
    133e:	2a 30       	cpi	r18, 0x0A	; 10
    1340:	98 f4       	brcc	.+38     	; 0x1368 <vfprintf+0xf0>
    1342:	16 ff       	sbrs	r17, 6
    1344:	08 c0       	rjmp	.+16     	; 0x1356 <vfprintf+0xde>
    1346:	8f 2d       	mov	r24, r15
    1348:	88 0f       	add	r24, r24
    134a:	f8 2e       	mov	r15, r24
    134c:	ff 0c       	add	r15, r15
    134e:	ff 0c       	add	r15, r15
    1350:	f8 0e       	add	r15, r24
    1352:	f2 0e       	add	r15, r18
    1354:	15 c0       	rjmp	.+42     	; 0x1380 <vfprintf+0x108>
    1356:	8e 2d       	mov	r24, r14
    1358:	88 0f       	add	r24, r24
    135a:	e8 2e       	mov	r14, r24
    135c:	ee 0c       	add	r14, r14
    135e:	ee 0c       	add	r14, r14
    1360:	e8 0e       	add	r14, r24
    1362:	e2 0e       	add	r14, r18
    1364:	10 62       	ori	r17, 0x20	; 32
    1366:	0c c0       	rjmp	.+24     	; 0x1380 <vfprintf+0x108>
    1368:	8e 32       	cpi	r24, 0x2E	; 46
    136a:	21 f4       	brne	.+8      	; 0x1374 <vfprintf+0xfc>
    136c:	16 fd       	sbrc	r17, 6
    136e:	6c c1       	rjmp	.+728    	; 0x1648 <vfprintf+0x3d0>
    1370:	10 64       	ori	r17, 0x40	; 64
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <vfprintf+0x108>
    1374:	8c 36       	cpi	r24, 0x6C	; 108
    1376:	11 f4       	brne	.+4      	; 0x137c <vfprintf+0x104>
    1378:	10 68       	ori	r17, 0x80	; 128
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x108>
    137c:	88 36       	cpi	r24, 0x68	; 104
    137e:	59 f4       	brne	.+22     	; 0x1396 <vfprintf+0x11e>
    1380:	ec 85       	ldd	r30, Y+12	; 0x0c
    1382:	fd 85       	ldd	r31, Y+13	; 0x0d
    1384:	93 fd       	sbrc	r25, 3
    1386:	85 91       	lpm	r24, Z+
    1388:	93 ff       	sbrs	r25, 3
    138a:	81 91       	ld	r24, Z+
    138c:	fd 87       	std	Y+13, r31	; 0x0d
    138e:	ec 87       	std	Y+12, r30	; 0x0c
    1390:	88 23       	and	r24, r24
    1392:	09 f0       	breq	.+2      	; 0x1396 <vfprintf+0x11e>
    1394:	b8 cf       	rjmp	.-144    	; 0x1306 <vfprintf+0x8e>
    1396:	98 2f       	mov	r25, r24
    1398:	95 54       	subi	r25, 0x45	; 69
    139a:	93 30       	cpi	r25, 0x03	; 3
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <vfprintf+0x12c>
    139e:	90 52       	subi	r25, 0x20	; 32
    13a0:	93 30       	cpi	r25, 0x03	; 3
    13a2:	38 f4       	brcc	.+14     	; 0x13b2 <vfprintf+0x13a>
    13a4:	24 e0       	ldi	r18, 0x04	; 4
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	a2 0e       	add	r10, r18
    13aa:	b3 1e       	adc	r11, r19
    13ac:	3f e3       	ldi	r19, 0x3F	; 63
    13ae:	39 83       	std	Y+1, r19	; 0x01
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <vfprintf+0x158>
    13b2:	83 36       	cpi	r24, 0x63	; 99
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <vfprintf+0x14a>
    13b6:	83 37       	cpi	r24, 0x73	; 115
    13b8:	81 f0       	breq	.+32     	; 0x13da <vfprintf+0x162>
    13ba:	83 35       	cpi	r24, 0x53	; 83
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <vfprintf+0x148>
    13be:	5a c0       	rjmp	.+180    	; 0x1474 <vfprintf+0x1fc>
    13c0:	22 c0       	rjmp	.+68     	; 0x1406 <vfprintf+0x18e>
    13c2:	f5 01       	movw	r30, r10
    13c4:	80 81       	ld	r24, Z
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	22 e0       	ldi	r18, 0x02	; 2
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	a2 0e       	add	r10, r18
    13ce:	b3 1e       	adc	r11, r19
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	c2 2e       	mov	r12, r18
    13d4:	d1 2c       	mov	r13, r1
    13d6:	42 01       	movw	r8, r4
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <vfprintf+0x18a>
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	29 2e       	mov	r2, r25
    13de:	31 2c       	mov	r3, r1
    13e0:	2a 0c       	add	r2, r10
    13e2:	3b 1c       	adc	r3, r11
    13e4:	f5 01       	movw	r30, r10
    13e6:	80 80       	ld	r8, Z
    13e8:	91 80       	ldd	r9, Z+1	; 0x01
    13ea:	16 ff       	sbrs	r17, 6
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <vfprintf+0x17c>
    13ee:	6f 2d       	mov	r22, r15
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <vfprintf+0x180>
    13f4:	6f ef       	ldi	r22, 0xFF	; 255
    13f6:	7f ef       	ldi	r23, 0xFF	; 255
    13f8:	c4 01       	movw	r24, r8
    13fa:	0e 94 4e 0b 	call	0x169c	; 0x169c <strnlen>
    13fe:	6c 01       	movw	r12, r24
    1400:	51 01       	movw	r10, r2
    1402:	1f 77       	andi	r17, 0x7F	; 127
    1404:	15 c0       	rjmp	.+42     	; 0x1430 <vfprintf+0x1b8>
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	28 2e       	mov	r2, r24
    140a:	31 2c       	mov	r3, r1
    140c:	2a 0c       	add	r2, r10
    140e:	3b 1c       	adc	r3, r11
    1410:	f5 01       	movw	r30, r10
    1412:	80 80       	ld	r8, Z
    1414:	91 80       	ldd	r9, Z+1	; 0x01
    1416:	16 ff       	sbrs	r17, 6
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <vfprintf+0x1a8>
    141a:	6f 2d       	mov	r22, r15
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <vfprintf+0x1ac>
    1420:	6f ef       	ldi	r22, 0xFF	; 255
    1422:	7f ef       	ldi	r23, 0xFF	; 255
    1424:	c4 01       	movw	r24, r8
    1426:	0e 94 43 0b 	call	0x1686	; 0x1686 <strnlen_P>
    142a:	6c 01       	movw	r12, r24
    142c:	10 68       	ori	r17, 0x80	; 128
    142e:	51 01       	movw	r10, r2
    1430:	13 fd       	sbrc	r17, 3
    1432:	1c c0       	rjmp	.+56     	; 0x146c <vfprintf+0x1f4>
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0x1ca>
    1436:	80 e2       	ldi	r24, 0x20	; 32
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	b3 01       	movw	r22, r6
    143c:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1440:	ea 94       	dec	r14
    1442:	8e 2d       	mov	r24, r14
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	c8 16       	cp	r12, r24
    1448:	d9 06       	cpc	r13, r25
    144a:	a8 f3       	brcs	.-22     	; 0x1436 <vfprintf+0x1be>
    144c:	0f c0       	rjmp	.+30     	; 0x146c <vfprintf+0x1f4>
    144e:	f4 01       	movw	r30, r8
    1450:	17 fd       	sbrc	r17, 7
    1452:	85 91       	lpm	r24, Z+
    1454:	17 ff       	sbrs	r17, 7
    1456:	81 91       	ld	r24, Z+
    1458:	4f 01       	movw	r8, r30
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	b3 01       	movw	r22, r6
    145e:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1462:	e1 10       	cpse	r14, r1
    1464:	ea 94       	dec	r14
    1466:	08 94       	sec
    1468:	c1 08       	sbc	r12, r1
    146a:	d1 08       	sbc	r13, r1
    146c:	c1 14       	cp	r12, r1
    146e:	d1 04       	cpc	r13, r1
    1470:	71 f7       	brne	.-36     	; 0x144e <vfprintf+0x1d6>
    1472:	e7 c0       	rjmp	.+462    	; 0x1642 <vfprintf+0x3ca>
    1474:	84 36       	cpi	r24, 0x64	; 100
    1476:	11 f0       	breq	.+4      	; 0x147c <vfprintf+0x204>
    1478:	89 36       	cpi	r24, 0x69	; 105
    147a:	51 f5       	brne	.+84     	; 0x14d0 <vfprintf+0x258>
    147c:	f5 01       	movw	r30, r10
    147e:	17 ff       	sbrs	r17, 7
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <vfprintf+0x218>
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	a2 81       	ldd	r26, Z+2	; 0x02
    1488:	b3 81       	ldd	r27, Z+3	; 0x03
    148a:	24 e0       	ldi	r18, 0x04	; 4
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	08 c0       	rjmp	.+16     	; 0x14a0 <vfprintf+0x228>
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	aa 27       	eor	r26, r26
    1496:	97 fd       	sbrc	r25, 7
    1498:	a0 95       	com	r26
    149a:	ba 2f       	mov	r27, r26
    149c:	22 e0       	ldi	r18, 0x02	; 2
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	a2 0e       	add	r10, r18
    14a2:	b3 1e       	adc	r11, r19
    14a4:	01 2f       	mov	r16, r17
    14a6:	0f 76       	andi	r16, 0x6F	; 111
    14a8:	b7 ff       	sbrs	r27, 7
    14aa:	08 c0       	rjmp	.+16     	; 0x14bc <vfprintf+0x244>
    14ac:	b0 95       	com	r27
    14ae:	a0 95       	com	r26
    14b0:	90 95       	com	r25
    14b2:	81 95       	neg	r24
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	af 4f       	sbci	r26, 0xFF	; 255
    14b8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ba:	00 68       	ori	r16, 0x80	; 128
    14bc:	bc 01       	movw	r22, r24
    14be:	cd 01       	movw	r24, r26
    14c0:	a2 01       	movw	r20, r4
    14c2:	2a e0       	ldi	r18, 0x0A	; 10
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	0e 94 c5 0b 	call	0x178a	; 0x178a <__ultoa_invert>
    14ca:	d8 2e       	mov	r13, r24
    14cc:	d4 18       	sub	r13, r4
    14ce:	3f c0       	rjmp	.+126    	; 0x154e <vfprintf+0x2d6>
    14d0:	85 37       	cpi	r24, 0x75	; 117
    14d2:	21 f4       	brne	.+8      	; 0x14dc <vfprintf+0x264>
    14d4:	1f 7e       	andi	r17, 0xEF	; 239
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	20 c0       	rjmp	.+64     	; 0x151c <vfprintf+0x2a4>
    14dc:	19 7f       	andi	r17, 0xF9	; 249
    14de:	8f 36       	cpi	r24, 0x6F	; 111
    14e0:	a9 f0       	breq	.+42     	; 0x150c <vfprintf+0x294>
    14e2:	80 37       	cpi	r24, 0x70	; 112
    14e4:	20 f4       	brcc	.+8      	; 0x14ee <vfprintf+0x276>
    14e6:	88 35       	cpi	r24, 0x58	; 88
    14e8:	09 f0       	breq	.+2      	; 0x14ec <vfprintf+0x274>
    14ea:	ae c0       	rjmp	.+348    	; 0x1648 <vfprintf+0x3d0>
    14ec:	0b c0       	rjmp	.+22     	; 0x1504 <vfprintf+0x28c>
    14ee:	80 37       	cpi	r24, 0x70	; 112
    14f0:	21 f0       	breq	.+8      	; 0x14fa <vfprintf+0x282>
    14f2:	88 37       	cpi	r24, 0x78	; 120
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <vfprintf+0x280>
    14f6:	a8 c0       	rjmp	.+336    	; 0x1648 <vfprintf+0x3d0>
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <vfprintf+0x284>
    14fa:	10 61       	ori	r17, 0x10	; 16
    14fc:	14 ff       	sbrs	r17, 4
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <vfprintf+0x29a>
    1500:	14 60       	ori	r17, 0x04	; 4
    1502:	07 c0       	rjmp	.+14     	; 0x1512 <vfprintf+0x29a>
    1504:	14 ff       	sbrs	r17, 4
    1506:	08 c0       	rjmp	.+16     	; 0x1518 <vfprintf+0x2a0>
    1508:	16 60       	ori	r17, 0x06	; 6
    150a:	06 c0       	rjmp	.+12     	; 0x1518 <vfprintf+0x2a0>
    150c:	28 e0       	ldi	r18, 0x08	; 8
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	05 c0       	rjmp	.+10     	; 0x151c <vfprintf+0x2a4>
    1512:	20 e1       	ldi	r18, 0x10	; 16
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0x2a4>
    1518:	20 e1       	ldi	r18, 0x10	; 16
    151a:	32 e0       	ldi	r19, 0x02	; 2
    151c:	f5 01       	movw	r30, r10
    151e:	17 ff       	sbrs	r17, 7
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <vfprintf+0x2b8>
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	06 c0       	rjmp	.+12     	; 0x153c <vfprintf+0x2c4>
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	42 e0       	ldi	r20, 0x02	; 2
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	a4 0e       	add	r10, r20
    153e:	b5 1e       	adc	r11, r21
    1540:	a2 01       	movw	r20, r4
    1542:	0e 94 c5 0b 	call	0x178a	; 0x178a <__ultoa_invert>
    1546:	d8 2e       	mov	r13, r24
    1548:	d4 18       	sub	r13, r4
    154a:	01 2f       	mov	r16, r17
    154c:	0f 77       	andi	r16, 0x7F	; 127
    154e:	06 ff       	sbrs	r16, 6
    1550:	09 c0       	rjmp	.+18     	; 0x1564 <vfprintf+0x2ec>
    1552:	0e 7f       	andi	r16, 0xFE	; 254
    1554:	df 14       	cp	r13, r15
    1556:	30 f4       	brcc	.+12     	; 0x1564 <vfprintf+0x2ec>
    1558:	04 ff       	sbrs	r16, 4
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x2f0>
    155c:	02 fd       	sbrc	r16, 2
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <vfprintf+0x2f0>
    1560:	0f 7e       	andi	r16, 0xEF	; 239
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x2f0>
    1564:	1d 2d       	mov	r17, r13
    1566:	01 c0       	rjmp	.+2      	; 0x156a <vfprintf+0x2f2>
    1568:	1f 2d       	mov	r17, r15
    156a:	80 2f       	mov	r24, r16
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	04 ff       	sbrs	r16, 4
    1570:	0c c0       	rjmp	.+24     	; 0x158a <vfprintf+0x312>
    1572:	fe 01       	movw	r30, r28
    1574:	ed 0d       	add	r30, r13
    1576:	f1 1d       	adc	r31, r1
    1578:	20 81       	ld	r18, Z
    157a:	20 33       	cpi	r18, 0x30	; 48
    157c:	11 f4       	brne	.+4      	; 0x1582 <vfprintf+0x30a>
    157e:	09 7e       	andi	r16, 0xE9	; 233
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <vfprintf+0x31c>
    1582:	02 ff       	sbrs	r16, 2
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <vfprintf+0x31a>
    1586:	1e 5f       	subi	r17, 0xFE	; 254
    1588:	05 c0       	rjmp	.+10     	; 0x1594 <vfprintf+0x31c>
    158a:	86 78       	andi	r24, 0x86	; 134
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <vfprintf+0x31c>
    1592:	1f 5f       	subi	r17, 0xFF	; 255
    1594:	80 2e       	mov	r8, r16
    1596:	99 24       	eor	r9, r9
    1598:	03 fd       	sbrc	r16, 3
    159a:	12 c0       	rjmp	.+36     	; 0x15c0 <vfprintf+0x348>
    159c:	00 ff       	sbrs	r16, 0
    159e:	0d c0       	rjmp	.+26     	; 0x15ba <vfprintf+0x342>
    15a0:	fd 2c       	mov	r15, r13
    15a2:	1e 15       	cp	r17, r14
    15a4:	50 f4       	brcc	.+20     	; 0x15ba <vfprintf+0x342>
    15a6:	fe 0c       	add	r15, r14
    15a8:	f1 1a       	sub	r15, r17
    15aa:	1e 2d       	mov	r17, r14
    15ac:	06 c0       	rjmp	.+12     	; 0x15ba <vfprintf+0x342>
    15ae:	80 e2       	ldi	r24, 0x20	; 32
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	b3 01       	movw	r22, r6
    15b4:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    15b8:	1f 5f       	subi	r17, 0xFF	; 255
    15ba:	1e 15       	cp	r17, r14
    15bc:	c0 f3       	brcs	.-16     	; 0x15ae <vfprintf+0x336>
    15be:	04 c0       	rjmp	.+8      	; 0x15c8 <vfprintf+0x350>
    15c0:	1e 15       	cp	r17, r14
    15c2:	10 f4       	brcc	.+4      	; 0x15c8 <vfprintf+0x350>
    15c4:	e1 1a       	sub	r14, r17
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <vfprintf+0x352>
    15c8:	ee 24       	eor	r14, r14
    15ca:	84 fe       	sbrs	r8, 4
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <vfprintf+0x374>
    15ce:	80 e3       	ldi	r24, 0x30	; 48
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b3 01       	movw	r22, r6
    15d4:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    15d8:	82 fe       	sbrs	r8, 2
    15da:	1f c0       	rjmp	.+62     	; 0x161a <vfprintf+0x3a2>
    15dc:	81 fe       	sbrs	r8, 1
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <vfprintf+0x36e>
    15e0:	88 e5       	ldi	r24, 0x58	; 88
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <vfprintf+0x38e>
    15e6:	88 e7       	ldi	r24, 0x78	; 120
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <vfprintf+0x38e>
    15ec:	c4 01       	movw	r24, r8
    15ee:	86 78       	andi	r24, 0x86	; 134
    15f0:	90 70       	andi	r25, 0x00	; 0
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	91 f0       	breq	.+36     	; 0x161a <vfprintf+0x3a2>
    15f6:	81 fc       	sbrc	r8, 1
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <vfprintf+0x386>
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <vfprintf+0x388>
    15fe:	8b e2       	ldi	r24, 0x2B	; 43
    1600:	07 fd       	sbrc	r16, 7
    1602:	8d e2       	ldi	r24, 0x2D	; 45
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	b3 01       	movw	r22, r6
    1608:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    160c:	06 c0       	rjmp	.+12     	; 0x161a <vfprintf+0x3a2>
    160e:	80 e3       	ldi	r24, 0x30	; 48
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	b3 01       	movw	r22, r6
    1614:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1618:	fa 94       	dec	r15
    161a:	df 14       	cp	r13, r15
    161c:	c0 f3       	brcs	.-16     	; 0x160e <vfprintf+0x396>
    161e:	da 94       	dec	r13
    1620:	f2 01       	movw	r30, r4
    1622:	ed 0d       	add	r30, r13
    1624:	f1 1d       	adc	r31, r1
    1626:	80 81       	ld	r24, Z
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	b3 01       	movw	r22, r6
    162c:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1630:	dd 20       	and	r13, r13
    1632:	a9 f7       	brne	.-22     	; 0x161e <vfprintf+0x3a6>
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <vfprintf+0x3ca>
    1636:	80 e2       	ldi	r24, 0x20	; 32
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b3 01       	movw	r22, r6
    163c:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1640:	ea 94       	dec	r14
    1642:	ee 20       	and	r14, r14
    1644:	c1 f7       	brne	.-16     	; 0x1636 <vfprintf+0x3be>
    1646:	40 ce       	rjmp	.-896    	; 0x12c8 <vfprintf+0x50>
    1648:	f3 01       	movw	r30, r6
    164a:	86 81       	ldd	r24, Z+6	; 0x06
    164c:	97 81       	ldd	r25, Z+7	; 0x07
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x3dc>
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	9f ef       	ldi	r25, 0xFF	; 255
    1654:	2d 96       	adiw	r28, 0x0d	; 13
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	7f 90       	pop	r7
    167a:	6f 90       	pop	r6
    167c:	5f 90       	pop	r5
    167e:	4f 90       	pop	r4
    1680:	3f 90       	pop	r3
    1682:	2f 90       	pop	r2
    1684:	08 95       	ret

00001686 <strnlen_P>:
    1686:	fc 01       	movw	r30, r24
    1688:	05 90       	lpm	r0, Z+
    168a:	61 50       	subi	r22, 0x01	; 1
    168c:	70 40       	sbci	r23, 0x00	; 0
    168e:	01 10       	cpse	r0, r1
    1690:	d8 f7       	brcc	.-10     	; 0x1688 <strnlen_P+0x2>
    1692:	80 95       	com	r24
    1694:	90 95       	com	r25
    1696:	8e 0f       	add	r24, r30
    1698:	9f 1f       	adc	r25, r31
    169a:	08 95       	ret

0000169c <strnlen>:
    169c:	fc 01       	movw	r30, r24
    169e:	61 50       	subi	r22, 0x01	; 1
    16a0:	70 40       	sbci	r23, 0x00	; 0
    16a2:	01 90       	ld	r0, Z+
    16a4:	01 10       	cpse	r0, r1
    16a6:	d8 f7       	brcc	.-10     	; 0x169e <strnlen+0x2>
    16a8:	80 95       	com	r24
    16aa:	90 95       	com	r25
    16ac:	8e 0f       	add	r24, r30
    16ae:	9f 1f       	adc	r25, r31
    16b0:	08 95       	ret

000016b2 <fgetc>:
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	ec 01       	movw	r28, r24
    16b8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ba:	20 ff       	sbrs	r18, 0
    16bc:	35 c0       	rjmp	.+106    	; 0x1728 <fgetc+0x76>
    16be:	26 ff       	sbrs	r18, 6
    16c0:	09 c0       	rjmp	.+18     	; 0x16d4 <fgetc+0x22>
    16c2:	2f 7b       	andi	r18, 0xBF	; 191
    16c4:	2b 83       	std	Y+3, r18	; 0x03
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ca:	01 96       	adiw	r24, 0x01	; 1
    16cc:	9f 83       	std	Y+7, r25	; 0x07
    16ce:	8e 83       	std	Y+6, r24	; 0x06
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 c0       	rjmp	.+80     	; 0x1724 <fgetc+0x72>
    16d4:	22 ff       	sbrs	r18, 2
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <fgetc+0x44>
    16d8:	e8 81       	ld	r30, Y
    16da:	f9 81       	ldd	r31, Y+1	; 0x01
    16dc:	80 81       	ld	r24, Z
    16de:	99 27       	eor	r25, r25
    16e0:	87 fd       	sbrc	r24, 7
    16e2:	90 95       	com	r25
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	19 f4       	brne	.+6      	; 0x16ee <fgetc+0x3c>
    16e8:	20 62       	ori	r18, 0x20	; 32
    16ea:	2b 83       	std	Y+3, r18	; 0x03
    16ec:	1d c0       	rjmp	.+58     	; 0x1728 <fgetc+0x76>
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	f9 83       	std	Y+1, r31	; 0x01
    16f2:	e8 83       	st	Y, r30
    16f4:	11 c0       	rjmp	.+34     	; 0x1718 <fgetc+0x66>
    16f6:	ea 85       	ldd	r30, Y+10	; 0x0a
    16f8:	fb 85       	ldd	r31, Y+11	; 0x0b
    16fa:	ce 01       	movw	r24, r28
    16fc:	19 95       	eicall
    16fe:	97 ff       	sbrs	r25, 7
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <fgetc+0x66>
    1702:	2b 81       	ldd	r18, Y+3	; 0x03
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	8f 3f       	cpi	r24, 0xFF	; 255
    1708:	93 07       	cpc	r25, r19
    170a:	11 f4       	brne	.+4      	; 0x1710 <fgetc+0x5e>
    170c:	80 e1       	ldi	r24, 0x10	; 16
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <fgetc+0x60>
    1710:	80 e2       	ldi	r24, 0x20	; 32
    1712:	82 2b       	or	r24, r18
    1714:	8b 83       	std	Y+3, r24	; 0x03
    1716:	08 c0       	rjmp	.+16     	; 0x1728 <fgetc+0x76>
    1718:	2e 81       	ldd	r18, Y+6	; 0x06
    171a:	3f 81       	ldd	r19, Y+7	; 0x07
    171c:	2f 5f       	subi	r18, 0xFF	; 255
    171e:	3f 4f       	sbci	r19, 0xFF	; 255
    1720:	3f 83       	std	Y+7, r19	; 0x07
    1722:	2e 83       	std	Y+6, r18	; 0x06
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <fgetc+0x7a>
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	9f ef       	ldi	r25, 0xFF	; 255
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <fputc>:
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	8c 01       	movw	r16, r24
    173c:	eb 01       	movw	r28, r22
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 ff       	sbrs	r24, 1
    1742:	1b c0       	rjmp	.+54     	; 0x177a <fputc+0x48>
    1744:	82 ff       	sbrs	r24, 2
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <fputc+0x30>
    1748:	2e 81       	ldd	r18, Y+6	; 0x06
    174a:	3f 81       	ldd	r19, Y+7	; 0x07
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	28 17       	cp	r18, r24
    1752:	39 07       	cpc	r19, r25
    1754:	64 f4       	brge	.+24     	; 0x176e <fputc+0x3c>
    1756:	e8 81       	ld	r30, Y
    1758:	f9 81       	ldd	r31, Y+1	; 0x01
    175a:	01 93       	st	Z+, r16
    175c:	f9 83       	std	Y+1, r31	; 0x01
    175e:	e8 83       	st	Y, r30
    1760:	06 c0       	rjmp	.+12     	; 0x176e <fputc+0x3c>
    1762:	e8 85       	ldd	r30, Y+8	; 0x08
    1764:	f9 85       	ldd	r31, Y+9	; 0x09
    1766:	80 2f       	mov	r24, r16
    1768:	19 95       	eicall
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	31 f4       	brne	.+12     	; 0x177a <fputc+0x48>
    176e:	8e 81       	ldd	r24, Y+6	; 0x06
    1770:	9f 81       	ldd	r25, Y+7	; 0x07
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	9f 83       	std	Y+7, r25	; 0x07
    1776:	8e 83       	std	Y+6, r24	; 0x06
    1778:	02 c0       	rjmp	.+4      	; 0x177e <fputc+0x4c>
    177a:	0f ef       	ldi	r16, 0xFF	; 255
    177c:	1f ef       	ldi	r17, 0xFF	; 255
    177e:	c8 01       	movw	r24, r16
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	1f 91       	pop	r17
    1786:	0f 91       	pop	r16
    1788:	08 95       	ret

0000178a <__ultoa_invert>:
    178a:	fa 01       	movw	r30, r20
    178c:	aa 27       	eor	r26, r26
    178e:	28 30       	cpi	r18, 0x08	; 8
    1790:	51 f1       	breq	.+84     	; 0x17e6 <__ultoa_invert+0x5c>
    1792:	20 31       	cpi	r18, 0x10	; 16
    1794:	81 f1       	breq	.+96     	; 0x17f6 <__ultoa_invert+0x6c>
    1796:	e8 94       	clt
    1798:	6f 93       	push	r22
    179a:	6e 7f       	andi	r22, 0xFE	; 254
    179c:	6e 5f       	subi	r22, 0xFE	; 254
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	8f 4f       	sbci	r24, 0xFF	; 255
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	af 4f       	sbci	r26, 0xFF	; 255
    17a6:	b1 e0       	ldi	r27, 0x01	; 1
    17a8:	3e d0       	rcall	.+124    	; 0x1826 <__ultoa_invert+0x9c>
    17aa:	b4 e0       	ldi	r27, 0x04	; 4
    17ac:	3c d0       	rcall	.+120    	; 0x1826 <__ultoa_invert+0x9c>
    17ae:	67 0f       	add	r22, r23
    17b0:	78 1f       	adc	r23, r24
    17b2:	89 1f       	adc	r24, r25
    17b4:	9a 1f       	adc	r25, r26
    17b6:	a1 1d       	adc	r26, r1
    17b8:	68 0f       	add	r22, r24
    17ba:	79 1f       	adc	r23, r25
    17bc:	8a 1f       	adc	r24, r26
    17be:	91 1d       	adc	r25, r1
    17c0:	a1 1d       	adc	r26, r1
    17c2:	6a 0f       	add	r22, r26
    17c4:	71 1d       	adc	r23, r1
    17c6:	81 1d       	adc	r24, r1
    17c8:	91 1d       	adc	r25, r1
    17ca:	a1 1d       	adc	r26, r1
    17cc:	20 d0       	rcall	.+64     	; 0x180e <__ultoa_invert+0x84>
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <__ultoa_invert+0x48>
    17d0:	68 94       	set
    17d2:	3f 91       	pop	r19
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	26 9f       	mul	r18, r22
    17d8:	11 24       	eor	r1, r1
    17da:	30 19       	sub	r19, r0
    17dc:	30 5d       	subi	r19, 0xD0	; 208
    17de:	31 93       	st	Z+, r19
    17e0:	de f6       	brtc	.-74     	; 0x1798 <__ultoa_invert+0xe>
    17e2:	cf 01       	movw	r24, r30
    17e4:	08 95       	ret
    17e6:	46 2f       	mov	r20, r22
    17e8:	47 70       	andi	r20, 0x07	; 7
    17ea:	40 5d       	subi	r20, 0xD0	; 208
    17ec:	41 93       	st	Z+, r20
    17ee:	b3 e0       	ldi	r27, 0x03	; 3
    17f0:	0f d0       	rcall	.+30     	; 0x1810 <__ultoa_invert+0x86>
    17f2:	c9 f7       	brne	.-14     	; 0x17e6 <__ultoa_invert+0x5c>
    17f4:	f6 cf       	rjmp	.-20     	; 0x17e2 <__ultoa_invert+0x58>
    17f6:	46 2f       	mov	r20, r22
    17f8:	4f 70       	andi	r20, 0x0F	; 15
    17fa:	40 5d       	subi	r20, 0xD0	; 208
    17fc:	4a 33       	cpi	r20, 0x3A	; 58
    17fe:	18 f0       	brcs	.+6      	; 0x1806 <__ultoa_invert+0x7c>
    1800:	49 5d       	subi	r20, 0xD9	; 217
    1802:	31 fd       	sbrc	r19, 1
    1804:	40 52       	subi	r20, 0x20	; 32
    1806:	41 93       	st	Z+, r20
    1808:	02 d0       	rcall	.+4      	; 0x180e <__ultoa_invert+0x84>
    180a:	a9 f7       	brne	.-22     	; 0x17f6 <__ultoa_invert+0x6c>
    180c:	ea cf       	rjmp	.-44     	; 0x17e2 <__ultoa_invert+0x58>
    180e:	b4 e0       	ldi	r27, 0x04	; 4
    1810:	a6 95       	lsr	r26
    1812:	97 95       	ror	r25
    1814:	87 95       	ror	r24
    1816:	77 95       	ror	r23
    1818:	67 95       	ror	r22
    181a:	ba 95       	dec	r27
    181c:	c9 f7       	brne	.-14     	; 0x1810 <__ultoa_invert+0x86>
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	61 05       	cpc	r22, r1
    1822:	71 05       	cpc	r23, r1
    1824:	08 95       	ret
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	0a 2e       	mov	r0, r26
    182c:	06 94       	lsr	r0
    182e:	57 95       	ror	r21
    1830:	47 95       	ror	r20
    1832:	37 95       	ror	r19
    1834:	27 95       	ror	r18
    1836:	ba 95       	dec	r27
    1838:	c9 f7       	brne	.-14     	; 0x182c <__ultoa_invert+0xa2>
    183a:	62 0f       	add	r22, r18
    183c:	73 1f       	adc	r23, r19
    183e:	84 1f       	adc	r24, r20
    1840:	95 1f       	adc	r25, r21
    1842:	a0 1d       	adc	r26, r0
    1844:	08 95       	ret

00001846 <_exit>:
    1846:	f8 94       	cli

00001848 <__stop_program>:
    1848:	ff cf       	rjmp	.-2      	; 0x1848 <__stop_program>
