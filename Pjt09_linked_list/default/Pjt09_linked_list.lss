
Pjt09_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800200  000011a8  0000123c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  008002a0  008002a0  000012dc  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  00002728  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002079  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc0  00000000  00000000  00004a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00006c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068a  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015b5  00000000  00000000  00007852  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00008e07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ea       	ldi	r30, 0xA8	; 168
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3a       	cpi	r26, 0xA0	; 160
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 ea       	ldi	r26, 0xA0	; 160
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 33       	cpi	r26, 0x37	; 55
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
     124:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     12c:	f8 94       	cli
		ch = qi_delete();
     12e:	0e 94 05 02 	call	0x40a	; 0x40a <qi_delete>
		sei();
     132:	78 94       	sei
	} while(ch == 0);
     134:	88 23       	and	r24, r24
     136:	d1 f3       	breq	.-12     	; 0x12c <uart_getchar>

	if(ch == EOT)	return(-1);
     138:	84 30       	cpi	r24, 0x04	; 4
     13a:	11 f0       	breq	.+4      	; 0x140 <uart_getchar+0x14>
	else			return(ch);
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while(ch == 0);

	if(ch == EOT)	return(-1);
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     144:	08 95       	ret

00000146 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     146:	cf 93       	push	r28
     148:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     14a:	8a 30       	cpi	r24, 0x0A	; 10
     14c:	19 f4       	brne	.+6      	; 0x154 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     14e:	8d e0       	ldi	r24, 0x0D	; 13
     150:	0e 94 a3 00 	call	0x146	; 0x146 <uart_putchar>
	
	cli();
     154:	f8 94       	cli

	if(!uart_busy) {
     156:	80 91 a4 02 	lds	r24, 0x02A4
     15a:	88 23       	and	r24, r24
     15c:	59 f4       	brne	.+22     	; 0x174 <uart_putchar+0x2e>
		UDR0 = ch;
     15e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 a4 02 	sts	0x02A4, r24
     168:	0a c0       	rjmp	.+20     	; 0x17e <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     16a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16c:	86 ef       	ldi	r24, 0xF6	; 246
     16e:	8a 95       	dec	r24
     170:	f1 f7       	brne	.-4      	; 0x16e <uart_putchar+0x28>
			_delay_us(100);
			cli();
     172:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     174:	8c 2f       	mov	r24, r28
     176:	0e 94 22 02 	call	0x444	; 0x444 <qo_insert>
     17a:	00 97       	sbiw	r24, 0x00	; 0
     17c:	b1 f3       	breq	.-20     	; 0x16a <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}			
	}
	sei();
     17e:	78 94       	sei

	return(1);
}
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     188:	8d e4       	ldi	r24, 0x4D	; 77
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	90 93 32 03 	sts	0x0332, r25
     190:	80 93 31 03 	sts	0x0331, r24
     194:	8b e5       	ldi	r24, 0x5B	; 91
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	90 93 34 03 	sts	0x0334, r25
     19c:	80 93 33 03 	sts	0x0333, r24
	uart_busy = 0;
     1a0:	10 92 a4 02 	sts	0x02A4, r1
	q_init();
     1a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     1a8:	10 92 c5 00 	sts	0x00C5, r1
     1ac:	87 e0       	ldi	r24, 0x07	; 7
     1ae:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     1b2:	e0 ec       	ldi	r30, 0xC0	; 192
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     1bc:	e1 ec       	ldi	r30, 0xC1	; 193
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	88 60       	ori	r24, 0x08	; 8
     1c4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     1cc:	80 81       	ld	r24, Z
     1ce:	80 61       	ori	r24, 0x10	; 16
     1d0:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     1d2:	80 81       	ld	r24, Z
     1d4:	80 68       	ori	r24, 0x80	; 128
     1d6:	80 83       	st	Z, r24
}
     1d8:	08 95       	ret

000001da <__vector_27>:
	if(ch == EOT)	return(-1);
	else			return(ch);
}

ISR(USART0_TX_vect)
{
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	0b b6       	in	r0, 0x3b	; 59
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     200:	0e 94 44 02 	call	0x488	; 0x488 <qo_delete>
     204:	88 23       	and	r24, r24
     206:	19 f4       	brne	.+6      	; 0x20e <__vector_27+0x34>
		uart_busy = 0;
     208:	10 92 a4 02 	sts	0x02A4, r1
     20c:	02 c0       	rjmp	.+4      	; 0x212 <__vector_27+0x38>
	else
		UDR0 = ch;
     20e:	80 93 c6 00 	sts	0x00C6, r24
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	7f 91       	pop	r23
     220:	6f 91       	pop	r22
     222:	5f 91       	pop	r21
     224:	4f 91       	pop	r20
     226:	3f 91       	pop	r19
     228:	2f 91       	pop	r18
     22a:	0f 90       	pop	r0
     22c:	0b be       	out	0x3b, r0	; 59
     22e:	0f 90       	pop	r0
     230:	0f be       	out	0x3f, r0	; 63
     232:	0f 90       	pop	r0
     234:	1f 90       	pop	r1
     236:	18 95       	reti

00000238 <uart_echo>:
	}
	qi_insert(ch);
}

void uart_echo(char ch)
{
     238:	cf 93       	push	r28
     23a:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     23c:	8a 30       	cpi	r24, 0x0A	; 10
     23e:	19 f4       	brne	.+6      	; 0x246 <uart_echo+0xe>
     240:	8d e0       	ldi	r24, 0x0D	; 13
     242:	0e 94 1c 01 	call	0x238	; 0x238 <uart_echo>
	if(!uart_busy) {
     246:	80 91 a4 02 	lds	r24, 0x02A4
     24a:	88 23       	and	r24, r24
     24c:	31 f4       	brne	.+12     	; 0x25a <uart_echo+0x22>
		UDR0 = ch;
     24e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 a4 02 	sts	0x02A4, r24
     258:	03 c0       	rjmp	.+6      	; 0x260 <uart_echo+0x28>
	}
	else {
		qo_insert(ch);			
     25a:	8c 2f       	mov	r24, r28
     25c:	0e 94 22 02 	call	0x444	; 0x444 <qo_insert>
	}
}
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <__vector_25>:
	else
		UDR0 = ch;
}

ISR(USART0_RX_vect)
{
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	0b b6       	in	r0, 0x3b	; 59
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	4f 93       	push	r20
     278:	5f 93       	push	r21
     27a:	6f 93       	push	r22
     27c:	7f 93       	push	r23
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
     286:	cf 93       	push	r28
     288:	ef 93       	push	r30
     28a:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     28c:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch !=EOT) {
     290:	c4 30       	cpi	r28, 0x04	; 4
     292:	31 f0       	breq	.+12     	; 0x2a0 <__vector_25+0x3c>
		if(ch == '\r') ch = '\n';
     294:	cd 30       	cpi	r28, 0x0D	; 13
     296:	09 f4       	brne	.+2      	; 0x29a <__vector_25+0x36>
     298:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     29a:	8c 2f       	mov	r24, r28
     29c:	0e 94 1c 01 	call	0x238	; 0x238 <uart_echo>
	}
	qi_insert(ch);
     2a0:	8c 2f       	mov	r24, r28
     2a2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <qi_insert>
}
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	cf 91       	pop	r28
     2ac:	bf 91       	pop	r27
     2ae:	af 91       	pop	r26
     2b0:	9f 91       	pop	r25
     2b2:	8f 91       	pop	r24
     2b4:	7f 91       	pop	r23
     2b6:	6f 91       	pop	r22
     2b8:	5f 91       	pop	r21
     2ba:	4f 91       	pop	r20
     2bc:	3f 91       	pop	r19
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0b be       	out	0x3b, r0	; 59
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <is_prime>:
#include <stdio.h>
#include "prime.h"

int is_prime(int n) {
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	fc 01       	movw	r30, r24
	int i; 
	for (i = 2; i <= n/2; i++)
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	0e 94 bf 03 	call	0x77e	; 0x77e <__divmodhi4>
     2dc:	eb 01       	movw	r28, r22
     2de:	22 e0       	ldi	r18, 0x02	; 2
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <is_prime+0x26>
		if((n % i) == 0)
     2e4:	cf 01       	movw	r24, r30
     2e6:	b9 01       	movw	r22, r18
     2e8:	0e 94 bf 03 	call	0x77e	; 0x77e <__divmodhi4>
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	41 f0       	breq	.+16     	; 0x300 <is_prime+0x32>
#include <stdio.h>
#include "prime.h"

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
     2f0:	2f 5f       	subi	r18, 0xFF	; 255
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	c2 17       	cp	r28, r18
     2f6:	d3 07       	cpc	r29, r19
     2f8:	ac f7       	brge	.-22     	; 0x2e4 <is_prime+0x16>
		if((n % i) == 0)
			return (0);
	return (1);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <is_prime+0x36>

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return (0);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <app_prime>:

void app_prime(char *ap)
{
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
     31a:	00 97       	sbiw	r24, 0x00	; 0
     31c:	21 f0       	breq	.+8      	; 0x326 <app_prime+0x1c>
     31e:	0e 94 15 05 	call	0xa2a	; 0xa2a <atoi>
     322:	7c 01       	movw	r14, r24
     324:	04 c0       	rjmp	.+8      	; 0x32e <app_prime+0x24>
	return (1);
}

void app_prime(char *ap)
{
	int	t = 2000, n, count = 0;
     326:	90 ed       	ldi	r25, 0xD0	; 208
     328:	e9 2e       	mov	r14, r25
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	f9 2e       	mov	r15, r25
     32e:	00 e0       	ldi	r16, 0x00	; 0
     330:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     332:	c2 e0       	ldi	r28, 0x02	; 2
     334:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
     336:	89 e6       	ldi	r24, 0x69	; 105
     338:	c8 2e       	mov	r12, r24
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     33e:	16 c0       	rjmp	.+44     	; 0x36c <app_prime+0x62>
		if (is_prime(n)) {
     340:	ce 01       	movw	r24, r28
     342:	0e 94 67 01 	call	0x2ce	; 0x2ce <is_prime>
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	81 f0       	breq	.+32     	; 0x36a <app_prime+0x60>
			count++;
     34a:	0f 5f       	subi	r16, 0xFF	; 255
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n", n);
     34e:	00 d0       	rcall	.+0      	; 0x350 <app_prime+0x46>
     350:	0f 92       	push	r0
     352:	ed b7       	in	r30, 0x3d	; 61
     354:	fe b7       	in	r31, 0x3e	; 62
     356:	d2 82       	std	Z+2, r13	; 0x02
     358:	c1 82       	std	Z+1, r12	; 0x01
     35a:	d4 83       	std	Z+4, r29	; 0x04
     35c:	c3 83       	std	Z+3, r28	; 0x03
     35e:	0e 94 a4 05 	call	0xb48	; 0xb48 <printf>
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     36a:	21 96       	adiw	r28, 0x01	; 1
     36c:	ec 16       	cp	r14, r28
     36e:	fd 06       	cpc	r15, r29
     370:	3c f7       	brge	.-50     	; 0x340 <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
		}
	}
	printf("count = %d\n", count);
     372:	00 d0       	rcall	.+0      	; 0x374 <app_prime+0x6a>
     374:	0f 92       	push	r0
     376:	83 e8       	ldi	r24, 0x83	; 131
     378:	92 e0       	ldi	r25, 0x02	; 2
     37a:	ed b7       	in	r30, 0x3d	; 61
     37c:	fe b7       	in	r31, 0x3e	; 62
     37e:	92 83       	std	Z+2, r25	; 0x02
     380:	81 83       	std	Z+1, r24	; 0x01
     382:	14 83       	std	Z+4, r17	; 0x04
     384:	03 83       	std	Z+3, r16	; 0x03
     386:	0e 94 a4 05 	call	0xb48	; 0xb48 <printf>
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int  fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     3a4:	10 92 ea 02 	sts	0x02EA, r1
     3a8:	10 92 e9 02 	sts	0x02E9, r1
     3ac:	10 92 e8 02 	sts	0x02E8, r1
     3b0:	10 92 e7 02 	sts	0x02E7, r1
     3b4:	10 92 ec 02 	sts	0x02EC, r1
     3b8:	10 92 eb 02 	sts	0x02EB, r1
     3bc:	10 92 a6 02 	sts	0x02A6, r1
     3c0:	10 92 a5 02 	sts	0x02A5, r1
}
     3c4:	08 95       	ret

000003c6 <qi_insert>:

int qi_insert(char ch)
{
     3c6:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     3c8:	20 91 eb 02 	lds	r18, 0x02EB
     3cc:	30 91 ec 02 	lds	r19, 0x02EC
     3d0:	2f 5f       	subi	r18, 0xFF	; 255
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	c9 01       	movw	r24, r18
     3d6:	60 e4       	ldi	r22, 0x40	; 64
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	0e 94 bf 03 	call	0x77e	; 0x77e <__divmodhi4>
     3de:	9c 01       	movw	r18, r24
     3e0:	80 91 a5 02 	lds	r24, 0x02A5
     3e4:	90 91 a6 02 	lds	r25, 0x02A6
     3e8:	28 17       	cp	r18, r24
     3ea:	39 07       	cpc	r19, r25
     3ec:	59 f0       	breq	.+22     	; 0x404 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     3ee:	30 93 ec 02 	sts	0x02EC, r19
     3f2:	20 93 eb 02 	sts	0x02EB, r18
	qi[ri] = ch;
     3f6:	23 51       	subi	r18, 0x13	; 19
     3f8:	3d 4f       	sbci	r19, 0xFD	; 253
     3fa:	f9 01       	movw	r30, r18
     3fc:	40 83       	st	Z, r20
	return(1);
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     408:	08 95       	ret

0000040a <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     40a:	80 91 a5 02 	lds	r24, 0x02A5
     40e:	90 91 a6 02 	lds	r25, 0x02A6
     412:	20 91 eb 02 	lds	r18, 0x02EB
     416:	30 91 ec 02 	lds	r19, 0x02EC
     41a:	28 17       	cp	r18, r24
     41c:	39 07       	cpc	r19, r25
     41e:	79 f0       	breq	.+30     	; 0x43e <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	60 e4       	ldi	r22, 0x40	; 64
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	0e 94 bf 03 	call	0x77e	; 0x77e <__divmodhi4>
     42a:	90 93 a6 02 	sts	0x02A6, r25
     42e:	80 93 a5 02 	sts	0x02A5, r24
	return(qi[fi]);
     432:	83 51       	subi	r24, 0x13	; 19
     434:	9d 4f       	sbci	r25, 0xFD	; 253
     436:	fc 01       	movw	r30, r24
     438:	80 81       	ld	r24, Z
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return(0);
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     442:	08 95       	ret

00000444 <qo_insert>:

int qo_insert(char ch)
{
     444:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     446:	20 91 e9 02 	lds	r18, 0x02E9
     44a:	30 91 ea 02 	lds	r19, 0x02EA
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	c9 01       	movw	r24, r18
     454:	60 e4       	ldi	r22, 0x40	; 64
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	0e 94 bf 03 	call	0x77e	; 0x77e <__divmodhi4>
     45c:	9c 01       	movw	r18, r24
     45e:	80 91 e7 02 	lds	r24, 0x02E7
     462:	90 91 e8 02 	lds	r25, 0x02E8
     466:	28 17       	cp	r18, r24
     468:	39 07       	cpc	r19, r25
     46a:	59 f0       	breq	.+22     	; 0x482 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     46c:	30 93 ea 02 	sts	0x02EA, r19
     470:	20 93 e9 02 	sts	0x02E9, r18
	qo[ro] = ch;
     474:	29 55       	subi	r18, 0x59	; 89
     476:	3d 4f       	sbci	r19, 0xFD	; 253
     478:	f9 01       	movw	r30, r18
     47a:	40 83       	st	Z, r20
	return(1);
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     486:	08 95       	ret

00000488 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     488:	80 91 e7 02 	lds	r24, 0x02E7
     48c:	90 91 e8 02 	lds	r25, 0x02E8
     490:	20 91 e9 02 	lds	r18, 0x02E9
     494:	30 91 ea 02 	lds	r19, 0x02EA
     498:	28 17       	cp	r18, r24
     49a:	39 07       	cpc	r19, r25
     49c:	79 f0       	breq	.+30     	; 0x4bc <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	60 e4       	ldi	r22, 0x40	; 64
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	0e 94 bf 03 	call	0x77e	; 0x77e <__divmodhi4>
     4a8:	90 93 e8 02 	sts	0x02E8, r25
     4ac:	80 93 e7 02 	sts	0x02E7, r24
	return(qo[fo]);
     4b0:	89 55       	subi	r24, 0x59	; 89
     4b2:	9d 4f       	sbci	r25, 0xFD	; 253
     4b4:	fc 01       	movw	r30, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return(0);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     4c0:	08 95       	ret

000004c2 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <malloc>
	return(cp);
}
     4ca:	08 95       	ret

000004cc <free_node>:

void free_node(struct node *np)
{
	free(np);
     4cc:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <free>
}
     4d0:	08 95       	ret

000004d2 <insert_node_head>:

void insert_node_head(struct node *np)
{
     4d2:	fc 01       	movw	r30, r24
	if(!Head) {
     4d4:	80 91 a0 02 	lds	r24, 0x02A0
     4d8:	90 91 a1 02 	lds	r25, 0x02A1
     4dc:	00 97       	sbiw	r24, 0x00	; 0
     4de:	39 f4       	brne	.+14     	; 0x4ee <insert_node_head+0x1c>
		Head = np;
     4e0:	f0 93 a1 02 	sts	0x02A1, r31
     4e4:	e0 93 a0 02 	sts	0x02A0, r30
		np->link = NULL;
     4e8:	13 82       	std	Z+3, r1	; 0x03
     4ea:	12 82       	std	Z+2, r1	; 0x02
     4ec:	08 95       	ret
	} else {
		np->link = Head;
     4ee:	93 83       	std	Z+3, r25	; 0x03
     4f0:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     4f2:	f0 93 a1 02 	sts	0x02A1, r31
     4f6:	e0 93 a0 02 	sts	0x02A0, r30
     4fa:	08 95       	ret

000004fc <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     4fc:	e0 91 a0 02 	lds	r30, 0x02A0
     500:	f0 91 a1 02 	lds	r31, 0x02A1
     504:	30 97       	sbiw	r30, 0x00	; 0
     506:	31 f4       	brne	.+12     	; 0x514 <insert_node_tail+0x18>
		Head = np;
     508:	90 93 a1 02 	sts	0x02A1, r25
     50c:	80 93 a0 02 	sts	0x02A0, r24
     510:	08 c0       	rjmp	.+16     	; 0x522 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     512:	f9 01       	movw	r30, r18
     514:	22 81       	ldd	r18, Z+2	; 0x02
     516:	33 81       	ldd	r19, Z+3	; 0x03
     518:	21 15       	cp	r18, r1
     51a:	31 05       	cpc	r19, r1
     51c:	d1 f7       	brne	.-12     	; 0x512 <insert_node_tail+0x16>
			;
		cp->link = np;
     51e:	93 83       	std	Z+3, r25	; 0x03
     520:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     522:	fc 01       	movw	r30, r24
     524:	13 82       	std	Z+3, r1	; 0x03
     526:	12 82       	std	Z+2, r1	; 0x02
}
     528:	08 95       	ret

0000052a <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	
	if(!Head) {
     530:	20 91 a0 02 	lds	r18, 0x02A0
     534:	30 91 a1 02 	lds	r19, 0x02A1
     538:	21 15       	cp	r18, r1
     53a:	31 05       	cpc	r19, r1
     53c:	31 f0       	breq	.+12     	; 0x54a <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     53e:	40 81       	ld	r20, Z
     540:	51 81       	ldd	r21, Z+1	; 0x01
     542:	d9 01       	movw	r26, r18
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	d0 e0       	ldi	r29, 0x00	; 0
     548:	0f c0       	rjmp	.+30     	; 0x568 <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	
	if(!Head) {
		Head = np;
     54a:	90 93 a1 02 	sts	0x02A1, r25
     54e:	80 93 a0 02 	sts	0x02A0, r24
		np->link = NULL;
     552:	13 82       	std	Z+3, r1	; 0x03
     554:	12 82       	std	Z+2, r1	; 0x02
     556:	1d c0       	rjmp	.+58     	; 0x592 <insert_node_ascn+0x68>
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     558:	12 96       	adiw	r26, 0x02	; 2
     55a:	8d 91       	ld	r24, X+
     55c:	9c 91       	ld	r25, X
     55e:	13 97       	sbiw	r26, 0x03	; 3
     560:	ed 01       	movw	r28, r26
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	39 f0       	breq	.+14     	; 0x574 <insert_node_ascn+0x4a>
     566:	dc 01       	movw	r26, r24
     568:	8d 91       	ld	r24, X+
     56a:	9c 91       	ld	r25, X
     56c:	11 97       	sbiw	r26, 0x01	; 1
     56e:	84 17       	cp	r24, r20
     570:	95 07       	cpc	r25, r21
     572:	94 f3       	brlt	.-28     	; 0x558 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     574:	20 97       	sbiw	r28, 0x00	; 0
     576:	39 f4       	brne	.+14     	; 0x586 <insert_node_ascn+0x5c>
			np->link = Head;
     578:	33 83       	std	Z+3, r19	; 0x03
     57a:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     57c:	f0 93 a1 02 	sts	0x02A1, r31
     580:	e0 93 a0 02 	sts	0x02A0, r30
     584:	06 c0       	rjmp	.+12     	; 0x592 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	9b 81       	ldd	r25, Y+3	; 0x03
     58a:	93 83       	std	Z+3, r25	; 0x03
     58c:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     58e:	fb 83       	std	Y+3, r31	; 0x03
     590:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <tour_list>:

void tour_list()
{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <putchar>
	for(cp = Head; cp->link != NULL; cp = cp->link)
     5a8:	c0 91 a0 02 	lds	r28, 0x02A0
     5ac:	d0 91 a1 02 	lds	r29, 0x02A1
		printf("-->%c ", cp->data);
     5b0:	0f e8       	ldi	r16, 0x8F	; 143
     5b2:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     5b4:	13 c0       	rjmp	.+38     	; 0x5dc <tour_list+0x44>
		printf("-->%c ", cp->data);
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <tour_list+0x20>
     5b8:	0f 92       	push	r0
     5ba:	ed b7       	in	r30, 0x3d	; 61
     5bc:	fe b7       	in	r31, 0x3e	; 62
     5be:	12 83       	std	Z+2, r17	; 0x02
     5c0:	01 83       	std	Z+1, r16	; 0x01
     5c2:	88 81       	ld	r24, Y
     5c4:	99 81       	ldd	r25, Y+1	; 0x01
     5c6:	94 83       	std	Z+4, r25	; 0x04
     5c8:	83 83       	std	Z+3, r24	; 0x03
     5ca:	0e 94 a4 05 	call	0xb48	; 0xb48 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     5ce:	0a 80       	ldd	r0, Y+2	; 0x02
     5d0:	db 81       	ldd	r29, Y+3	; 0x03
     5d2:	c0 2d       	mov	r28, r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	9b 81       	ldd	r25, Y+3	; 0x03
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	49 f7       	brne	.-46     	; 0x5b6 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     5e4:	8a e0       	ldi	r24, 0x0A	; 10
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <putchar>
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <free_list>:

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     5f6:	09 c0       	rjmp	.+18     	; 0x60a <free_list+0x14>
		cp = Head;
		Head = cp->link;
     5f8:	fc 01       	movw	r30, r24
     5fa:	22 81       	ldd	r18, Z+2	; 0x02
     5fc:	33 81       	ldd	r19, Z+3	; 0x03
     5fe:	30 93 a1 02 	sts	0x02A1, r19
     602:	20 93 a0 02 	sts	0x02A0, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     606:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <free>

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     60a:	80 91 a0 02 	lds	r24, 0x02A0
     60e:	90 91 a1 02 	lds	r25, 0x02A1
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	89 f7       	brne	.-30     	; 0x5f8 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     616:	08 95       	ret

00000618 <app_list>:

void app_list(char *ap)
{
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	28 97       	sbiw	r28, 0x08	; 8
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	19 f0       	breq	.+6      	; 0x63c <app_list+0x24>
     636:	fc 01       	movw	r30, r24
     638:	10 81       	ld	r17, Z
     63a:	01 c0       	rjmp	.+2      	; 0x63e <app_list+0x26>
	}
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     63c:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     63e:	86 e9       	ldi	r24, 0x96	; 150
     640:	e8 2e       	mov	r14, r24
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	f8 2e       	mov	r15, r24
     646:	0f 92       	push	r0
     648:	0f 92       	push	r0
     64a:	ed b7       	in	r30, 0x3d	; 61
     64c:	fe b7       	in	r31, 0x3e	; 62
     64e:	f2 82       	std	Z+2, r15	; 0x02
     650:	e1 82       	std	Z+1, r14	; 0x01
     652:	0e 94 a4 05 	call	0xb48	; 0xb48 <printf>
		if(fgets(buf, 8, stdin) == NULL) {
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	40 91 31 03 	lds	r20, 0x0331
     65e:	50 91 32 03 	lds	r21, 0x0332
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	68 e0       	ldi	r22, 0x08	; 8
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	0e 94 70 05 	call	0xae0	; 0xae0 <fgets>
     66e:	00 97       	sbiw	r24, 0x00	; 0
     670:	a1 f0       	breq	.+40     	; 0x69a <app_list+0x82>
			break;
		}
		np = get_node();
     672:	0e 94 61 02 	call	0x4c2	; 0x4c2 <get_node>
		np->data = buf[0];
     676:	29 81       	ldd	r18, Y+1	; 0x01
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
     67c:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     67e:	18 36       	cpi	r17, 0x68	; 104
     680:	19 f0       	breq	.+6      	; 0x688 <app_list+0x70>
     682:	14 37       	cpi	r17, 0x74	; 116
     684:	39 f4       	brne	.+14     	; 0x694 <app_list+0x7c>
     686:	03 c0       	rjmp	.+6      	; 0x68e <app_list+0x76>
			case	'h' : insert_node_head(np); break;
     688:	0e 94 69 02 	call	0x4d2	; 0x4d2 <insert_node_head>
     68c:	dc cf       	rjmp	.-72     	; 0x646 <app_list+0x2e>
			case	't' : insert_node_tail(np); break;
     68e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <insert_node_tail>
     692:	d9 cf       	rjmp	.-78     	; 0x646 <app_list+0x2e>
			default     : insert_node_ascn(np);
     694:	0e 94 95 02 	call	0x52a	; 0x52a <insert_node_ascn>
     698:	d6 cf       	rjmp	.-84     	; 0x646 <app_list+0x2e>
		}
	}
	tour_list();
     69a:	0e 94 cc 02 	call	0x598	; 0x598 <tour_list>
	free_list();
     69e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <free_list>
}
     6a2:	28 96       	adiw	r28, 0x08	; 8
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <main>:
#include "que.h"
#include "prime.h"
#include "list.h"

int main()
{
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	c0 58       	subi	r28, 0x80	; 128
     6c4:	d0 40       	sbci	r29, 0x00	; 0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;

	uart_init();
     6d0:	0e 94 c4 00 	call	0x188	; 0x188 <uart_init>
	sei();
     6d4:	78 94       	sei
	while(1) {
		printf("$ ");
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	c8 2e       	mov	r12, r24
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	d8 2e       	mov	r13, r24
     6de:	0f 92       	push	r0
     6e0:	0f 92       	push	r0
     6e2:	ed b7       	in	r30, 0x3d	; 61
     6e4:	fe b7       	in	r31, 0x3e	; 62
     6e6:	d2 82       	std	Z+2, r13	; 0x02
     6e8:	c1 82       	std	Z+1, r12	; 0x01
     6ea:	0e 94 a4 05 	call	0xb48	; 0xb48 <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	40 91 31 03 	lds	r20, 0x0331
     6f6:	50 91 32 03 	lds	r21, 0x0332
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	60 e8       	ldi	r22, 0x80	; 128
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	0e 94 70 05 	call	0xae0	; 0xae0 <fgets>
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	a9 f1       	breq	.+106    	; 0x774 <main+0xba>
			break;
		if((cp = strtok(cmd,  "\n\r\t  ")) == NULL) continue;
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	0e 94 33 05 	call	0xa66	; 0xa66 <strtok>
     716:	8c 01       	movw	r16, r24
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	09 f3       	breq	.-62     	; 0x6de <main+0x24>
		ap = strtok(NULL, "\n\r\t  ");
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	72 e0       	ldi	r23, 0x02	; 2
     724:	0e 94 33 05 	call	0xa66	; 0xa66 <strtok>
     728:	7c 01       	movw	r14, r24
		if		(!strcmp(cp, "prime"))	app_prime(ap);
     72a:	c8 01       	movw	r24, r16
     72c:	69 e0       	ldi	r22, 0x09	; 9
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	0e 94 38 05 	call	0xa70	; 0xa70 <strcmp>
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	21 f4       	brne	.+8      	; 0x740 <main+0x86>
     738:	c7 01       	movw	r24, r14
     73a:	0e 94 85 01 	call	0x30a	; 0x30a <app_prime>
     73e:	cf cf       	rjmp	.-98     	; 0x6de <main+0x24>
		else if (!strcmp(cp, "list"))	app_list(ap);
     740:	c8 01       	movw	r24, r16
     742:	6f e0       	ldi	r22, 0x0F	; 15
     744:	72 e0       	ldi	r23, 0x02	; 2
     746:	0e 94 38 05 	call	0xa70	; 0xa70 <strcmp>
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	21 f4       	brne	.+8      	; 0x756 <main+0x9c>
     74e:	c7 01       	movw	r24, r14
     750:	0e 94 0c 03 	call	0x618	; 0x618 <app_list>
     754:	c4 cf       	rjmp	.-120    	; 0x6de <main+0x24>
		else if (!strcmp(cp, "who"))	printf("I am JHKIM...\n");
     756:	c8 01       	movw	r24, r16
     758:	64 e1       	ldi	r22, 0x14	; 20
     75a:	72 e0       	ldi	r23, 0x02	; 2
     75c:	0e 94 38 05 	call	0xa70	; 0xa70 <strcmp>
     760:	00 97       	sbiw	r24, 0x00	; 0
     762:	19 f4       	brne	.+6      	; 0x76a <main+0xb0>
     764:	88 e1       	ldi	r24, 0x18	; 24
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	02 c0       	rjmp	.+4      	; 0x76e <main+0xb4>
		else							printf("Unknown command...\n");
     76a:	86 e2       	ldi	r24, 0x26	; 38
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <puts>
     772:	b5 cf       	rjmp	.-150    	; 0x6de <main+0x24>
	}
	printf( "logout, goodbye !!!\n" );
     774:	89 e3       	ldi	r24, 0x39	; 57
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	0e 94 bd 05 	call	0xb7a	; 0xb7a <puts>
     77c:	ff cf       	rjmp	.-2      	; 0x77c <main+0xc2>

0000077e <__divmodhi4>:
     77e:	97 fb       	bst	r25, 7
     780:	09 2e       	mov	r0, r25
     782:	07 26       	eor	r0, r23
     784:	0a d0       	rcall	.+20     	; 0x79a <__divmodhi4_neg1>
     786:	77 fd       	sbrc	r23, 7
     788:	04 d0       	rcall	.+8      	; 0x792 <__divmodhi4_neg2>
     78a:	0c d0       	rcall	.+24     	; 0x7a4 <__udivmodhi4>
     78c:	06 d0       	rcall	.+12     	; 0x79a <__divmodhi4_neg1>
     78e:	00 20       	and	r0, r0
     790:	1a f4       	brpl	.+6      	; 0x798 <__divmodhi4_exit>

00000792 <__divmodhi4_neg2>:
     792:	70 95       	com	r23
     794:	61 95       	neg	r22
     796:	7f 4f       	sbci	r23, 0xFF	; 255

00000798 <__divmodhi4_exit>:
     798:	08 95       	ret

0000079a <__divmodhi4_neg1>:
     79a:	f6 f7       	brtc	.-4      	; 0x798 <__divmodhi4_exit>
     79c:	90 95       	com	r25
     79e:	81 95       	neg	r24
     7a0:	9f 4f       	sbci	r25, 0xFF	; 255
     7a2:	08 95       	ret

000007a4 <__udivmodhi4>:
     7a4:	aa 1b       	sub	r26, r26
     7a6:	bb 1b       	sub	r27, r27
     7a8:	51 e1       	ldi	r21, 0x11	; 17
     7aa:	07 c0       	rjmp	.+14     	; 0x7ba <__udivmodhi4_ep>

000007ac <__udivmodhi4_loop>:
     7ac:	aa 1f       	adc	r26, r26
     7ae:	bb 1f       	adc	r27, r27
     7b0:	a6 17       	cp	r26, r22
     7b2:	b7 07       	cpc	r27, r23
     7b4:	10 f0       	brcs	.+4      	; 0x7ba <__udivmodhi4_ep>
     7b6:	a6 1b       	sub	r26, r22
     7b8:	b7 0b       	sbc	r27, r23

000007ba <__udivmodhi4_ep>:
     7ba:	88 1f       	adc	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	5a 95       	dec	r21
     7c0:	a9 f7       	brne	.-22     	; 0x7ac <__udivmodhi4_loop>
     7c2:	80 95       	com	r24
     7c4:	90 95       	com	r25
     7c6:	bc 01       	movw	r22, r24
     7c8:	cd 01       	movw	r24, r26
     7ca:	08 95       	ret

000007cc <malloc>:
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	ac 01       	movw	r20, r24
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	91 05       	cpc	r25, r1
     7d6:	10 f4       	brcc	.+4      	; 0x7dc <malloc+0x10>
     7d8:	42 e0       	ldi	r20, 0x02	; 2
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	e0 91 2f 03 	lds	r30, 0x032F
     7e0:	f0 91 30 03 	lds	r31, 0x0330
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	24 c0       	rjmp	.+72     	; 0x836 <malloc+0x6a>
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	84 17       	cp	r24, r20
     7f4:	95 07       	cpc	r25, r21
     7f6:	d0 f0       	brcs	.+52     	; 0x82c <malloc+0x60>
     7f8:	84 17       	cp	r24, r20
     7fa:	95 07       	cpc	r25, r21
     7fc:	71 f4       	brne	.+28     	; 0x81a <malloc+0x4e>
     7fe:	82 81       	ldd	r24, Z+2	; 0x02
     800:	93 81       	ldd	r25, Z+3	; 0x03
     802:	10 97       	sbiw	r26, 0x00	; 0
     804:	29 f0       	breq	.+10     	; 0x810 <malloc+0x44>
     806:	13 96       	adiw	r26, 0x03	; 3
     808:	9c 93       	st	X, r25
     80a:	8e 93       	st	-X, r24
     80c:	12 97       	sbiw	r26, 0x02	; 2
     80e:	2c c0       	rjmp	.+88     	; 0x868 <malloc+0x9c>
     810:	90 93 30 03 	sts	0x0330, r25
     814:	80 93 2f 03 	sts	0x032F, r24
     818:	27 c0       	rjmp	.+78     	; 0x868 <malloc+0x9c>
     81a:	21 15       	cp	r18, r1
     81c:	31 05       	cpc	r19, r1
     81e:	19 f0       	breq	.+6      	; 0x826 <malloc+0x5a>
     820:	82 17       	cp	r24, r18
     822:	93 07       	cpc	r25, r19
     824:	18 f4       	brcc	.+6      	; 0x82c <malloc+0x60>
     826:	9c 01       	movw	r18, r24
     828:	bd 01       	movw	r22, r26
     82a:	ef 01       	movw	r28, r30
     82c:	92 81       	ldd	r25, Z+2	; 0x02
     82e:	83 81       	ldd	r24, Z+3	; 0x03
     830:	df 01       	movw	r26, r30
     832:	e9 2f       	mov	r30, r25
     834:	f8 2f       	mov	r31, r24
     836:	30 97       	sbiw	r30, 0x00	; 0
     838:	d1 f6       	brne	.-76     	; 0x7ee <malloc+0x22>
     83a:	21 15       	cp	r18, r1
     83c:	31 05       	cpc	r19, r1
     83e:	f9 f0       	breq	.+62     	; 0x87e <malloc+0xb2>
     840:	c9 01       	movw	r24, r18
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	91 05       	cpc	r25, r1
     84a:	80 f4       	brcc	.+32     	; 0x86c <malloc+0xa0>
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	9b 81       	ldd	r25, Y+3	; 0x03
     850:	61 15       	cp	r22, r1
     852:	71 05       	cpc	r23, r1
     854:	21 f0       	breq	.+8      	; 0x85e <malloc+0x92>
     856:	fb 01       	movw	r30, r22
     858:	93 83       	std	Z+3, r25	; 0x03
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	04 c0       	rjmp	.+8      	; 0x866 <malloc+0x9a>
     85e:	90 93 30 03 	sts	0x0330, r25
     862:	80 93 2f 03 	sts	0x032F, r24
     866:	fe 01       	movw	r30, r28
     868:	32 96       	adiw	r30, 0x02	; 2
     86a:	42 c0       	rjmp	.+132    	; 0x8f0 <malloc+0x124>
     86c:	fe 01       	movw	r30, r28
     86e:	e8 0f       	add	r30, r24
     870:	f9 1f       	adc	r31, r25
     872:	41 93       	st	Z+, r20
     874:	51 93       	st	Z+, r21
     876:	02 97       	sbiw	r24, 0x02	; 2
     878:	99 83       	std	Y+1, r25	; 0x01
     87a:	88 83       	st	Y, r24
     87c:	39 c0       	rjmp	.+114    	; 0x8f0 <malloc+0x124>
     87e:	80 91 2d 03 	lds	r24, 0x032D
     882:	90 91 2e 03 	lds	r25, 0x032E
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	41 f4       	brne	.+16     	; 0x89a <malloc+0xce>
     88a:	80 91 9b 02 	lds	r24, 0x029B
     88e:	90 91 9c 02 	lds	r25, 0x029C
     892:	90 93 2e 03 	sts	0x032E, r25
     896:	80 93 2d 03 	sts	0x032D, r24
     89a:	20 91 99 02 	lds	r18, 0x0299
     89e:	30 91 9a 02 	lds	r19, 0x029A
     8a2:	21 15       	cp	r18, r1
     8a4:	31 05       	cpc	r19, r1
     8a6:	41 f4       	brne	.+16     	; 0x8b8 <malloc+0xec>
     8a8:	2d b7       	in	r18, 0x3d	; 61
     8aa:	3e b7       	in	r19, 0x3e	; 62
     8ac:	80 91 9d 02 	lds	r24, 0x029D
     8b0:	90 91 9e 02 	lds	r25, 0x029E
     8b4:	28 1b       	sub	r18, r24
     8b6:	39 0b       	sbc	r19, r25
     8b8:	e0 91 2d 03 	lds	r30, 0x032D
     8bc:	f0 91 2e 03 	lds	r31, 0x032E
     8c0:	e2 17       	cp	r30, r18
     8c2:	f3 07       	cpc	r31, r19
     8c4:	98 f4       	brcc	.+38     	; 0x8ec <malloc+0x120>
     8c6:	2e 1b       	sub	r18, r30
     8c8:	3f 0b       	sbc	r19, r31
     8ca:	24 17       	cp	r18, r20
     8cc:	35 07       	cpc	r19, r21
     8ce:	70 f0       	brcs	.+28     	; 0x8ec <malloc+0x120>
     8d0:	ca 01       	movw	r24, r20
     8d2:	02 96       	adiw	r24, 0x02	; 2
     8d4:	28 17       	cp	r18, r24
     8d6:	39 07       	cpc	r19, r25
     8d8:	48 f0       	brcs	.+18     	; 0x8ec <malloc+0x120>
     8da:	8e 0f       	add	r24, r30
     8dc:	9f 1f       	adc	r25, r31
     8de:	90 93 2e 03 	sts	0x032E, r25
     8e2:	80 93 2d 03 	sts	0x032D, r24
     8e6:	41 93       	st	Z+, r20
     8e8:	51 93       	st	Z+, r21
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <malloc+0x124>
     8ec:	e0 e0       	ldi	r30, 0x00	; 0
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	cf 01       	movw	r24, r30
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <free>:
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	9c 01       	movw	r18, r24
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	09 f4       	brne	.+2      	; 0x908 <free+0x10>
     906:	8c c0       	rjmp	.+280    	; 0xa20 <free+0x128>
     908:	dc 01       	movw	r26, r24
     90a:	12 97       	sbiw	r26, 0x02	; 2
     90c:	13 96       	adiw	r26, 0x03	; 3
     90e:	1c 92       	st	X, r1
     910:	1e 92       	st	-X, r1
     912:	12 97       	sbiw	r26, 0x02	; 2
     914:	60 91 2f 03 	lds	r22, 0x032F
     918:	70 91 30 03 	lds	r23, 0x0330
     91c:	61 15       	cp	r22, r1
     91e:	71 05       	cpc	r23, r1
     920:	89 f4       	brne	.+34     	; 0x944 <free+0x4c>
     922:	8d 91       	ld	r24, X+
     924:	9c 91       	ld	r25, X
     926:	11 97       	sbiw	r26, 0x01	; 1
     928:	82 0f       	add	r24, r18
     92a:	93 1f       	adc	r25, r19
     92c:	20 91 2d 03 	lds	r18, 0x032D
     930:	30 91 2e 03 	lds	r19, 0x032E
     934:	28 17       	cp	r18, r24
     936:	39 07       	cpc	r19, r25
     938:	69 f5       	brne	.+90     	; 0x994 <free+0x9c>
     93a:	b0 93 2e 03 	sts	0x032E, r27
     93e:	a0 93 2d 03 	sts	0x032D, r26
     942:	6e c0       	rjmp	.+220    	; 0xa20 <free+0x128>
     944:	fb 01       	movw	r30, r22
     946:	40 e0       	ldi	r20, 0x00	; 0
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	01 c0       	rjmp	.+2      	; 0x94e <free+0x56>
     94c:	fc 01       	movw	r30, r24
     94e:	ea 17       	cp	r30, r26
     950:	fb 07       	cpc	r31, r27
     952:	30 f4       	brcc	.+12     	; 0x960 <free+0x68>
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	af 01       	movw	r20, r30
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	b9 f7       	brne	.-18     	; 0x94c <free+0x54>
     95e:	1f c0       	rjmp	.+62     	; 0x99e <free+0xa6>
     960:	e9 01       	movw	r28, r18
     962:	22 97       	sbiw	r28, 0x02	; 2
     964:	fb 83       	std	Y+3, r31	; 0x03
     966:	ea 83       	std	Y+2, r30	; 0x02
     968:	08 81       	ld	r16, Y
     96a:	19 81       	ldd	r17, Y+1	; 0x01
     96c:	c9 01       	movw	r24, r18
     96e:	80 0f       	add	r24, r16
     970:	91 1f       	adc	r25, r17
     972:	8e 17       	cp	r24, r30
     974:	9f 07       	cpc	r25, r31
     976:	59 f4       	brne	.+22     	; 0x98e <free+0x96>
     978:	80 81       	ld	r24, Z
     97a:	91 81       	ldd	r25, Z+1	; 0x01
     97c:	80 0f       	add	r24, r16
     97e:	91 1f       	adc	r25, r17
     980:	02 96       	adiw	r24, 0x02	; 2
     982:	99 83       	std	Y+1, r25	; 0x01
     984:	88 83       	st	Y, r24
     986:	82 81       	ldd	r24, Z+2	; 0x02
     988:	93 81       	ldd	r25, Z+3	; 0x03
     98a:	9b 83       	std	Y+3, r25	; 0x03
     98c:	8a 83       	std	Y+2, r24	; 0x02
     98e:	41 15       	cp	r20, r1
     990:	51 05       	cpc	r21, r1
     992:	29 f4       	brne	.+10     	; 0x99e <free+0xa6>
     994:	b0 93 30 03 	sts	0x0330, r27
     998:	a0 93 2f 03 	sts	0x032F, r26
     99c:	41 c0       	rjmp	.+130    	; 0xa20 <free+0x128>
     99e:	fa 01       	movw	r30, r20
     9a0:	b3 83       	std	Z+3, r27	; 0x03
     9a2:	a2 83       	std	Z+2, r26	; 0x02
     9a4:	c1 91       	ld	r28, Z+
     9a6:	d1 91       	ld	r29, Z+
     9a8:	ec 0f       	add	r30, r28
     9aa:	fd 1f       	adc	r31, r29
     9ac:	ae 17       	cp	r26, r30
     9ae:	bf 07       	cpc	r27, r31
     9b0:	81 f4       	brne	.+32     	; 0x9d2 <free+0xda>
     9b2:	f9 01       	movw	r30, r18
     9b4:	92 91       	ld	r25, -Z
     9b6:	82 91       	ld	r24, -Z
     9b8:	8c 0f       	add	r24, r28
     9ba:	9d 1f       	adc	r25, r29
     9bc:	02 96       	adiw	r24, 0x02	; 2
     9be:	da 01       	movw	r26, r20
     9c0:	11 96       	adiw	r26, 0x01	; 1
     9c2:	9c 93       	st	X, r25
     9c4:	8e 93       	st	-X, r24
     9c6:	82 81       	ldd	r24, Z+2	; 0x02
     9c8:	93 81       	ldd	r25, Z+3	; 0x03
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	9c 93       	st	X, r25
     9ce:	8e 93       	st	-X, r24
     9d0:	12 97       	sbiw	r26, 0x02	; 2
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <free+0xe4>
     9d8:	fb 01       	movw	r30, r22
     9da:	bc 01       	movw	r22, r24
     9dc:	db 01       	movw	r26, r22
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	8d 91       	ld	r24, X+
     9e2:	9c 91       	ld	r25, X
     9e4:	13 97       	sbiw	r26, 0x03	; 3
     9e6:	00 97       	sbiw	r24, 0x00	; 0
     9e8:	b9 f7       	brne	.-18     	; 0x9d8 <free+0xe0>
     9ea:	cb 01       	movw	r24, r22
     9ec:	02 96       	adiw	r24, 0x02	; 2
     9ee:	2d 91       	ld	r18, X+
     9f0:	3c 91       	ld	r19, X
     9f2:	11 97       	sbiw	r26, 0x01	; 1
     9f4:	82 0f       	add	r24, r18
     9f6:	93 1f       	adc	r25, r19
     9f8:	20 91 2d 03 	lds	r18, 0x032D
     9fc:	30 91 2e 03 	lds	r19, 0x032E
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	69 f4       	brne	.+26     	; 0xa20 <free+0x128>
     a06:	30 97       	sbiw	r30, 0x00	; 0
     a08:	29 f4       	brne	.+10     	; 0xa14 <free+0x11c>
     a0a:	10 92 30 03 	sts	0x0330, r1
     a0e:	10 92 2f 03 	sts	0x032F, r1
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <free+0x120>
     a14:	13 82       	std	Z+3, r1	; 0x03
     a16:	12 82       	std	Z+2, r1	; 0x02
     a18:	70 93 2e 03 	sts	0x032E, r23
     a1c:	60 93 2d 03 	sts	0x032D, r22
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <atoi>:
     a2a:	fc 01       	movw	r30, r24
     a2c:	88 27       	eor	r24, r24
     a2e:	99 27       	eor	r25, r25
     a30:	e8 94       	clt
     a32:	21 91       	ld	r18, Z+
     a34:	20 32       	cpi	r18, 0x20	; 32
     a36:	e9 f3       	breq	.-6      	; 0xa32 <atoi+0x8>
     a38:	29 30       	cpi	r18, 0x09	; 9
     a3a:	10 f0       	brcs	.+4      	; 0xa40 <atoi+0x16>
     a3c:	2e 30       	cpi	r18, 0x0E	; 14
     a3e:	c8 f3       	brcs	.-14     	; 0xa32 <atoi+0x8>
     a40:	2b 32       	cpi	r18, 0x2B	; 43
     a42:	41 f0       	breq	.+16     	; 0xa54 <atoi+0x2a>
     a44:	2d 32       	cpi	r18, 0x2D	; 45
     a46:	39 f4       	brne	.+14     	; 0xa56 <atoi+0x2c>
     a48:	68 94       	set
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <atoi+0x2a>
     a4c:	0e 94 68 05 	call	0xad0	; 0xad0 <__mulhi_const_10>
     a50:	82 0f       	add	r24, r18
     a52:	91 1d       	adc	r25, r1
     a54:	21 91       	ld	r18, Z+
     a56:	20 53       	subi	r18, 0x30	; 48
     a58:	2a 30       	cpi	r18, 0x0A	; 10
     a5a:	c0 f3       	brcs	.-16     	; 0xa4c <atoi+0x22>
     a5c:	1e f4       	brtc	.+6      	; 0xa64 <atoi+0x3a>
     a5e:	90 95       	com	r25
     a60:	81 95       	neg	r24
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	08 95       	ret

00000a66 <strtok>:
     a66:	42 ea       	ldi	r20, 0xA2	; 162
     a68:	52 e0       	ldi	r21, 0x02	; 2
     a6a:	0e 94 41 05 	call	0xa82	; 0xa82 <strtok_r>
     a6e:	08 95       	ret

00000a70 <strcmp>:
     a70:	fb 01       	movw	r30, r22
     a72:	dc 01       	movw	r26, r24
     a74:	8d 91       	ld	r24, X+
     a76:	01 90       	ld	r0, Z+
     a78:	80 19       	sub	r24, r0
     a7a:	01 10       	cpse	r0, r1
     a7c:	d9 f3       	breq	.-10     	; 0xa74 <strcmp+0x4>
     a7e:	99 0b       	sbc	r25, r25
     a80:	08 95       	ret

00000a82 <strtok_r>:
     a82:	fa 01       	movw	r30, r20
     a84:	a1 91       	ld	r26, Z+
     a86:	b0 81       	ld	r27, Z
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	19 f4       	brne	.+6      	; 0xa92 <strtok_r+0x10>
     a8c:	10 97       	sbiw	r26, 0x00	; 0
     a8e:	e1 f0       	breq	.+56     	; 0xac8 <strtok_r+0x46>
     a90:	cd 01       	movw	r24, r26
     a92:	dc 01       	movw	r26, r24
     a94:	cd 01       	movw	r24, r26
     a96:	0d 90       	ld	r0, X+
     a98:	00 20       	and	r0, r0
     a9a:	11 f4       	brne	.+4      	; 0xaa0 <strtok_r+0x1e>
     a9c:	c0 01       	movw	r24, r0
     a9e:	13 c0       	rjmp	.+38     	; 0xac6 <strtok_r+0x44>
     aa0:	fb 01       	movw	r30, r22
     aa2:	21 91       	ld	r18, Z+
     aa4:	22 23       	and	r18, r18
     aa6:	19 f0       	breq	.+6      	; 0xaae <strtok_r+0x2c>
     aa8:	20 15       	cp	r18, r0
     aaa:	d9 f7       	brne	.-10     	; 0xaa2 <strtok_r+0x20>
     aac:	f3 cf       	rjmp	.-26     	; 0xa94 <strtok_r+0x12>
     aae:	fb 01       	movw	r30, r22
     ab0:	21 91       	ld	r18, Z+
     ab2:	20 15       	cp	r18, r0
     ab4:	19 f4       	brne	.+6      	; 0xabc <strtok_r+0x3a>
     ab6:	1e 92       	st	-X, r1
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	06 c0       	rjmp	.+12     	; 0xac8 <strtok_r+0x46>
     abc:	22 23       	and	r18, r18
     abe:	c1 f7       	brne	.-16     	; 0xab0 <strtok_r+0x2e>
     ac0:	0d 90       	ld	r0, X+
     ac2:	00 20       	and	r0, r0
     ac4:	a1 f7       	brne	.-24     	; 0xaae <strtok_r+0x2c>
     ac6:	d0 01       	movw	r26, r0
     ac8:	fa 01       	movw	r30, r20
     aca:	a1 93       	st	Z+, r26
     acc:	b0 83       	st	Z, r27
     ace:	08 95       	ret

00000ad0 <__mulhi_const_10>:
     ad0:	7a e0       	ldi	r23, 0x0A	; 10
     ad2:	97 9f       	mul	r25, r23
     ad4:	90 2d       	mov	r25, r0
     ad6:	87 9f       	mul	r24, r23
     ad8:	80 2d       	mov	r24, r0
     ada:	91 0d       	add	r25, r1
     adc:	11 24       	eor	r1, r1
     ade:	08 95       	ret

00000ae0 <fgets>:
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	8c 01       	movw	r16, r24
     af2:	6a 01       	movw	r12, r20
     af4:	fa 01       	movw	r30, r20
     af6:	83 81       	ldd	r24, Z+3	; 0x03
     af8:	80 ff       	sbrs	r24, 0
     afa:	1a c0       	rjmp	.+52     	; 0xb30 <fgets+0x50>
     afc:	16 16       	cp	r1, r22
     afe:	17 06       	cpc	r1, r23
     b00:	bc f4       	brge	.+46     	; 0xb30 <fgets+0x50>
     b02:	7b 01       	movw	r14, r22
     b04:	e8 01       	movw	r28, r16
     b06:	0e c0       	rjmp	.+28     	; 0xb24 <fgets+0x44>
     b08:	c6 01       	movw	r24, r12
     b0a:	0e 94 08 08 	call	0x1010	; 0x1010 <fgetc>
     b0e:	ff ef       	ldi	r31, 0xFF	; 255
     b10:	8f 3f       	cpi	r24, 0xFF	; 255
     b12:	9f 07       	cpc	r25, r31
     b14:	69 f0       	breq	.+26     	; 0xb30 <fgets+0x50>
     b16:	89 93       	st	Y+, r24
     b18:	08 94       	sec
     b1a:	e1 08       	sbc	r14, r1
     b1c:	f1 08       	sbc	r15, r1
     b1e:	8a 30       	cpi	r24, 0x0A	; 10
     b20:	91 05       	cpc	r25, r1
     b22:	21 f0       	breq	.+8      	; 0xb2c <fgets+0x4c>
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	e2 16       	cp	r14, r18
     b28:	f1 04       	cpc	r15, r1
     b2a:	71 f7       	brne	.-36     	; 0xb08 <fgets+0x28>
     b2c:	18 82       	st	Y, r1
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <fgets+0x54>
     b30:	00 e0       	ldi	r16, 0x00	; 0
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	c8 01       	movw	r24, r16
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	08 95       	ret

00000b48 <printf>:
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	fe 01       	movw	r30, r28
     b52:	36 96       	adiw	r30, 0x06	; 6
     b54:	61 91       	ld	r22, Z+
     b56:	71 91       	ld	r23, Z+
     b58:	80 91 33 03 	lds	r24, 0x0333
     b5c:	90 91 34 03 	lds	r25, 0x0334
     b60:	af 01       	movw	r20, r30
     b62:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <vfprintf>
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <putchar>:
     b6c:	60 91 33 03 	lds	r22, 0x0333
     b70:	70 91 34 03 	lds	r23, 0x0334
     b74:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     b78:	08 95       	ret

00000b7a <puts>:
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	8c 01       	movw	r16, r24
     b84:	e0 91 33 03 	lds	r30, 0x0333
     b88:	f0 91 34 03 	lds	r31, 0x0334
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	81 ff       	sbrs	r24, 1
     b90:	1a c0       	rjmp	.+52     	; 0xbc6 <puts+0x4c>
     b92:	c0 e0       	ldi	r28, 0x00	; 0
     b94:	d0 e0       	ldi	r29, 0x00	; 0
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <puts+0x28>
     b98:	19 95       	eicall
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	11 f0       	breq	.+4      	; 0xba2 <puts+0x28>
     b9e:	cf ef       	ldi	r28, 0xFF	; 255
     ba0:	df ef       	ldi	r29, 0xFF	; 255
     ba2:	f8 01       	movw	r30, r16
     ba4:	81 91       	ld	r24, Z+
     ba6:	8f 01       	movw	r16, r30
     ba8:	60 91 33 03 	lds	r22, 0x0333
     bac:	70 91 34 03 	lds	r23, 0x0334
     bb0:	db 01       	movw	r26, r22
     bb2:	18 96       	adiw	r26, 0x08	; 8
     bb4:	ed 91       	ld	r30, X+
     bb6:	fc 91       	ld	r31, X
     bb8:	19 97       	sbiw	r26, 0x09	; 9
     bba:	88 23       	and	r24, r24
     bbc:	69 f7       	brne	.-38     	; 0xb98 <puts+0x1e>
     bbe:	8a e0       	ldi	r24, 0x0A	; 10
     bc0:	19 95       	eicall
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	11 f0       	breq	.+4      	; 0xbca <puts+0x50>
     bc6:	cf ef       	ldi	r28, 0xFF	; 255
     bc8:	df ef       	ldi	r29, 0xFF	; 255
     bca:	ce 01       	movw	r24, r28
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <vfprintf>:
     bd6:	2f 92       	push	r2
     bd8:	3f 92       	push	r3
     bda:	4f 92       	push	r4
     bdc:	5f 92       	push	r5
     bde:	6f 92       	push	r6
     be0:	7f 92       	push	r7
     be2:	8f 92       	push	r8
     be4:	9f 92       	push	r9
     be6:	af 92       	push	r10
     be8:	bf 92       	push	r11
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	2d 97       	sbiw	r28, 0x0d	; 13
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	3c 01       	movw	r6, r24
     c0c:	7d 87       	std	Y+13, r23	; 0x0d
     c0e:	6c 87       	std	Y+12, r22	; 0x0c
     c10:	5a 01       	movw	r10, r20
     c12:	fc 01       	movw	r30, r24
     c14:	17 82       	std	Z+7, r1	; 0x07
     c16:	16 82       	std	Z+6, r1	; 0x06
     c18:	83 81       	ldd	r24, Z+3	; 0x03
     c1a:	81 ff       	sbrs	r24, 1
     c1c:	c8 c1       	rjmp	.+912    	; 0xfae <vfprintf+0x3d8>
     c1e:	2e 01       	movw	r4, r28
     c20:	08 94       	sec
     c22:	41 1c       	adc	r4, r1
     c24:	51 1c       	adc	r5, r1
     c26:	f3 01       	movw	r30, r6
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	ec 85       	ldd	r30, Y+12	; 0x0c
     c2c:	fd 85       	ldd	r31, Y+13	; 0x0d
     c2e:	93 fd       	sbrc	r25, 3
     c30:	85 91       	lpm	r24, Z+
     c32:	93 ff       	sbrs	r25, 3
     c34:	81 91       	ld	r24, Z+
     c36:	fd 87       	std	Y+13, r31	; 0x0d
     c38:	ec 87       	std	Y+12, r30	; 0x0c
     c3a:	88 23       	and	r24, r24
     c3c:	09 f4       	brne	.+2      	; 0xc40 <vfprintf+0x6a>
     c3e:	b3 c1       	rjmp	.+870    	; 0xfa6 <vfprintf+0x3d0>
     c40:	85 32       	cpi	r24, 0x25	; 37
     c42:	41 f4       	brne	.+16     	; 0xc54 <vfprintf+0x7e>
     c44:	93 fd       	sbrc	r25, 3
     c46:	85 91       	lpm	r24, Z+
     c48:	93 ff       	sbrs	r25, 3
     c4a:	81 91       	ld	r24, Z+
     c4c:	fd 87       	std	Y+13, r31	; 0x0d
     c4e:	ec 87       	std	Y+12, r30	; 0x0c
     c50:	85 32       	cpi	r24, 0x25	; 37
     c52:	29 f4       	brne	.+10     	; 0xc5e <vfprintf+0x88>
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	b3 01       	movw	r22, r6
     c58:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     c5c:	e4 cf       	rjmp	.-56     	; 0xc26 <vfprintf+0x50>
     c5e:	ff 24       	eor	r15, r15
     c60:	ee 24       	eor	r14, r14
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	10 32       	cpi	r17, 0x20	; 32
     c66:	b0 f4       	brcc	.+44     	; 0xc94 <vfprintf+0xbe>
     c68:	8b 32       	cpi	r24, 0x2B	; 43
     c6a:	69 f0       	breq	.+26     	; 0xc86 <vfprintf+0xb0>
     c6c:	8c 32       	cpi	r24, 0x2C	; 44
     c6e:	28 f4       	brcc	.+10     	; 0xc7a <vfprintf+0xa4>
     c70:	80 32       	cpi	r24, 0x20	; 32
     c72:	51 f0       	breq	.+20     	; 0xc88 <vfprintf+0xb2>
     c74:	83 32       	cpi	r24, 0x23	; 35
     c76:	71 f4       	brne	.+28     	; 0xc94 <vfprintf+0xbe>
     c78:	0b c0       	rjmp	.+22     	; 0xc90 <vfprintf+0xba>
     c7a:	8d 32       	cpi	r24, 0x2D	; 45
     c7c:	39 f0       	breq	.+14     	; 0xc8c <vfprintf+0xb6>
     c7e:	80 33       	cpi	r24, 0x30	; 48
     c80:	49 f4       	brne	.+18     	; 0xc94 <vfprintf+0xbe>
     c82:	11 60       	ori	r17, 0x01	; 1
     c84:	2c c0       	rjmp	.+88     	; 0xcde <vfprintf+0x108>
     c86:	12 60       	ori	r17, 0x02	; 2
     c88:	14 60       	ori	r17, 0x04	; 4
     c8a:	29 c0       	rjmp	.+82     	; 0xcde <vfprintf+0x108>
     c8c:	18 60       	ori	r17, 0x08	; 8
     c8e:	27 c0       	rjmp	.+78     	; 0xcde <vfprintf+0x108>
     c90:	10 61       	ori	r17, 0x10	; 16
     c92:	25 c0       	rjmp	.+74     	; 0xcde <vfprintf+0x108>
     c94:	17 fd       	sbrc	r17, 7
     c96:	2e c0       	rjmp	.+92     	; 0xcf4 <vfprintf+0x11e>
     c98:	28 2f       	mov	r18, r24
     c9a:	20 53       	subi	r18, 0x30	; 48
     c9c:	2a 30       	cpi	r18, 0x0A	; 10
     c9e:	98 f4       	brcc	.+38     	; 0xcc6 <vfprintf+0xf0>
     ca0:	16 ff       	sbrs	r17, 6
     ca2:	08 c0       	rjmp	.+16     	; 0xcb4 <vfprintf+0xde>
     ca4:	8f 2d       	mov	r24, r15
     ca6:	88 0f       	add	r24, r24
     ca8:	f8 2e       	mov	r15, r24
     caa:	ff 0c       	add	r15, r15
     cac:	ff 0c       	add	r15, r15
     cae:	f8 0e       	add	r15, r24
     cb0:	f2 0e       	add	r15, r18
     cb2:	15 c0       	rjmp	.+42     	; 0xcde <vfprintf+0x108>
     cb4:	8e 2d       	mov	r24, r14
     cb6:	88 0f       	add	r24, r24
     cb8:	e8 2e       	mov	r14, r24
     cba:	ee 0c       	add	r14, r14
     cbc:	ee 0c       	add	r14, r14
     cbe:	e8 0e       	add	r14, r24
     cc0:	e2 0e       	add	r14, r18
     cc2:	10 62       	ori	r17, 0x20	; 32
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <vfprintf+0x108>
     cc6:	8e 32       	cpi	r24, 0x2E	; 46
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <vfprintf+0xfc>
     cca:	16 fd       	sbrc	r17, 6
     ccc:	6c c1       	rjmp	.+728    	; 0xfa6 <vfprintf+0x3d0>
     cce:	10 64       	ori	r17, 0x40	; 64
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <vfprintf+0x108>
     cd2:	8c 36       	cpi	r24, 0x6C	; 108
     cd4:	11 f4       	brne	.+4      	; 0xcda <vfprintf+0x104>
     cd6:	10 68       	ori	r17, 0x80	; 128
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <vfprintf+0x108>
     cda:	88 36       	cpi	r24, 0x68	; 104
     cdc:	59 f4       	brne	.+22     	; 0xcf4 <vfprintf+0x11e>
     cde:	ec 85       	ldd	r30, Y+12	; 0x0c
     ce0:	fd 85       	ldd	r31, Y+13	; 0x0d
     ce2:	93 fd       	sbrc	r25, 3
     ce4:	85 91       	lpm	r24, Z+
     ce6:	93 ff       	sbrs	r25, 3
     ce8:	81 91       	ld	r24, Z+
     cea:	fd 87       	std	Y+13, r31	; 0x0d
     cec:	ec 87       	std	Y+12, r30	; 0x0c
     cee:	88 23       	and	r24, r24
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <vfprintf+0x11e>
     cf2:	b8 cf       	rjmp	.-144    	; 0xc64 <vfprintf+0x8e>
     cf4:	98 2f       	mov	r25, r24
     cf6:	95 54       	subi	r25, 0x45	; 69
     cf8:	93 30       	cpi	r25, 0x03	; 3
     cfa:	18 f0       	brcs	.+6      	; 0xd02 <vfprintf+0x12c>
     cfc:	90 52       	subi	r25, 0x20	; 32
     cfe:	93 30       	cpi	r25, 0x03	; 3
     d00:	38 f4       	brcc	.+14     	; 0xd10 <vfprintf+0x13a>
     d02:	24 e0       	ldi	r18, 0x04	; 4
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	a2 0e       	add	r10, r18
     d08:	b3 1e       	adc	r11, r19
     d0a:	3f e3       	ldi	r19, 0x3F	; 63
     d0c:	39 83       	std	Y+1, r19	; 0x01
     d0e:	0f c0       	rjmp	.+30     	; 0xd2e <vfprintf+0x158>
     d10:	83 36       	cpi	r24, 0x63	; 99
     d12:	31 f0       	breq	.+12     	; 0xd20 <vfprintf+0x14a>
     d14:	83 37       	cpi	r24, 0x73	; 115
     d16:	81 f0       	breq	.+32     	; 0xd38 <vfprintf+0x162>
     d18:	83 35       	cpi	r24, 0x53	; 83
     d1a:	09 f0       	breq	.+2      	; 0xd1e <vfprintf+0x148>
     d1c:	5a c0       	rjmp	.+180    	; 0xdd2 <vfprintf+0x1fc>
     d1e:	22 c0       	rjmp	.+68     	; 0xd64 <vfprintf+0x18e>
     d20:	f5 01       	movw	r30, r10
     d22:	80 81       	ld	r24, Z
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	22 e0       	ldi	r18, 0x02	; 2
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a2 0e       	add	r10, r18
     d2c:	b3 1e       	adc	r11, r19
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	c2 2e       	mov	r12, r18
     d32:	d1 2c       	mov	r13, r1
     d34:	42 01       	movw	r8, r4
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <vfprintf+0x18a>
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	29 2e       	mov	r2, r25
     d3c:	31 2c       	mov	r3, r1
     d3e:	2a 0c       	add	r2, r10
     d40:	3b 1c       	adc	r3, r11
     d42:	f5 01       	movw	r30, r10
     d44:	80 80       	ld	r8, Z
     d46:	91 80       	ldd	r9, Z+1	; 0x01
     d48:	16 ff       	sbrs	r17, 6
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <vfprintf+0x17c>
     d4c:	6f 2d       	mov	r22, r15
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x180>
     d52:	6f ef       	ldi	r22, 0xFF	; 255
     d54:	7f ef       	ldi	r23, 0xFF	; 255
     d56:	c4 01       	movw	r24, r8
     d58:	0e 94 fd 07 	call	0xffa	; 0xffa <strnlen>
     d5c:	6c 01       	movw	r12, r24
     d5e:	51 01       	movw	r10, r2
     d60:	1f 77       	andi	r17, 0x7F	; 127
     d62:	15 c0       	rjmp	.+42     	; 0xd8e <vfprintf+0x1b8>
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	28 2e       	mov	r2, r24
     d68:	31 2c       	mov	r3, r1
     d6a:	2a 0c       	add	r2, r10
     d6c:	3b 1c       	adc	r3, r11
     d6e:	f5 01       	movw	r30, r10
     d70:	80 80       	ld	r8, Z
     d72:	91 80       	ldd	r9, Z+1	; 0x01
     d74:	16 ff       	sbrs	r17, 6
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <vfprintf+0x1a8>
     d78:	6f 2d       	mov	r22, r15
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <vfprintf+0x1ac>
     d7e:	6f ef       	ldi	r22, 0xFF	; 255
     d80:	7f ef       	ldi	r23, 0xFF	; 255
     d82:	c4 01       	movw	r24, r8
     d84:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <strnlen_P>
     d88:	6c 01       	movw	r12, r24
     d8a:	10 68       	ori	r17, 0x80	; 128
     d8c:	51 01       	movw	r10, r2
     d8e:	13 fd       	sbrc	r17, 3
     d90:	1c c0       	rjmp	.+56     	; 0xdca <vfprintf+0x1f4>
     d92:	06 c0       	rjmp	.+12     	; 0xda0 <vfprintf+0x1ca>
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	b3 01       	movw	r22, r6
     d9a:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     d9e:	ea 94       	dec	r14
     da0:	8e 2d       	mov	r24, r14
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	c8 16       	cp	r12, r24
     da6:	d9 06       	cpc	r13, r25
     da8:	a8 f3       	brcs	.-22     	; 0xd94 <vfprintf+0x1be>
     daa:	0f c0       	rjmp	.+30     	; 0xdca <vfprintf+0x1f4>
     dac:	f4 01       	movw	r30, r8
     dae:	17 fd       	sbrc	r17, 7
     db0:	85 91       	lpm	r24, Z+
     db2:	17 ff       	sbrs	r17, 7
     db4:	81 91       	ld	r24, Z+
     db6:	4f 01       	movw	r8, r30
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	b3 01       	movw	r22, r6
     dbc:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     dc0:	e1 10       	cpse	r14, r1
     dc2:	ea 94       	dec	r14
     dc4:	08 94       	sec
     dc6:	c1 08       	sbc	r12, r1
     dc8:	d1 08       	sbc	r13, r1
     dca:	c1 14       	cp	r12, r1
     dcc:	d1 04       	cpc	r13, r1
     dce:	71 f7       	brne	.-36     	; 0xdac <vfprintf+0x1d6>
     dd0:	e7 c0       	rjmp	.+462    	; 0xfa0 <vfprintf+0x3ca>
     dd2:	84 36       	cpi	r24, 0x64	; 100
     dd4:	11 f0       	breq	.+4      	; 0xdda <vfprintf+0x204>
     dd6:	89 36       	cpi	r24, 0x69	; 105
     dd8:	51 f5       	brne	.+84     	; 0xe2e <vfprintf+0x258>
     dda:	f5 01       	movw	r30, r10
     ddc:	17 ff       	sbrs	r17, 7
     dde:	07 c0       	rjmp	.+14     	; 0xdee <vfprintf+0x218>
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	a2 81       	ldd	r26, Z+2	; 0x02
     de6:	b3 81       	ldd	r27, Z+3	; 0x03
     de8:	24 e0       	ldi	r18, 0x04	; 4
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <vfprintf+0x228>
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	aa 27       	eor	r26, r26
     df4:	97 fd       	sbrc	r25, 7
     df6:	a0 95       	com	r26
     df8:	ba 2f       	mov	r27, r26
     dfa:	22 e0       	ldi	r18, 0x02	; 2
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	a2 0e       	add	r10, r18
     e00:	b3 1e       	adc	r11, r19
     e02:	01 2f       	mov	r16, r17
     e04:	0f 76       	andi	r16, 0x6F	; 111
     e06:	b7 ff       	sbrs	r27, 7
     e08:	08 c0       	rjmp	.+16     	; 0xe1a <vfprintf+0x244>
     e0a:	b0 95       	com	r27
     e0c:	a0 95       	com	r26
     e0e:	90 95       	com	r25
     e10:	81 95       	neg	r24
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	af 4f       	sbci	r26, 0xFF	; 255
     e16:	bf 4f       	sbci	r27, 0xFF	; 255
     e18:	00 68       	ori	r16, 0x80	; 128
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	a2 01       	movw	r20, r4
     e20:	2a e0       	ldi	r18, 0x0A	; 10
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__ultoa_invert>
     e28:	d8 2e       	mov	r13, r24
     e2a:	d4 18       	sub	r13, r4
     e2c:	3f c0       	rjmp	.+126    	; 0xeac <vfprintf+0x2d6>
     e2e:	85 37       	cpi	r24, 0x75	; 117
     e30:	21 f4       	brne	.+8      	; 0xe3a <vfprintf+0x264>
     e32:	1f 7e       	andi	r17, 0xEF	; 239
     e34:	2a e0       	ldi	r18, 0x0A	; 10
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	20 c0       	rjmp	.+64     	; 0xe7a <vfprintf+0x2a4>
     e3a:	19 7f       	andi	r17, 0xF9	; 249
     e3c:	8f 36       	cpi	r24, 0x6F	; 111
     e3e:	a9 f0       	breq	.+42     	; 0xe6a <vfprintf+0x294>
     e40:	80 37       	cpi	r24, 0x70	; 112
     e42:	20 f4       	brcc	.+8      	; 0xe4c <vfprintf+0x276>
     e44:	88 35       	cpi	r24, 0x58	; 88
     e46:	09 f0       	breq	.+2      	; 0xe4a <vfprintf+0x274>
     e48:	ae c0       	rjmp	.+348    	; 0xfa6 <vfprintf+0x3d0>
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <vfprintf+0x28c>
     e4c:	80 37       	cpi	r24, 0x70	; 112
     e4e:	21 f0       	breq	.+8      	; 0xe58 <vfprintf+0x282>
     e50:	88 37       	cpi	r24, 0x78	; 120
     e52:	09 f0       	breq	.+2      	; 0xe56 <vfprintf+0x280>
     e54:	a8 c0       	rjmp	.+336    	; 0xfa6 <vfprintf+0x3d0>
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x284>
     e58:	10 61       	ori	r17, 0x10	; 16
     e5a:	14 ff       	sbrs	r17, 4
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <vfprintf+0x29a>
     e5e:	14 60       	ori	r17, 0x04	; 4
     e60:	07 c0       	rjmp	.+14     	; 0xe70 <vfprintf+0x29a>
     e62:	14 ff       	sbrs	r17, 4
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <vfprintf+0x2a0>
     e66:	16 60       	ori	r17, 0x06	; 6
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <vfprintf+0x2a0>
     e6a:	28 e0       	ldi	r18, 0x08	; 8
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <vfprintf+0x2a4>
     e70:	20 e1       	ldi	r18, 0x10	; 16
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <vfprintf+0x2a4>
     e76:	20 e1       	ldi	r18, 0x10	; 16
     e78:	32 e0       	ldi	r19, 0x02	; 2
     e7a:	f5 01       	movw	r30, r10
     e7c:	17 ff       	sbrs	r17, 7
     e7e:	07 c0       	rjmp	.+14     	; 0xe8e <vfprintf+0x2b8>
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	44 e0       	ldi	r20, 0x04	; 4
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0x2c4>
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	42 e0       	ldi	r20, 0x02	; 2
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	a4 0e       	add	r10, r20
     e9c:	b5 1e       	adc	r11, r21
     e9e:	a2 01       	movw	r20, r4
     ea0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__ultoa_invert>
     ea4:	d8 2e       	mov	r13, r24
     ea6:	d4 18       	sub	r13, r4
     ea8:	01 2f       	mov	r16, r17
     eaa:	0f 77       	andi	r16, 0x7F	; 127
     eac:	06 ff       	sbrs	r16, 6
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <vfprintf+0x2ec>
     eb0:	0e 7f       	andi	r16, 0xFE	; 254
     eb2:	df 14       	cp	r13, r15
     eb4:	30 f4       	brcc	.+12     	; 0xec2 <vfprintf+0x2ec>
     eb6:	04 ff       	sbrs	r16, 4
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <vfprintf+0x2f0>
     eba:	02 fd       	sbrc	r16, 2
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <vfprintf+0x2f0>
     ebe:	0f 7e       	andi	r16, 0xEF	; 239
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0x2f0>
     ec2:	1d 2d       	mov	r17, r13
     ec4:	01 c0       	rjmp	.+2      	; 0xec8 <vfprintf+0x2f2>
     ec6:	1f 2d       	mov	r17, r15
     ec8:	80 2f       	mov	r24, r16
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	04 ff       	sbrs	r16, 4
     ece:	0c c0       	rjmp	.+24     	; 0xee8 <vfprintf+0x312>
     ed0:	fe 01       	movw	r30, r28
     ed2:	ed 0d       	add	r30, r13
     ed4:	f1 1d       	adc	r31, r1
     ed6:	20 81       	ld	r18, Z
     ed8:	20 33       	cpi	r18, 0x30	; 48
     eda:	11 f4       	brne	.+4      	; 0xee0 <vfprintf+0x30a>
     edc:	09 7e       	andi	r16, 0xE9	; 233
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <vfprintf+0x31c>
     ee0:	02 ff       	sbrs	r16, 2
     ee2:	06 c0       	rjmp	.+12     	; 0xef0 <vfprintf+0x31a>
     ee4:	1e 5f       	subi	r17, 0xFE	; 254
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <vfprintf+0x31c>
     ee8:	86 78       	andi	r24, 0x86	; 134
     eea:	90 70       	andi	r25, 0x00	; 0
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	09 f0       	breq	.+2      	; 0xef2 <vfprintf+0x31c>
     ef0:	1f 5f       	subi	r17, 0xFF	; 255
     ef2:	80 2e       	mov	r8, r16
     ef4:	99 24       	eor	r9, r9
     ef6:	03 fd       	sbrc	r16, 3
     ef8:	12 c0       	rjmp	.+36     	; 0xf1e <vfprintf+0x348>
     efa:	00 ff       	sbrs	r16, 0
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <vfprintf+0x342>
     efe:	fd 2c       	mov	r15, r13
     f00:	1e 15       	cp	r17, r14
     f02:	50 f4       	brcc	.+20     	; 0xf18 <vfprintf+0x342>
     f04:	fe 0c       	add	r15, r14
     f06:	f1 1a       	sub	r15, r17
     f08:	1e 2d       	mov	r17, r14
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <vfprintf+0x342>
     f0c:	80 e2       	ldi	r24, 0x20	; 32
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	b3 01       	movw	r22, r6
     f12:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     f16:	1f 5f       	subi	r17, 0xFF	; 255
     f18:	1e 15       	cp	r17, r14
     f1a:	c0 f3       	brcs	.-16     	; 0xf0c <vfprintf+0x336>
     f1c:	04 c0       	rjmp	.+8      	; 0xf26 <vfprintf+0x350>
     f1e:	1e 15       	cp	r17, r14
     f20:	10 f4       	brcc	.+4      	; 0xf26 <vfprintf+0x350>
     f22:	e1 1a       	sub	r14, r17
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <vfprintf+0x352>
     f26:	ee 24       	eor	r14, r14
     f28:	84 fe       	sbrs	r8, 4
     f2a:	0f c0       	rjmp	.+30     	; 0xf4a <vfprintf+0x374>
     f2c:	80 e3       	ldi	r24, 0x30	; 48
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	b3 01       	movw	r22, r6
     f32:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     f36:	82 fe       	sbrs	r8, 2
     f38:	1f c0       	rjmp	.+62     	; 0xf78 <vfprintf+0x3a2>
     f3a:	81 fe       	sbrs	r8, 1
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <vfprintf+0x36e>
     f3e:	88 e5       	ldi	r24, 0x58	; 88
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	10 c0       	rjmp	.+32     	; 0xf64 <vfprintf+0x38e>
     f44:	88 e7       	ldi	r24, 0x78	; 120
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0d c0       	rjmp	.+26     	; 0xf64 <vfprintf+0x38e>
     f4a:	c4 01       	movw	r24, r8
     f4c:	86 78       	andi	r24, 0x86	; 134
     f4e:	90 70       	andi	r25, 0x00	; 0
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	91 f0       	breq	.+36     	; 0xf78 <vfprintf+0x3a2>
     f54:	81 fc       	sbrc	r8, 1
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <vfprintf+0x386>
     f58:	80 e2       	ldi	r24, 0x20	; 32
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <vfprintf+0x388>
     f5c:	8b e2       	ldi	r24, 0x2B	; 43
     f5e:	07 fd       	sbrc	r16, 7
     f60:	8d e2       	ldi	r24, 0x2D	; 45
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	b3 01       	movw	r22, r6
     f66:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <vfprintf+0x3a2>
     f6c:	80 e3       	ldi	r24, 0x30	; 48
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	b3 01       	movw	r22, r6
     f72:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     f76:	fa 94       	dec	r15
     f78:	df 14       	cp	r13, r15
     f7a:	c0 f3       	brcs	.-16     	; 0xf6c <vfprintf+0x396>
     f7c:	da 94       	dec	r13
     f7e:	f2 01       	movw	r30, r4
     f80:	ed 0d       	add	r30, r13
     f82:	f1 1d       	adc	r31, r1
     f84:	80 81       	ld	r24, Z
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	b3 01       	movw	r22, r6
     f8a:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     f8e:	dd 20       	and	r13, r13
     f90:	a9 f7       	brne	.-22     	; 0xf7c <vfprintf+0x3a6>
     f92:	06 c0       	rjmp	.+12     	; 0xfa0 <vfprintf+0x3ca>
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	b3 01       	movw	r22, r6
     f9a:	0e 94 48 08 	call	0x1090	; 0x1090 <fputc>
     f9e:	ea 94       	dec	r14
     fa0:	ee 20       	and	r14, r14
     fa2:	c1 f7       	brne	.-16     	; 0xf94 <vfprintf+0x3be>
     fa4:	40 ce       	rjmp	.-896    	; 0xc26 <vfprintf+0x50>
     fa6:	f3 01       	movw	r30, r6
     fa8:	86 81       	ldd	r24, Z+6	; 0x06
     faa:	97 81       	ldd	r25, Z+7	; 0x07
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <vfprintf+0x3dc>
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	2d 96       	adiw	r28, 0x0d	; 13
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	de bf       	out	0x3e, r29	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	cd bf       	out	0x3d, r28	; 61
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	4f 90       	pop	r4
     fde:	3f 90       	pop	r3
     fe0:	2f 90       	pop	r2
     fe2:	08 95       	ret

00000fe4 <strnlen_P>:
     fe4:	fc 01       	movw	r30, r24
     fe6:	05 90       	lpm	r0, Z+
     fe8:	61 50       	subi	r22, 0x01	; 1
     fea:	70 40       	sbci	r23, 0x00	; 0
     fec:	01 10       	cpse	r0, r1
     fee:	d8 f7       	brcc	.-10     	; 0xfe6 <strnlen_P+0x2>
     ff0:	80 95       	com	r24
     ff2:	90 95       	com	r25
     ff4:	8e 0f       	add	r24, r30
     ff6:	9f 1f       	adc	r25, r31
     ff8:	08 95       	ret

00000ffa <strnlen>:
     ffa:	fc 01       	movw	r30, r24
     ffc:	61 50       	subi	r22, 0x01	; 1
     ffe:	70 40       	sbci	r23, 0x00	; 0
    1000:	01 90       	ld	r0, Z+
    1002:	01 10       	cpse	r0, r1
    1004:	d8 f7       	brcc	.-10     	; 0xffc <strnlen+0x2>
    1006:	80 95       	com	r24
    1008:	90 95       	com	r25
    100a:	8e 0f       	add	r24, r30
    100c:	9f 1f       	adc	r25, r31
    100e:	08 95       	ret

00001010 <fgetc>:
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	ec 01       	movw	r28, r24
    1016:	2b 81       	ldd	r18, Y+3	; 0x03
    1018:	20 ff       	sbrs	r18, 0
    101a:	35 c0       	rjmp	.+106    	; 0x1086 <fgetc+0x76>
    101c:	26 ff       	sbrs	r18, 6
    101e:	09 c0       	rjmp	.+18     	; 0x1032 <fgetc+0x22>
    1020:	2f 7b       	andi	r18, 0xBF	; 191
    1022:	2b 83       	std	Y+3, r18	; 0x03
    1024:	8e 81       	ldd	r24, Y+6	; 0x06
    1026:	9f 81       	ldd	r25, Y+7	; 0x07
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	9f 83       	std	Y+7, r25	; 0x07
    102c:	8e 83       	std	Y+6, r24	; 0x06
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 c0       	rjmp	.+80     	; 0x1082 <fgetc+0x72>
    1032:	22 ff       	sbrs	r18, 2
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <fgetc+0x44>
    1036:	e8 81       	ld	r30, Y
    1038:	f9 81       	ldd	r31, Y+1	; 0x01
    103a:	80 81       	ld	r24, Z
    103c:	99 27       	eor	r25, r25
    103e:	87 fd       	sbrc	r24, 7
    1040:	90 95       	com	r25
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	19 f4       	brne	.+6      	; 0x104c <fgetc+0x3c>
    1046:	20 62       	ori	r18, 0x20	; 32
    1048:	2b 83       	std	Y+3, r18	; 0x03
    104a:	1d c0       	rjmp	.+58     	; 0x1086 <fgetc+0x76>
    104c:	31 96       	adiw	r30, 0x01	; 1
    104e:	f9 83       	std	Y+1, r31	; 0x01
    1050:	e8 83       	st	Y, r30
    1052:	11 c0       	rjmp	.+34     	; 0x1076 <fgetc+0x66>
    1054:	ea 85       	ldd	r30, Y+10	; 0x0a
    1056:	fb 85       	ldd	r31, Y+11	; 0x0b
    1058:	ce 01       	movw	r24, r28
    105a:	19 95       	eicall
    105c:	97 ff       	sbrs	r25, 7
    105e:	0b c0       	rjmp	.+22     	; 0x1076 <fgetc+0x66>
    1060:	2b 81       	ldd	r18, Y+3	; 0x03
    1062:	3f ef       	ldi	r19, 0xFF	; 255
    1064:	8f 3f       	cpi	r24, 0xFF	; 255
    1066:	93 07       	cpc	r25, r19
    1068:	11 f4       	brne	.+4      	; 0x106e <fgetc+0x5e>
    106a:	80 e1       	ldi	r24, 0x10	; 16
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <fgetc+0x60>
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	82 2b       	or	r24, r18
    1072:	8b 83       	std	Y+3, r24	; 0x03
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <fgetc+0x76>
    1076:	2e 81       	ldd	r18, Y+6	; 0x06
    1078:	3f 81       	ldd	r19, Y+7	; 0x07
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    107e:	3f 83       	std	Y+7, r19	; 0x07
    1080:	2e 83       	std	Y+6, r18	; 0x06
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <fgetc+0x7a>
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	9f ef       	ldi	r25, 0xFF	; 255
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <fputc>:
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	8c 01       	movw	r16, r24
    109a:	eb 01       	movw	r28, r22
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	81 ff       	sbrs	r24, 1
    10a0:	1b c0       	rjmp	.+54     	; 0x10d8 <fputc+0x48>
    10a2:	82 ff       	sbrs	r24, 2
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <fputc+0x30>
    10a6:	2e 81       	ldd	r18, Y+6	; 0x06
    10a8:	3f 81       	ldd	r19, Y+7	; 0x07
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	28 17       	cp	r18, r24
    10b0:	39 07       	cpc	r19, r25
    10b2:	64 f4       	brge	.+24     	; 0x10cc <fputc+0x3c>
    10b4:	e8 81       	ld	r30, Y
    10b6:	f9 81       	ldd	r31, Y+1	; 0x01
    10b8:	01 93       	st	Z+, r16
    10ba:	f9 83       	std	Y+1, r31	; 0x01
    10bc:	e8 83       	st	Y, r30
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <fputc+0x3c>
    10c0:	e8 85       	ldd	r30, Y+8	; 0x08
    10c2:	f9 85       	ldd	r31, Y+9	; 0x09
    10c4:	80 2f       	mov	r24, r16
    10c6:	19 95       	eicall
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	31 f4       	brne	.+12     	; 0x10d8 <fputc+0x48>
    10cc:	8e 81       	ldd	r24, Y+6	; 0x06
    10ce:	9f 81       	ldd	r25, Y+7	; 0x07
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	9f 83       	std	Y+7, r25	; 0x07
    10d4:	8e 83       	std	Y+6, r24	; 0x06
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <fputc+0x4c>
    10d8:	0f ef       	ldi	r16, 0xFF	; 255
    10da:	1f ef       	ldi	r17, 0xFF	; 255
    10dc:	c8 01       	movw	r24, r16
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <__ultoa_invert>:
    10e8:	fa 01       	movw	r30, r20
    10ea:	aa 27       	eor	r26, r26
    10ec:	28 30       	cpi	r18, 0x08	; 8
    10ee:	51 f1       	breq	.+84     	; 0x1144 <__ultoa_invert+0x5c>
    10f0:	20 31       	cpi	r18, 0x10	; 16
    10f2:	81 f1       	breq	.+96     	; 0x1154 <__ultoa_invert+0x6c>
    10f4:	e8 94       	clt
    10f6:	6f 93       	push	r22
    10f8:	6e 7f       	andi	r22, 0xFE	; 254
    10fa:	6e 5f       	subi	r22, 0xFE	; 254
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	af 4f       	sbci	r26, 0xFF	; 255
    1104:	b1 e0       	ldi	r27, 0x01	; 1
    1106:	3e d0       	rcall	.+124    	; 0x1184 <__ultoa_invert+0x9c>
    1108:	b4 e0       	ldi	r27, 0x04	; 4
    110a:	3c d0       	rcall	.+120    	; 0x1184 <__ultoa_invert+0x9c>
    110c:	67 0f       	add	r22, r23
    110e:	78 1f       	adc	r23, r24
    1110:	89 1f       	adc	r24, r25
    1112:	9a 1f       	adc	r25, r26
    1114:	a1 1d       	adc	r26, r1
    1116:	68 0f       	add	r22, r24
    1118:	79 1f       	adc	r23, r25
    111a:	8a 1f       	adc	r24, r26
    111c:	91 1d       	adc	r25, r1
    111e:	a1 1d       	adc	r26, r1
    1120:	6a 0f       	add	r22, r26
    1122:	71 1d       	adc	r23, r1
    1124:	81 1d       	adc	r24, r1
    1126:	91 1d       	adc	r25, r1
    1128:	a1 1d       	adc	r26, r1
    112a:	20 d0       	rcall	.+64     	; 0x116c <__ultoa_invert+0x84>
    112c:	09 f4       	brne	.+2      	; 0x1130 <__ultoa_invert+0x48>
    112e:	68 94       	set
    1130:	3f 91       	pop	r19
    1132:	2a e0       	ldi	r18, 0x0A	; 10
    1134:	26 9f       	mul	r18, r22
    1136:	11 24       	eor	r1, r1
    1138:	30 19       	sub	r19, r0
    113a:	30 5d       	subi	r19, 0xD0	; 208
    113c:	31 93       	st	Z+, r19
    113e:	de f6       	brtc	.-74     	; 0x10f6 <__ultoa_invert+0xe>
    1140:	cf 01       	movw	r24, r30
    1142:	08 95       	ret
    1144:	46 2f       	mov	r20, r22
    1146:	47 70       	andi	r20, 0x07	; 7
    1148:	40 5d       	subi	r20, 0xD0	; 208
    114a:	41 93       	st	Z+, r20
    114c:	b3 e0       	ldi	r27, 0x03	; 3
    114e:	0f d0       	rcall	.+30     	; 0x116e <__ultoa_invert+0x86>
    1150:	c9 f7       	brne	.-14     	; 0x1144 <__ultoa_invert+0x5c>
    1152:	f6 cf       	rjmp	.-20     	; 0x1140 <__ultoa_invert+0x58>
    1154:	46 2f       	mov	r20, r22
    1156:	4f 70       	andi	r20, 0x0F	; 15
    1158:	40 5d       	subi	r20, 0xD0	; 208
    115a:	4a 33       	cpi	r20, 0x3A	; 58
    115c:	18 f0       	brcs	.+6      	; 0x1164 <__ultoa_invert+0x7c>
    115e:	49 5d       	subi	r20, 0xD9	; 217
    1160:	31 fd       	sbrc	r19, 1
    1162:	40 52       	subi	r20, 0x20	; 32
    1164:	41 93       	st	Z+, r20
    1166:	02 d0       	rcall	.+4      	; 0x116c <__ultoa_invert+0x84>
    1168:	a9 f7       	brne	.-22     	; 0x1154 <__ultoa_invert+0x6c>
    116a:	ea cf       	rjmp	.-44     	; 0x1140 <__ultoa_invert+0x58>
    116c:	b4 e0       	ldi	r27, 0x04	; 4
    116e:	a6 95       	lsr	r26
    1170:	97 95       	ror	r25
    1172:	87 95       	ror	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	ba 95       	dec	r27
    117a:	c9 f7       	brne	.-14     	; 0x116e <__ultoa_invert+0x86>
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 05       	cpc	r22, r1
    1180:	71 05       	cpc	r23, r1
    1182:	08 95       	ret
    1184:	9b 01       	movw	r18, r22
    1186:	ac 01       	movw	r20, r24
    1188:	0a 2e       	mov	r0, r26
    118a:	06 94       	lsr	r0
    118c:	57 95       	ror	r21
    118e:	47 95       	ror	r20
    1190:	37 95       	ror	r19
    1192:	27 95       	ror	r18
    1194:	ba 95       	dec	r27
    1196:	c9 f7       	brne	.-14     	; 0x118a <__ultoa_invert+0xa2>
    1198:	62 0f       	add	r22, r18
    119a:	73 1f       	adc	r23, r19
    119c:	84 1f       	adc	r24, r20
    119e:	95 1f       	adc	r25, r21
    11a0:	a0 1d       	adc	r26, r0
    11a2:	08 95       	ret

000011a4 <_exit>:
    11a4:	f8 94       	cli

000011a6 <__stop_program>:
    11a6:	ff cf       	rjmp	.-2      	; 0x11a6 <__stop_program>
