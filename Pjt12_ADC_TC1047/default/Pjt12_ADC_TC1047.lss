
Pjt12_ADC_TC1047.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000246  00800200  0000215e  000021f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000215e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000141  00800446  00800446  00002438  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  000035b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000408  00000000  00000000  00003958  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f5a  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f99  00000000  00000000  00007cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001edc  00000000  00000000  00009c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a74  00000000  00000000  0000bb30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae2  00000000  00000000  0000c5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000279f  00000000  00000000  0000d086  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000f825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e5       	ldi	r30, 0x5E	; 94
      fc:	f1 e2       	ldi	r31, 0x21	; 33
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 34       	cpi	r26, 0x46	; 70
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a6 e4       	ldi	r26, 0x46	; 70
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a7 38       	cpi	r26, 0x87	; 135
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <main>
     124:	0c 94 ad 10 	jmp	0x215a	; 0x215a <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 65 0b 	call	0x16ca	; 0x16ca <malloc>
	return(cp);
}
     134:	08 95       	ret

00000136 <free_node>:

void free_node(struct node *np)
{
	free(np);
     136:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <free>
}
     13a:	08 95       	ret

0000013c <insert_node_head>:

void insert_node_head(struct node *np)
{
     13c:	fc 01       	movw	r30, r24
	if(!Head) {
     13e:	80 91 46 04 	lds	r24, 0x0446
     142:	90 91 47 04 	lds	r25, 0x0447
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	39 f4       	brne	.+14     	; 0x158 <insert_node_head+0x1c>
		Head = np;
     14a:	f0 93 47 04 	sts	0x0447, r31
     14e:	e0 93 46 04 	sts	0x0446, r30
		np->link = NULL;
     152:	13 82       	std	Z+3, r1	; 0x03
     154:	12 82       	std	Z+2, r1	; 0x02
     156:	08 95       	ret
	} else {
		np->link = Head;
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     15c:	f0 93 47 04 	sts	0x0447, r31
     160:	e0 93 46 04 	sts	0x0446, r30
     164:	08 95       	ret

00000166 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     166:	e0 91 46 04 	lds	r30, 0x0446
     16a:	f0 91 47 04 	lds	r31, 0x0447
     16e:	30 97       	sbiw	r30, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <insert_node_tail+0x18>
		Head = np;
     172:	90 93 47 04 	sts	0x0447, r25
     176:	80 93 46 04 	sts	0x0446, r24
     17a:	08 c0       	rjmp	.+16     	; 0x18c <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     17c:	f9 01       	movw	r30, r18
     17e:	22 81       	ldd	r18, Z+2	; 0x02
     180:	33 81       	ldd	r19, Z+3	; 0x03
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	d1 f7       	brne	.-12     	; 0x17c <insert_node_tail+0x16>
			;
		cp->link = np;
     188:	93 83       	std	Z+3, r25	; 0x03
     18a:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     18c:	fc 01       	movw	r30, r24
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
}
     192:	08 95       	ret

00000194 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	
	if(!Head) {
     19a:	20 91 46 04 	lds	r18, 0x0446
     19e:	30 91 47 04 	lds	r19, 0x0447
     1a2:	21 15       	cp	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     1a8:	40 81       	ld	r20, Z
     1aa:	51 81       	ldd	r21, Z+1	; 0x01
     1ac:	d9 01       	movw	r26, r18
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	
	if(!Head) {
		Head = np;
     1b4:	90 93 47 04 	sts	0x0447, r25
     1b8:	80 93 46 04 	sts	0x0446, r24
		np->link = NULL;
     1bc:	13 82       	std	Z+3, r1	; 0x03
     1be:	12 82       	std	Z+2, r1	; 0x02
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <insert_node_ascn+0x68>
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	13 97       	sbiw	r26, 0x03	; 3
     1ca:	ed 01       	movw	r28, r26
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	39 f0       	breq	.+14     	; 0x1de <insert_node_ascn+0x4a>
     1d0:	dc 01       	movw	r26, r24
     1d2:	8d 91       	ld	r24, X+
     1d4:	9c 91       	ld	r25, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	94 f3       	brlt	.-28     	; 0x1c2 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     1de:	20 97       	sbiw	r28, 0x00	; 0
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <insert_node_ascn+0x5c>
			np->link = Head;
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1e6:	f0 93 47 04 	sts	0x0447, r31
     1ea:	e0 93 46 04 	sts	0x0446, r30
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     1f8:	fb 83       	std	Y+3, r31	; 0x03
     1fa:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <tour_list>:

void tour_list()
{
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     20a:	8a e0       	ldi	r24, 0x0A	; 10
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <putchar>
	for(cp = Head; cp->link != NULL; cp = cp->link)
     212:	c0 91 46 04 	lds	r28, 0x0446
     216:	d0 91 47 04 	lds	r29, 0x0447
		printf("-->%c ", cp->data);
     21a:	00 e0       	ldi	r16, 0x00	; 0
     21c:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     21e:	13 c0       	rjmp	.+38     	; 0x246 <tour_list+0x44>
		printf("-->%c ", cp->data);
     220:	00 d0       	rcall	.+0      	; 0x222 <tour_list+0x20>
     222:	0f 92       	push	r0
     224:	ed b7       	in	r30, 0x3d	; 61
     226:	fe b7       	in	r31, 0x3e	; 62
     228:	12 83       	std	Z+2, r17	; 0x02
     22a:	01 83       	std	Z+1, r16	; 0x01
     22c:	88 81       	ld	r24, Y
     22e:	99 81       	ldd	r25, Y+1	; 0x01
     230:	94 83       	std	Z+4, r25	; 0x04
     232:	83 83       	std	Z+3, r24	; 0x03
     234:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     238:	0a 80       	ldd	r0, Y+2	; 0x02
     23a:	db 81       	ldd	r29, Y+3	; 0x03
     23c:	c0 2d       	mov	r28, r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	9b 81       	ldd	r25, Y+3	; 0x03
     24a:	00 97       	sbiw	r24, 0x00	; 0
     24c:	49 f7       	brne	.-46     	; 0x220 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     24e:	8a e0       	ldi	r24, 0x0A	; 10
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <putchar>
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	08 95       	ret

00000260 <free_list>:

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     260:	09 c0       	rjmp	.+18     	; 0x274 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     262:	fc 01       	movw	r30, r24
     264:	22 81       	ldd	r18, Z+2	; 0x02
     266:	33 81       	ldd	r19, Z+3	; 0x03
     268:	30 93 47 04 	sts	0x0447, r19
     26c:	20 93 46 04 	sts	0x0446, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     270:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <free>

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     274:	80 91 46 04 	lds	r24, 0x0446
     278:	90 91 47 04 	lds	r25, 0x0447
     27c:	00 97       	sbiw	r24, 0x00	; 0
     27e:	89 f7       	brne	.-30     	; 0x262 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     280:	08 95       	ret

00000282 <app_list>:

void app_list(char *ap)
{
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	28 97       	sbiw	r28, 0x08	; 8
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     29c:	00 97       	sbiw	r24, 0x00	; 0
     29e:	19 f0       	breq	.+6      	; 0x2a6 <app_list+0x24>
     2a0:	fc 01       	movw	r30, r24
     2a2:	10 81       	ld	r17, Z
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <app_list+0x26>
	}
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     2a6:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     2a8:	87 e0       	ldi	r24, 0x07	; 7
     2aa:	e8 2e       	mov	r14, r24
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	f8 2e       	mov	r15, r24
     2b0:	0f 92       	push	r0
     2b2:	0f 92       	push	r0
     2b4:	ed b7       	in	r30, 0x3d	; 61
     2b6:	fe b7       	in	r31, 0x3e	; 62
     2b8:	f2 82       	std	Z+2, r15	; 0x02
     2ba:	e1 82       	std	Z+1, r14	; 0x01
     2bc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
		if(fgets(buf, 8, stdin) == NULL) {
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	40 91 81 05 	lds	r20, 0x0581
     2c8:	50 91 82 05 	lds	r21, 0x0582
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	68 e0       	ldi	r22, 0x08	; 8
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <fgets>
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	a1 f0       	breq	.+40     	; 0x304 <app_list+0x82>
			break;
		}
		np = get_node();
     2dc:	0e 94 96 00 	call	0x12c	; 0x12c <get_node>
		np->data = buf[0];
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
     2e6:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     2e8:	18 36       	cpi	r17, 0x68	; 104
     2ea:	19 f0       	breq	.+6      	; 0x2f2 <app_list+0x70>
     2ec:	14 37       	cpi	r17, 0x74	; 116
     2ee:	39 f4       	brne	.+14     	; 0x2fe <app_list+0x7c>
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <app_list+0x76>
			case	'h' : insert_node_head(np); break;
     2f2:	0e 94 9e 00 	call	0x13c	; 0x13c <insert_node_head>
     2f6:	dc cf       	rjmp	.-72     	; 0x2b0 <app_list+0x2e>
			case	't' : insert_node_tail(np); break;
     2f8:	0e 94 b3 00 	call	0x166	; 0x166 <insert_node_tail>
     2fc:	d9 cf       	rjmp	.-78     	; 0x2b0 <app_list+0x2e>
			default     : insert_node_ascn(np);
     2fe:	0e 94 ca 00 	call	0x194	; 0x194 <insert_node_ascn>
     302:	d6 cf       	rjmp	.-84     	; 0x2b0 <app_list+0x2e>
		}
	}
	tour_list();
     304:	0e 94 01 01 	call	0x202	; 0x202 <tour_list>
	free_list();
     308:	0e 94 30 01 	call	0x260	; 0x260 <free_list>
}
     30c:	28 96       	adiw	r28, 0x08	; 8
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	08 95       	ret

00000324 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	fc 01       	movw	r30, r24
	int i; 
	for (i = 2; i <= n/2; i++)
     32a:	62 e0       	ldi	r22, 0x02	; 2
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     332:	eb 01       	movw	r28, r22
     334:	22 e0       	ldi	r18, 0x02	; 2
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	08 c0       	rjmp	.+16     	; 0x34a <is_prime+0x26>
		if((n % i) == 0)
     33a:	cf 01       	movw	r24, r30
     33c:	b9 01       	movw	r22, r18
     33e:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	41 f0       	breq	.+16     	; 0x356 <is_prime+0x32>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
     346:	2f 5f       	subi	r18, 0xFF	; 255
     348:	3f 4f       	sbci	r19, 0xFF	; 255
     34a:	c2 17       	cp	r28, r18
     34c:	d3 07       	cpc	r29, r19
     34e:	ac f7       	brge	.-22     	; 0x33a <is_prime+0x16>
		if((n % i) == 0)
			return (0);
	return (1);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	02 c0       	rjmp	.+4      	; 0x35a <is_prime+0x36>

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return (0);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <task_prime>:

void task_prime(char *ap)
{
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	21 f0       	breq	.+8      	; 0x37c <task_prime+0x1c>
     374:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     378:	7c 01       	movw	r14, r24
     37a:	04 c0       	rjmp	.+8      	; 0x384 <task_prime+0x24>
	return (1);
}

void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;
     37c:	90 ed       	ldi	r25, 0xD0	; 208
     37e:	e9 2e       	mov	r14, r25
     380:	97 e0       	ldi	r25, 0x07	; 7
     382:	f9 2e       	mov	r15, r25
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     388:	c2 e0       	ldi	r28, 0x02	; 2
     38a:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
     38c:	8d e0       	ldi	r24, 0x0D	; 13
     38e:	c8 2e       	mov	r12, r24
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	d8 2e       	mov	r13, r24
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     394:	16 c0       	rjmp	.+44     	; 0x3c2 <task_prime+0x62>
		if (is_prime(n)) {
     396:	ce 01       	movw	r24, r28
     398:	0e 94 92 01 	call	0x324	; 0x324 <is_prime>
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	81 f0       	breq	.+32     	; 0x3c0 <task_prime+0x60>
			count++;
     3a0:	0f 5f       	subi	r16, 0xFF	; 255
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n", n);
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <task_prime+0x46>
     3a6:	0f 92       	push	r0
     3a8:	ed b7       	in	r30, 0x3d	; 61
     3aa:	fe b7       	in	r31, 0x3e	; 62
     3ac:	d2 82       	std	Z+2, r13	; 0x02
     3ae:	c1 82       	std	Z+1, r12	; 0x01
     3b0:	d4 83       	std	Z+4, r29	; 0x04
     3b2:	c3 83       	std	Z+3, r28	; 0x03
     3b4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	ec 16       	cp	r14, r28
     3c4:	fd 06       	cpc	r15, r29
     3c6:	3c f7       	brge	.-50     	; 0x396 <task_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
		}
	}
	printf("count = %d\n", count);
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <task_prime+0x6a>
     3ca:	0f 92       	push	r0
     3cc:	87 e2       	ldi	r24, 0x27	; 39
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	ed b7       	in	r30, 0x3d	; 61
     3d2:	fe b7       	in	r31, 0x3e	; 62
     3d4:	92 83       	std	Z+2, r25	; 0x02
     3d6:	81 83       	std	Z+1, r24	; 0x01
     3d8:	14 83       	std	Z+4, r17	; 0x04
     3da:	03 83       	std	Z+3, r16	; 0x03
     3dc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
	printf("$ ");
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	83 e3       	ldi	r24, 0x33	; 51
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	92 83       	std	Z+2, r25	; 0x02
     3ee:	81 83       	std	Z+1, r24	; 0x01
     3f0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	cf 90       	pop	r12
     408:	08 95       	ret

0000040a <task_sum>:

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	19 f0       	breq	.+6      	; 0x414 <task_sum+0xa>
     40e:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     412:	02 c0       	rjmp	.+4      	; 0x418 <task_sum+0xe>
	printf("$ ");
}

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;
     414:	84 e6       	ldi	r24, 0x64	; 100
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	04 c0       	rjmp	.+8      	; 0x42a <task_sum+0x20>
		sum += n; 
     422:	42 0f       	add	r20, r18
     424:	53 1f       	adc	r21, r19
void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	82 17       	cp	r24, r18
     42c:	93 07       	cpc	r25, r19
     42e:	cc f7       	brge	.-14     	; 0x422 <task_sum+0x18>
		sum += n; 
	}
	printf("sum = %d\n", sum);
     430:	00 d0       	rcall	.+0      	; 0x432 <task_sum+0x28>
     432:	0f 92       	push	r0
     434:	86 e3       	ldi	r24, 0x36	; 54
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	ed b7       	in	r30, 0x3d	; 61
     43a:	fe b7       	in	r31, 0x3e	; 62
     43c:	92 83       	std	Z+2, r25	; 0x02
     43e:	81 83       	std	Z+1, r24	; 0x01
     440:	54 83       	std	Z+4, r21	; 0x04
     442:	43 83       	std	Z+3, r20	; 0x03
     444:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
	printf("$ ");
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	83 e3       	ldi	r24, 0x33	; 51
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	ed b7       	in	r30, 0x3d	; 61
     452:	fe b7       	in	r31, 0x3e	; 62
     454:	92 83       	std	Z+2, r25	; 0x02
     456:	81 83       	std	Z+1, r24	; 0x01
     458:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
}
     460:	08 95       	ret

00000462 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int  fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     462:	10 92 95 04 	sts	0x0495, r1
     466:	10 92 94 04 	sts	0x0494, r1
     46a:	10 92 93 04 	sts	0x0493, r1
     46e:	10 92 92 04 	sts	0x0492, r1
     472:	10 92 97 04 	sts	0x0497, r1
     476:	10 92 96 04 	sts	0x0496, r1
     47a:	10 92 51 04 	sts	0x0451, r1
     47e:	10 92 50 04 	sts	0x0450, r1
}
     482:	08 95       	ret

00000484 <qi_insert>:

int qi_insert(char ch)
{
     484:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     486:	20 91 96 04 	lds	r18, 0x0496
     48a:	30 91 97 04 	lds	r19, 0x0497
     48e:	2f 5f       	subi	r18, 0xFF	; 255
     490:	3f 4f       	sbci	r19, 0xFF	; 255
     492:	c9 01       	movw	r24, r18
     494:	60 e4       	ldi	r22, 0x40	; 64
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     49c:	9c 01       	movw	r18, r24
     49e:	80 91 50 04 	lds	r24, 0x0450
     4a2:	90 91 51 04 	lds	r25, 0x0451
     4a6:	28 17       	cp	r18, r24
     4a8:	39 07       	cpc	r19, r25
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     4ac:	30 93 97 04 	sts	0x0497, r19
     4b0:	20 93 96 04 	sts	0x0496, r18
	qi[ri] = ch;
     4b4:	28 56       	subi	r18, 0x68	; 104
     4b6:	3b 4f       	sbci	r19, 0xFB	; 251
     4b8:	f9 01       	movw	r30, r18
     4ba:	40 83       	st	Z, r20
	return(1);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     4c6:	08 95       	ret

000004c8 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     4c8:	80 91 50 04 	lds	r24, 0x0450
     4cc:	90 91 51 04 	lds	r25, 0x0451
     4d0:	20 91 96 04 	lds	r18, 0x0496
     4d4:	30 91 97 04 	lds	r19, 0x0497
     4d8:	28 17       	cp	r18, r24
     4da:	39 07       	cpc	r19, r25
     4dc:	79 f0       	breq	.+30     	; 0x4fc <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	60 e4       	ldi	r22, 0x40	; 64
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     4e8:	90 93 51 04 	sts	0x0451, r25
     4ec:	80 93 50 04 	sts	0x0450, r24
	return(qi[fi]);
     4f0:	88 56       	subi	r24, 0x68	; 104
     4f2:	9b 4f       	sbci	r25, 0xFB	; 251
     4f4:	fc 01       	movw	r30, r24
     4f6:	80 81       	ld	r24, Z
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return(0);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     500:	08 95       	ret

00000502 <qo_insert>:

int qo_insert(char ch)
{
     502:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     504:	20 91 94 04 	lds	r18, 0x0494
     508:	30 91 95 04 	lds	r19, 0x0495
     50c:	2f 5f       	subi	r18, 0xFF	; 255
     50e:	3f 4f       	sbci	r19, 0xFF	; 255
     510:	c9 01       	movw	r24, r18
     512:	60 e4       	ldi	r22, 0x40	; 64
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     51a:	9c 01       	movw	r18, r24
     51c:	80 91 92 04 	lds	r24, 0x0492
     520:	90 91 93 04 	lds	r25, 0x0493
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	59 f0       	breq	.+22     	; 0x540 <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     52a:	30 93 95 04 	sts	0x0495, r19
     52e:	20 93 94 04 	sts	0x0494, r18
	qo[ro] = ch;
     532:	2e 5a       	subi	r18, 0xAE	; 174
     534:	3b 4f       	sbci	r19, 0xFB	; 251
     536:	f9 01       	movw	r30, r18
     538:	40 83       	st	Z, r20
	return(1);
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     544:	08 95       	ret

00000546 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     546:	80 91 92 04 	lds	r24, 0x0492
     54a:	90 91 93 04 	lds	r25, 0x0493
     54e:	20 91 94 04 	lds	r18, 0x0494
     552:	30 91 95 04 	lds	r19, 0x0495
     556:	28 17       	cp	r18, r24
     558:	39 07       	cpc	r19, r25
     55a:	79 f0       	breq	.+30     	; 0x57a <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	60 e4       	ldi	r22, 0x40	; 64
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     566:	90 93 93 04 	sts	0x0493, r25
     56a:	80 93 92 04 	sts	0x0492, r24
	return(qo[fo]);
     56e:	8e 5a       	subi	r24, 0xAE	; 174
     570:	9b 4f       	sbci	r25, 0xFB	; 251
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return(0);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     57e:	08 95       	ret

00000580 <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     580:	80 91 50 04 	lds	r24, 0x0450
     584:	90 91 51 04 	lds	r25, 0x0451
     588:	20 91 96 04 	lds	r18, 0x0496
     58c:	30 91 97 04 	lds	r19, 0x0497
     590:	82 17       	cp	r24, r18
     592:	93 07       	cpc	r25, r19
     594:	59 f0       	breq	.+22     	; 0x5ac <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	60 e4       	ldi	r22, 0x40	; 64
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     5a0:	88 56       	subi	r24, 0x68	; 104
     5a2:	9b 4f       	sbci	r25, 0xFB	; 251
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     5b0:	08 95       	ret

000005b2 <what_task>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     5c0:	00 e0       	ldi	r16, 0x00	; 0
     5c2:	10 e0       	ldi	r17, 0x00	; 0
     5c4:	17 c0       	rjmp	.+46     	; 0x5f4 <what_task+0x42>
		if (!strcmp(name, Task_tab[i].task_name))
     5c6:	e8 01       	movw	r28, r16
     5c8:	cc 0f       	add	r28, r28
     5ca:	dd 1f       	adc	r29, r29
     5cc:	c8 01       	movw	r24, r16
     5ce:	25 e0       	ldi	r18, 0x05	; 5
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	2a 95       	dec	r18
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <what_task+0x1e>
     5d8:	c8 0f       	add	r28, r24
     5da:	d9 1f       	adc	r29, r25
     5dc:	c5 58       	subi	r28, 0x85	; 133
     5de:	dd 4f       	sbci	r29, 0xFD	; 253
     5e0:	c7 01       	movw	r24, r14
     5e2:	be 01       	movw	r22, r28
     5e4:	0e 94 b7 0c 	call	0x196e	; 0x196e <strcmp>
     5e8:	00 97       	sbiw	r24, 0x00	; 0
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <what_task+0x3e>
			return(&Task_tab[i]);
     5ec:	ce 01       	movw	r24, r28
     5ee:	0b c0       	rjmp	.+22     	; 0x606 <what_task+0x54>
int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
	int i;
	for (i = 0; i < Task_cnt; i++)
     5f0:	0f 5f       	subi	r16, 0xFF	; 255
     5f2:	1f 4f       	sbci	r17, 0xFF	; 255
     5f4:	80 91 79 02 	lds	r24, 0x0279
     5f8:	90 91 7a 02 	lds	r25, 0x027A
     5fc:	08 17       	cp	r16, r24
     5fe:	19 07       	cpc	r17, r25
     600:	14 f3       	brlt	.-60     	; 0x5c6 <what_task+0x14>
		if (!strcmp(name, Task_tab[i].task_name))
			return(&Task_tab[i]);

	return(NULL);
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	08 95       	ret

00000614 <task_init>:
struct task 	Task_q[MAX_TASK];
volatile int	Task_f, Task_r;

void task_init()
{
	Task_f = Task_r = 0;
     614:	10 92 d9 04 	sts	0x04D9, r1
     618:	10 92 d8 04 	sts	0x04D8, r1
     61c:	10 92 7b 05 	sts	0x057B, r1
     620:	10 92 7a 05 	sts	0x057A, r1
}
     624:	08 95       	ret

00000626 <task_insert>:

int task_insert(struct task *tskp)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	48 2f       	mov	r20, r24
     62c:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     62e:	80 91 d8 04 	lds	r24, 0x04D8
     632:	90 91 d9 04 	lds	r25, 0x04D9
     636:	c0 91 7a 05 	lds	r28, 0x057A
     63a:	d0 91 7b 05 	lds	r29, 0x057B
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	20 e1       	ldi	r18, 0x10	; 16
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	b9 01       	movw	r22, r18
     646:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     64a:	8c 17       	cp	r24, r28
     64c:	9d 07       	cpc	r25, r29
     64e:	31 f1       	breq	.+76     	; 0x69c <task_insert+0x76>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     650:	80 91 d8 04 	lds	r24, 0x04D8
     654:	90 91 d9 04 	lds	r25, 0x04D9
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	b9 01       	movw	r22, r18
     65c:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     660:	90 93 d9 04 	sts	0x04D9, r25
     664:	80 93 d8 04 	sts	0x04D8, r24
	Task_q[Task_r] = *tskp;
     668:	80 91 d8 04 	lds	r24, 0x04D8
     66c:	90 91 d9 04 	lds	r25, 0x04D9
     670:	dc 01       	movw	r26, r24
     672:	aa 0f       	add	r26, r26
     674:	bb 1f       	adc	r27, r27
     676:	63 e0       	ldi	r22, 0x03	; 3
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	6a 95       	dec	r22
     67e:	e1 f7       	brne	.-8      	; 0x678 <task_insert+0x52>
     680:	a8 0f       	add	r26, r24
     682:	b9 1f       	adc	r27, r25
     684:	a6 52       	subi	r26, 0x26	; 38
     686:	bb 4f       	sbci	r27, 0xFB	; 251
     688:	c4 2f       	mov	r28, r20
     68a:	de 2f       	mov	r29, r30
     68c:	8a e0       	ldi	r24, 0x0A	; 10
     68e:	09 90       	ld	r0, Y+
     690:	0d 92       	st	X+, r0
     692:	81 50       	subi	r24, 0x01	; 1
     694:	e1 f7       	brne	.-8      	; 0x68e <task_insert+0x68>
	return (1);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return 0;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <task_delete>:

int task_delete(struct task *tskp)
{
     6a6:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     6a8:	40 91 d8 04 	lds	r20, 0x04D8
     6ac:	50 91 d9 04 	lds	r21, 0x04D9
     6b0:	80 91 7a 05 	lds	r24, 0x057A
     6b4:	90 91 7b 05 	lds	r25, 0x057B
     6b8:	48 17       	cp	r20, r24
     6ba:	59 07       	cpc	r21, r25
     6bc:	31 f1       	breq	.+76     	; 0x70a <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     6be:	80 91 7a 05 	lds	r24, 0x057A
     6c2:	90 91 7b 05 	lds	r25, 0x057B
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	60 e1       	ldi	r22, 0x10	; 16
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     6d0:	90 93 7b 05 	sts	0x057B, r25
     6d4:	80 93 7a 05 	sts	0x057A, r24
	*tskp = Task_q[Task_f];
     6d8:	80 91 7a 05 	lds	r24, 0x057A
     6dc:	90 91 7b 05 	lds	r25, 0x057B
     6e0:	fc 01       	movw	r30, r24
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	a3 e0       	ldi	r26, 0x03	; 3
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	aa 95       	dec	r26
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <task_delete+0x42>
     6f0:	e8 0f       	add	r30, r24
     6f2:	f9 1f       	adc	r31, r25
     6f4:	d9 01       	movw	r26, r18
     6f6:	e6 52       	subi	r30, 0x26	; 38
     6f8:	fb 4f       	sbci	r31, 0xFB	; 251
     6fa:	8a e0       	ldi	r24, 0x0A	; 10
     6fc:	01 90       	ld	r0, Z+
     6fe:	0d 92       	st	X+, r0
     700:	81 50       	subi	r24, 0x01	; 1
     702:	e1 f7       	brne	.-8      	; 0x6fc <task_delete+0x56>
	return(1);
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)
		return(0);
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     70e:	08 95       	ret

00000710 <task_cmd>:

void task_cmd(char *arg)
{
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	ca 54       	subi	r28, 0x4A	; 74
     72a:	d0 40       	sbci	r29, 0x00	; 0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task_tab *tp;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     736:	0e 94 b5 06 	call	0xd6a	; 0xd6a <uart_peek>
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	09 f4       	brne	.+2      	; 0x740 <task_cmd+0x30>
     73e:	8e c0       	rjmp	.+284    	; 0x85c <task_cmd+0x14c>

	if (gets(buf) == NULL) {
     740:	ce 01       	movw	r24, r28
     742:	0b 96       	adiw	r24, 0x0b	; 11
     744:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <gets>
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	29 f4       	brne	.+10     	; 0x756 <task_cmd+0x46>
		printf("logout, goodbye !!!\n");
     74c:	80 e4       	ldi	r24, 0x40	; 64
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <puts>
     754:	ff cf       	rjmp	.-2      	; 0x754 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf,  " \t\n\r");
     756:	ce 01       	movw	r24, r28
     758:	0b 96       	adiw	r24, 0x0b	; 11
     75a:	64 e5       	ldi	r22, 0x54	; 84
     75c:	72 e0       	ldi	r23, 0x02	; 2
     75e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <strtok>
     762:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	64 e5       	ldi	r22, 0x54	; 84
     76a:	72 e0       	ldi	r23, 0x02	; 2
     76c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <strtok>
     770:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	64 e5       	ldi	r22, 0x54	; 84
     778:	72 e0       	ldi	r23, 0x02	; 2
     77a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <strtok>
     77e:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	64 e5       	ldi	r22, 0x54	; 84
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	0e 94 b2 0c 	call	0x1964	; 0x1964 <strtok>
     78c:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     78e:	01 15       	cp	r16, r1
     790:	11 05       	cpc	r17, r1
     792:	29 f4       	brne	.+10     	; 0x79e <task_cmd+0x8e>
		printf("$ "); return;
     794:	0f 92       	push	r0
     796:	0f 92       	push	r0
     798:	89 e5       	ldi	r24, 0x59	; 89
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	47 c0       	rjmp	.+142    	; 0x82c <task_cmd+0x11c>
	}

	if (!strcmp(cp0, "timer")) {
     79e:	c8 01       	movw	r24, r16
     7a0:	6c e5       	ldi	r22, 0x5C	; 92
     7a2:	72 e0       	ldi	r23, 0x02	; 2
     7a4:	0e 94 b7 0c 	call	0x196e	; 0x196e <strcmp>
     7a8:	00 97       	sbiw	r24, 0x00	; 0
     7aa:	b9 f5       	brne	.+110    	; 0x81a <task_cmd+0x10a>
		if (!cp1 || !cp2) 
     7ac:	e1 14       	cp	r14, r1
     7ae:	f1 04       	cpc	r15, r1
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <task_cmd+0xa8>
     7b2:	c1 14       	cp	r12, r1
     7b4:	d1 04       	cpc	r13, r1
     7b6:	61 f4       	brne	.+24     	; 0x7d0 <task_cmd+0xc0>
			printf("Unknown command...\n$ ");
     7b8:	0f 92       	push	r0
     7ba:	0f 92       	push	r0
     7bc:	82 e6       	ldi	r24, 0x62	; 98
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	ed b7       	in	r30, 0x3d	; 61
     7c2:	fe b7       	in	r31, 0x3e	; 62
     7c4:	92 83       	std	Z+2, r25	; 0x02
     7c6:	81 83       	std	Z+1, r24	; 0x01
     7c8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
		ms = atoi(cp1) / 256;
     7d0:	c7 01       	movw	r24, r14
     7d2:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     7d6:	8c 01       	movw	r16, r24

		if (!(tp = what_task(cp2))) {
     7d8:	c6 01       	movw	r24, r12
     7da:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <what_task>
     7de:	00 97       	sbiw	r24, 0x00	; 0
     7e0:	09 f1       	breq	.+66     	; 0x824 <task_cmd+0x114>
			printf("Unknown command...\n$ ");
			return;
		}

		task.fun = tp->task_fun;
     7e2:	fc 01       	movw	r30, r24
     7e4:	80 a1       	lds	r24, 0x40
     7e6:	91 a1       	lds	r25, 0x41
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     7ec:	ce 01       	movw	r24, r28
     7ee:	03 96       	adiw	r24, 0x03	; 3
     7f0:	a1 14       	cp	r10, r1
     7f2:	b1 04       	cpc	r11, r1
     7f4:	11 f0       	breq	.+4      	; 0x7fa <task_cmd+0xea>
     7f6:	b5 01       	movw	r22, r10
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <task_cmd+0xee>
		else	 strcpy(task.arg, "");
     7fa:	68 e7       	ldi	r22, 0x78	; 120
     7fc:	72 e0       	ldi	r23, 0x02	; 2
     7fe:	0e 94 c0 0c 	call	0x1980	; 0x1980 <strcpy>
		
		cli();
     802:	f8 94       	cli
	}

	if (!strcmp(cp0, "timer")) {
		if (!cp1 || !cp2) 
			printf("Unknown command...\n$ ");
		ms = atoi(cp1) / 256;
     804:	c8 01       	movw	r24, r16
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
		task.fun = tp->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else	 strcpy(task.arg, "");
		
		cli();
		insert_timer(&task, ms);
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	0e 94 45 04 	call	0x88a	; 0x88a <insert_timer>
		sei();
     816:	78 94       	sei
     818:	21 c0       	rjmp	.+66     	; 0x85c <task_cmd+0x14c>
	} else {
		if (!(tp = what_task(cp0))) {
     81a:	c8 01       	movw	r24, r16
     81c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <what_task>
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	79 f4       	brne	.+30     	; 0x842 <task_cmd+0x132>
			printf("Unknown command...\n$ ");
     824:	0f 92       	push	r0
     826:	0f 92       	push	r0
     828:	82 e6       	ldi	r24, 0x62	; 98
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	ad b7       	in	r26, 0x3d	; 61
     82e:	be b7       	in	r27, 0x3e	; 62
     830:	12 96       	adiw	r26, 0x02	; 2
     832:	9c 93       	st	X, r25
     834:	8e 93       	st	-X, r24
     836:	11 97       	sbiw	r26, 0x01	; 1
     838:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
			return;
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0d c0       	rjmp	.+26     	; 0x85c <task_cmd+0x14c>
     842:	dc 01       	movw	r26, r24
     844:	90 96       	adiw	r26, 0x20	; 32
     846:	ed 91       	ld	r30, X+
     848:	fc 91       	ld	r31, X
     84a:	91 97       	sbiw	r26, 0x21	; 33
		}
		if (cp2) {
     84c:	c1 14       	cp	r12, r1
     84e:	d1 04       	cpc	r13, r1
     850:	11 f0       	breq	.+4      	; 0x856 <task_cmd+0x146>
			(*tp->task_fun)(cp1);
     852:	c7 01       	movw	r24, r14
     854:	02 c0       	rjmp	.+4      	; 0x85a <task_cmd+0x14a>
		} else {
			(*tp->task_fun)("");
     856:	88 e7       	ldi	r24, 0x78	; 120
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	19 95       	eicall
		}
	}
}
     85c:	c6 5b       	subi	r28, 0xB6	; 182
     85e:	df 4f       	sbci	r29, 0xFF	; 255
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	ef 90       	pop	r14
     876:	df 90       	pop	r13
     878:	cf 90       	pop	r12
     87a:	bf 90       	pop	r11
     87c:	af 90       	pop	r10
     87e:	08 95       	ret

00000880 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     880:	8e e0       	ldi	r24, 0x0E	; 14
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 65 0b 	call	0x16ca	; 0x16ca <malloc>
	return(tp);
}
     888:	08 95       	ret

0000088a <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	f8 2e       	mov	r15, r24
     898:	e9 2e       	mov	r14, r25
     89a:	8b 01       	movw	r16, r22
	int			total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     89c:	0e 94 40 04 	call	0x880	; 0x880 <get_timer>
     8a0:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     8a2:	dc 01       	movw	r26, r24
     8a4:	12 96       	adiw	r26, 0x02	; 2
     8a6:	ef 2d       	mov	r30, r15
     8a8:	fe 2d       	mov	r31, r14
     8aa:	8a e0       	ldi	r24, 0x0A	; 10
     8ac:	01 90       	ld	r0, Z+
     8ae:	0d 92       	st	X+, r0
     8b0:	81 50       	subi	r24, 0x01	; 1
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <insert_timer+0x22>
	tp->time = ms;
     8b4:	19 83       	std	Y+1, r17	; 0x01
     8b6:	08 83       	st	Y, r16

	if(Thead == NULL) {
     8b8:	e0 91 48 04 	lds	r30, 0x0448
     8bc:	f0 91 49 04 	lds	r31, 0x0449
     8c0:	30 97       	sbiw	r30, 0x00	; 0
     8c2:	29 f4       	brne	.+10     	; 0x8ce <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     8c4:	d0 93 49 04 	sts	0x0449, r29
     8c8:	c0 93 48 04 	sts	0x0448, r28
     8cc:	2f c0       	rjmp	.+94     	; 0x92c <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     8d8:	fd 01       	movw	r30, r26
		total += cp->time;
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	28 0f       	add	r18, r24
     8e0:	39 1f       	adc	r19, r25
		if(total >= ms)
     8e2:	20 17       	cp	r18, r16
     8e4:	31 07       	cpc	r19, r17
     8e6:	34 f4       	brge	.+12     	; 0x8f4 <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     8e8:	a4 85       	ldd	r26, Z+12	; 0x0c
     8ea:	b5 85       	ldd	r27, Z+13	; 0x0d
     8ec:	af 01       	movw	r20, r30
     8ee:	10 97       	sbiw	r26, 0x00	; 0
     8f0:	99 f7       	brne	.-26     	; 0x8d8 <insert_timer+0x4e>
     8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     8f4:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     8f6:	41 15       	cp	r20, r1
     8f8:	51 05       	cpc	r21, r1
     8fa:	79 f4       	brne	.+30     	; 0x91a <insert_timer+0x90>
		cp->time -= tp->time;
     8fc:	8d 91       	ld	r24, X+
     8fe:	9c 91       	ld	r25, X
     900:	11 97       	sbiw	r26, 0x01	; 1
     902:	80 1b       	sub	r24, r16
     904:	91 0b       	sbc	r25, r17
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	9c 93       	st	X, r25
     90a:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     90c:	bd 87       	std	Y+13, r27	; 0x0d
     90e:	ac 87       	std	Y+12, r26	; 0x0c
     910:	d0 93 49 04 	sts	0x0449, r29
     914:	c0 93 48 04 	sts	0x0448, r28
     918:	24 c0       	rjmp	.+72     	; 0x962 <insert_timer+0xd8>
	} else if(cp == NULL) {
     91a:	10 97       	sbiw	r26, 0x00	; 0
     91c:	51 f4       	brne	.+20     	; 0x932 <insert_timer+0xa8>
		tp->time -= total;
     91e:	02 1b       	sub	r16, r18
     920:	13 0b       	sbc	r17, r19
     922:	19 83       	std	Y+1, r17	; 0x01
     924:	08 83       	st	Y, r16
		pp->link = tp;
     926:	fa 01       	movw	r30, r20
     928:	d5 87       	std	Z+13, r29	; 0x0d
     92a:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     92c:	1d 86       	std	Y+13, r1	; 0x0d
     92e:	1c 86       	std	Y+12, r1	; 0x0c
     930:	18 c0       	rjmp	.+48     	; 0x962 <insert_timer+0xd8>
	} else {
		total -= cp->time;
     932:	8d 91       	ld	r24, X+
     934:	9c 91       	ld	r25, X
     936:	11 97       	sbiw	r26, 0x01	; 1
     938:	b9 01       	movw	r22, r18
     93a:	68 1b       	sub	r22, r24
     93c:	79 0b       	sbc	r23, r25
		tp->time -= total;
     93e:	98 01       	movw	r18, r16
     940:	26 1b       	sub	r18, r22
     942:	37 0b       	sbc	r19, r23
     944:	39 83       	std	Y+1, r19	; 0x01
     946:	28 83       	st	Y, r18
		cp->time -= tp->time;
     948:	8d 91       	ld	r24, X+
     94a:	9c 91       	ld	r25, X
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	82 1b       	sub	r24, r18
     950:	93 0b       	sbc	r25, r19
     952:	11 96       	adiw	r26, 0x01	; 1
     954:	9c 93       	st	X, r25
     956:	8e 93       	st	-X, r24
		pp->link = tp;
     958:	fa 01       	movw	r30, r20
     95a:	d5 87       	std	Z+13, r29	; 0x0d
     95c:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     95e:	bd 87       	std	Y+13, r27	; 0x0d
     960:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <tour_timer>:

void tour_timer()
{
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     97c:	8a e0       	ldi	r24, 0x0A	; 10
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     984:	c0 91 48 04 	lds	r28, 0x0448
     988:	d0 91 49 04 	lds	r29, 0x0449
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     98c:	00 e0       	ldi	r16, 0x00	; 0
     98e:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     990:	81 ee       	ldi	r24, 0xE1	; 225
     992:	e8 2e       	mov	r14, r24
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     998:	20 c0       	rjmp	.+64     	; 0x9da <tour_timer+0x6a>
		total += cp->time;
     99a:	88 81       	ld	r24, Y
     99c:	99 81       	ldd	r25, Y+1	; 0x01
     99e:	08 0f       	add	r16, r24
     9a0:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <tour_timer+0x34>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <tour_timer+0x36>
     9a6:	ed b7       	in	r30, 0x3d	; 61
     9a8:	fe b7       	in	r31, 0x3e	; 62
     9aa:	31 96       	adiw	r30, 0x01	; 1
     9ac:	ad b7       	in	r26, 0x3d	; 61
     9ae:	be b7       	in	r27, 0x3e	; 62
     9b0:	12 96       	adiw	r26, 0x02	; 2
     9b2:	fc 92       	st	X, r15
     9b4:	ee 92       	st	-X, r14
     9b6:	11 97       	sbiw	r26, 0x01	; 1
     9b8:	93 83       	std	Z+3, r25	; 0x03
     9ba:	82 83       	std	Z+2, r24	; 0x02
     9bc:	15 83       	std	Z+5, r17	; 0x05
     9be:	04 83       	std	Z+4, r16	; 0x04
     9c0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     9c4:	0c 84       	ldd	r0, Y+12	; 0x0c
     9c6:	dd 85       	ldd	r29, Y+13	; 0x0d
     9c8:	c0 2d       	mov	r28, r0
     9ca:	8d b7       	in	r24, 0x3d	; 61
     9cc:	9e b7       	in	r25, 0x3e	; 62
     9ce:	06 96       	adiw	r24, 0x06	; 6
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	9e bf       	out	0x3e, r25	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	8d bf       	out	0x3d, r24	; 61
     9da:	20 97       	sbiw	r28, 0x00	; 0
     9dc:	f1 f6       	brne	.-68     	; 0x99a <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <putchar>
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <free_timer>:

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     9f4:	09 c0       	rjmp	.+18     	; 0xa08 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     9f6:	fc 01       	movw	r30, r24
     9f8:	24 85       	ldd	r18, Z+12	; 0x0c
     9fa:	35 85       	ldd	r19, Z+13	; 0x0d
     9fc:	30 93 49 04 	sts	0x0449, r19
     a00:	20 93 48 04 	sts	0x0448, r18
		free(cp);
     a04:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <free>

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     a08:	80 91 48 04 	lds	r24, 0x0448
     a0c:	90 91 49 04 	lds	r25, 0x0449
     a10:	00 97       	sbiw	r24, 0x00	; 0
     a12:	89 f7       	brne	.-30     	; 0x9f6 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     a14:	08 95       	ret

00000a16 <app_timer>:

void app_timer(char *ap)
{
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	62 97       	sbiw	r28, 0x12	; 18
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task	tsk;

	while(1) {
		printf(">> ");
     a2e:	0c ee       	ldi	r16, 0xEC	; 236
     a30:	12 e0       	ldi	r17, 0x02	; 2
     a32:	0f 92       	push	r0
     a34:	0f 92       	push	r0
     a36:	ed b7       	in	r30, 0x3d	; 61
     a38:	fe b7       	in	r31, 0x3e	; 62
     a3a:	12 83       	std	Z+2, r17	; 0x02
     a3c:	01 83       	std	Z+1, r16	; 0x01
     a3e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	40 91 81 05 	lds	r20, 0x0581
     a4a:	50 91 82 05 	lds	r21, 0x0582
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	68 e0       	ldi	r22, 0x08	; 8
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <fgets>
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	61 f0       	breq	.+24     	; 0xa76 <app_timer+0x60>
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     a66:	bc 01       	movw	r22, r24
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	29 f0       	breq	.+10     	; 0xa76 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     a6c:	ce 01       	movw	r24, r28
     a6e:	09 96       	adiw	r24, 0x09	; 9
     a70:	0e 94 45 04 	call	0x88a	; 0x88a <insert_timer>
	}
     a74:	de cf       	rjmp	.-68     	; 0xa32 <app_timer+0x1c>

	tour_timer();
     a76:	0e 94 b8 04 	call	0x970	; 0x970 <tour_timer>
	free_timer();
     a7a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <free_timer>
}
     a7e:	62 96       	adiw	r28, 0x12	; 18
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	cd bf       	out	0x3d, r28	; 61
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <timer_init>:

void timer_init() {
	TCNT2 = 0;
     a94:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     a98:	e6 eb       	ldi	r30, 0xB6	; 182
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	80 62       	ori	r24, 0x20	; 32
     aa0:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     aa2:	e0 e7       	ldi	r30, 0x70	; 112
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     aac:	e1 eb       	ldi	r30, 0xB1	; 177
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	80 83       	st	Z, r24
     ab6:	80 81       	ld	r24, Z
     ab8:	82 60       	ori	r24, 0x02	; 2
     aba:	80 83       	st	Z, r24
}
     abc:	08 95       	ret

00000abe <timer_expire>:
 	if (--Thead->time == 0)
		timer_expire();
}

void timer_expire(void)
{
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     ac2:	0d c0       	rjmp	.+26     	; 0xade <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     ac4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ac8:	90 93 49 04 	sts	0x0449, r25
     acc:	80 93 48 04 	sts	0x0448, r24

		task_insert(&tp->task);
     ad0:	ce 01       	movw	r24, r28
     ad2:	02 96       	adiw	r24, 0x02	; 2
     ad4:	0e 94 13 03 	call	0x626	; 0x626 <task_insert>

		free(tp);
     ad8:	ce 01       	movw	r24, r28
     ada:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <free>

void timer_expire(void)
{
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     ade:	c0 91 48 04 	lds	r28, 0x0448
     ae2:	d0 91 49 04 	lds	r29, 0x0449
     ae6:	20 97       	sbiw	r28, 0x00	; 0
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <timer_expire+0x34>
     aea:	88 81       	ld	r24, Y
     aec:	99 81       	ldd	r25, Y+1	; 0x01
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	49 f3       	breq	.-46     	; 0xac4 <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	08 95       	ret

00000af8 <__vector_15>:
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
}

ISR(TIMER2_OVF_vect)
{
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	0f 92       	push	r0
     b00:	0b b6       	in	r0, 0x3b	; 59
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	2f 93       	push	r18
     b08:	3f 93       	push	r19
     b0a:	4f 93       	push	r20
     b0c:	5f 93       	push	r21
     b0e:	6f 93       	push	r22
     b10:	7f 93       	push	r23
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	af 93       	push	r26
     b18:	bf 93       	push	r27
     b1a:	ef 93       	push	r30
     b1c:	ff 93       	push	r31
	if (!Thead)
     b1e:	e0 91 48 04 	lds	r30, 0x0448
     b22:	f0 91 49 04 	lds	r31, 0x0449
     b26:	30 97       	sbiw	r30, 0x00	; 0
     b28:	49 f0       	breq	.+18     	; 0xb3c <__vector_15+0x44>
		return;
 	if (--Thead->time == 0)
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	80 83       	st	Z, r24
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	11 f4       	brne	.+4      	; 0xb3c <__vector_15+0x44>
		timer_expire();
     b38:	0e 94 5f 05 	call	0xabe	; 0xabe <timer_expire>
}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0b be       	out	0x3b, r0	; 59
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     b62:	f8 94       	cli
		ch = qi_delete();
     b64:	0e 94 64 02 	call	0x4c8	; 0x4c8 <qi_delete>
		sei();
     b68:	78 94       	sei
	} while(ch == 0);
     b6a:	88 23       	and	r24, r24
     b6c:	d1 f3       	breq	.-12     	; 0xb62 <uart_getchar>

	if(ch == EOT)	return(-1);
     b6e:	84 30       	cpi	r24, 0x04	; 4
     b70:	11 f0       	breq	.+4      	; 0xb76 <uart_getchar+0x14>
	else			return(ch);
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while(ch == 0);

	if(ch == EOT)	return(-1);
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     b7a:	08 95       	ret

00000b7c <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     b7c:	cf 93       	push	r28
     b7e:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	19 f4       	brne	.+6      	; 0xb8a <uart_putchar+0xe>
		uart_putchar('\r', stream);
     b84:	8d e0       	ldi	r24, 0x0D	; 13
     b86:	0e 94 be 05 	call	0xb7c	; 0xb7c <uart_putchar>
	
	cli();
     b8a:	f8 94       	cli

	if(!uart_busy) {
     b8c:	80 91 7c 05 	lds	r24, 0x057C
     b90:	88 23       	and	r24, r24
     b92:	59 f4       	brne	.+22     	; 0xbaa <uart_putchar+0x2e>
		UDR0 = ch;
     b94:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 7c 05 	sts	0x057C, r24
     b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     ba0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba2:	86 ef       	ldi	r24, 0xF6	; 246
     ba4:	8a 95       	dec	r24
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     ba8:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     baa:	8c 2f       	mov	r24, r28
     bac:	0e 94 81 02 	call	0x502	; 0x502 <qo_insert>
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	b1 f3       	breq	.-20     	; 0xba0 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}			
	}
	sei();
     bb4:	78 94       	sei

	return(1);
}
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     bbe:	81 ef       	ldi	r24, 0xF1	; 241
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	90 93 82 05 	sts	0x0582, r25
     bc6:	80 93 81 05 	sts	0x0581, r24
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	90 93 84 05 	sts	0x0584, r25
     bd2:	80 93 83 05 	sts	0x0583, r24
	uart_busy = 0;
     bd6:	10 92 7c 05 	sts	0x057C, r1
	q_init();
     bda:	0e 94 31 02 	call	0x462	; 0x462 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     bde:	10 92 c5 00 	sts	0x00C5, r1
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     be8:	e0 ec       	ldi	r30, 0xC0	; 192
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	82 60       	ori	r24, 0x02	; 2
     bf0:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     bf2:	e1 ec       	ldi	r30, 0xC1	; 193
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	88 60       	ori	r24, 0x08	; 8
     bfa:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     bfc:	80 81       	ld	r24, Z
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     c02:	80 81       	ld	r24, Z
     c04:	80 61       	ori	r24, 0x10	; 16
     c06:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     c08:	80 81       	ld	r24, Z
     c0a:	80 68       	ori	r24, 0x80	; 128
     c0c:	80 83       	st	Z, r24
}
     c0e:	08 95       	ret

00000c10 <__vector_27>:
	if(ch == EOT)	return(-1);
	else			return(ch);
}

ISR(USART0_TX_vect)
{
     c10:	1f 92       	push	r1
     c12:	0f 92       	push	r0
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	0f 92       	push	r0
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     c36:	0e 94 a3 02 	call	0x546	; 0x546 <qo_delete>
     c3a:	88 23       	and	r24, r24
     c3c:	19 f4       	brne	.+6      	; 0xc44 <__vector_27+0x34>
		uart_busy = 0;
     c3e:	10 92 7c 05 	sts	0x057C, r1
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <__vector_27+0x38>
	else
		UDR0 = ch;
     c44:	80 93 c6 00 	sts	0x00C6, r24
}
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0b be       	out	0x3b, r0	; 59
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <uart_echo>:
		task_insert(&task);
	}
}

void uart_echo(char ch)
{
     c6e:	cf 93       	push	r28
     c70:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     c72:	8a 30       	cpi	r24, 0x0A	; 10
     c74:	19 f4       	brne	.+6      	; 0xc7c <uart_echo+0xe>
     c76:	8d e0       	ldi	r24, 0x0D	; 13
     c78:	0e 94 37 06 	call	0xc6e	; 0xc6e <uart_echo>
	if(!uart_busy) {
     c7c:	80 91 7c 05 	lds	r24, 0x057C
     c80:	88 23       	and	r24, r24
     c82:	31 f4       	brne	.+12     	; 0xc90 <uart_echo+0x22>
		UDR0 = ch;
     c84:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	80 93 7c 05 	sts	0x057C, r24
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <uart_echo+0x28>
	}
	else {
		qo_insert(ch);			
     c90:	8c 2f       	mov	r24, r28
     c92:	0e 94 81 02 	call	0x502	; 0x502 <qo_insert>
	}
}
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <__vector_25>:
	else
		UDR0 = ch;
}

ISR(USART0_RX_vect)
{
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	0b b6       	in	r0, 0x3b	; 59
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	1f 93       	push	r17
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	2a 97       	sbiw	r28, 0x0a	; 10
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
     cd0:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
     cd4:	1b 31       	cpi	r17, 0x1B	; 27
     cd6:	61 f4       	brne	.+24     	; 0xcf0 <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
     cd8:	80 91 0d 03 	lds	r24, 0x030D
     cdc:	90 91 0e 03 	lds	r25, 0x030E
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	90 93 0e 03 	sts	0x030E, r25
     cea:	80 93 0d 03 	sts	0x030D, r24
		return;
     cee:	24 c0       	rjmp	.+72     	; 0xd38 <__vector_25+0x9e>
	}

	if(ch !=EOT) {
     cf0:	14 30       	cpi	r17, 0x04	; 4
     cf2:	69 f0       	breq	.+26     	; 0xd0e <__vector_25+0x74>
		if(ch == '\r') ch = '\n';
     cf4:	1d 30       	cpi	r17, 0x0D	; 13
     cf6:	09 f4       	brne	.+2      	; 0xcfa <__vector_25+0x60>
     cf8:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode)  uart_echo(ch);
     cfa:	20 91 0d 03 	lds	r18, 0x030D
     cfe:	30 91 0e 03 	lds	r19, 0x030E
     d02:	21 15       	cp	r18, r1
     d04:	31 05       	cpc	r19, r1
     d06:	19 f0       	breq	.+6      	; 0xd0e <__vector_25+0x74>
     d08:	81 2f       	mov	r24, r17
     d0a:	0e 94 37 06 	call	0xc6e	; 0xc6e <uart_echo>
	}
	qi_insert(ch);
     d0e:	81 2f       	mov	r24, r17
     d10:	0e 94 42 02 	call	0x484	; 0x484 <qi_insert>
	if(ch == EOT || ch == '\n') {
     d14:	14 30       	cpi	r17, 0x04	; 4
     d16:	11 f0       	breq	.+4      	; 0xd1c <__vector_25+0x82>
     d18:	1a 30       	cpi	r17, 0x0A	; 10
     d1a:	71 f4       	brne	.+28     	; 0xd38 <__vector_25+0x9e>
		task.fun = task_cmd;
     d1c:	88 e8       	ldi	r24, 0x88	; 136
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	9a 83       	std	Y+2, r25	; 0x02
     d22:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     d24:	ce 01       	movw	r24, r28
     d26:	03 96       	adiw	r24, 0x03	; 3
     d28:	60 ef       	ldi	r22, 0xF0	; 240
     d2a:	72 e0       	ldi	r23, 0x02	; 2
     d2c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <strcpy>
		task_insert(&task);
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 13 03 	call	0x626	; 0x626 <task_insert>
	}
}
     d38:	2a 96       	adiw	r28, 0x0a	; 10
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	ff 91       	pop	r31
     d44:	ef 91       	pop	r30
     d46:	bf 91       	pop	r27
     d48:	af 91       	pop	r26
     d4a:	9f 91       	pop	r25
     d4c:	8f 91       	pop	r24
     d4e:	7f 91       	pop	r23
     d50:	6f 91       	pop	r22
     d52:	5f 91       	pop	r21
     d54:	4f 91       	pop	r20
     d56:	3f 91       	pop	r19
     d58:	2f 91       	pop	r18
     d5a:	1f 91       	pop	r17
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <uart_peek>:
	}
}

int uart_peek()
{
	return(qi_peek());
     d6a:	0e 94 c0 02 	call	0x580	; 0x580 <qi_peek>
}
     d6e:	08 95       	ret

00000d70 <adc_init>:
#include "timer.h"
#include "adc.h"

void adc_init()
{
	cbi(DDRF, PF0);
     d70:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     d72:	80 e8       	ldi	r24, 0x80	; 128
     d74:	80 93 7c 00 	sts	0x007C, r24
}
     d78:	08 95       	ret

00000d7a <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
     d7a:	ea e7       	ldi	r30, 0x7A	; 122
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 68       	ori	r24, 0x80	; 128
     d82:	80 83       	st	Z, r24
     d84:	8d ed       	ldi	r24, 0xDD	; 221
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	f1 f7       	brne	.-4      	; 0xd88 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     d8c:	80 81       	ld	r24, Z
     d8e:	88 60       	ori	r24, 0x08	; 8
     d90:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     d92:	80 81       	ld	r24, Z
     d94:	80 64       	ori	r24, 0x40	; 64
     d96:	80 83       	st	Z, r24
}
     d98:	08 95       	ret

00000d9a <task_tc1047>:

void task_tc1047(char *arg)
{
	static int	value;
	static int	volatile in_adc = 0;
	if (!strcmp(arg, "")) {
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 81       	ld	r18, Z
     d9e:	22 23       	and	r18, r18
     da0:	19 f5       	brne	.+70     	; 0xde8 <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     da2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <adc_start>
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	90 93 4b 04 	sts	0x044B, r25
     dae:	80 93 4a 04 	sts	0x044A, r24
     db2:	80 91 4a 04 	lds	r24, 0x044A
     db6:	90 91 4b 04 	lds	r25, 0x044B
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	d1 f7       	brne	.-12     	; 0xdb2 <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n$ ", value);
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <task_tc1047+0x26>
     dc0:	0f 92       	push	r0
     dc2:	8f e0       	ldi	r24, 0x0F	; 15
     dc4:	93 e0       	ldi	r25, 0x03	; 3
     dc6:	ed b7       	in	r30, 0x3d	; 61
     dc8:	fe b7       	in	r31, 0x3e	; 62
     dca:	92 83       	std	Z+2, r25	; 0x02
     dcc:	81 83       	std	Z+1, r24	; 0x01
     dce:	80 91 4c 04 	lds	r24, 0x044C
     dd2:	90 91 4d 04 	lds	r25, 0x044D
     dd6:	94 83       	std	Z+4, r25	; 0x04
     dd8:	83 83       	std	Z+3, r24	; 0x03
     dda:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	08 95       	ret
	}
	else {
		value = atoi(arg) * (1.1/1023) * 1000;
     de8:	0e 94 94 0c 	call	0x1928	; 0x1928 <atoi>
     dec:	9c 01       	movw	r18, r24
     dee:	b9 01       	movw	r22, r18
     df0:	88 27       	eor	r24, r24
     df2:	77 fd       	sbrc	r23, 7
     df4:	80 95       	com	r24
     df6:	98 2f       	mov	r25, r24
     df8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__floatsisf>
     dfc:	29 e0       	ldi	r18, 0x09	; 9
     dfe:	30 ef       	ldi	r19, 0xF0	; 240
     e00:	4c e8       	ldi	r20, 0x8C	; 140
     e02:	5a e3       	ldi	r21, 0x3A	; 58
     e04:	0e 94 7e 07 	call	0xefc	; 0xefc <__mulsf3>
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	4a e7       	ldi	r20, 0x7A	; 122
     e0e:	54 e4       	ldi	r21, 0x44	; 68
     e10:	0e 94 7e 07 	call	0xefc	; 0xefc <__mulsf3>
     e14:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fixsfsi>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     e1c:	84 5f       	subi	r24, 0xF4	; 244
     e1e:	91 40       	sbci	r25, 0x01	; 1
     e20:	6a e0       	ldi	r22, 0x0A	; 10
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     e28:	70 93 4d 04 	sts	0x044D, r23
     e2c:	60 93 4c 04 	sts	0x044C, r22
		in_adc = 0;
     e30:	10 92 4b 04 	sts	0x044B, r1
     e34:	10 92 4a 04 	sts	0x044A, r1
     e38:	08 95       	ret

00000e3a <__vector_29>:
	sbi(ADCSRA, ADIE);
	sbi(ADCSRA, ADSC);
}

ISR(ADC_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	0b b6       	in	r0, 0x3b	; 59
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	4f 93       	push	r20
     e52:	5f 93       	push	r21
     e54:	6f 93       	push	r22
     e56:	7f 93       	push	r23
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
     e5c:	af 93       	push	r26
     e5e:	bf 93       	push	r27
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	28 97       	sbiw	r28, 0x08	; 8
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	cd bf       	out	0x3d, r28	; 61
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     e72:	80 91 78 00 	lds	r24, 0x0078
     e76:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     e7a:	ea e7       	ldi	r30, 0x7A	; 122
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	20 81       	ld	r18, Z
     e80:	2f 77       	andi	r18, 0x7F	; 127
     e82:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     e84:	00 d0       	rcall	.+0      	; 0xe86 <__vector_29+0x4c>
     e86:	00 d0       	rcall	.+0      	; 0xe88 <__vector_29+0x4e>
     e88:	ed b7       	in	r30, 0x3d	; 61
     e8a:	fe b7       	in	r31, 0x3e	; 62
     e8c:	31 96       	adiw	r30, 0x01	; 1
     e8e:	8e 01       	movw	r16, r28
     e90:	0f 5f       	subi	r16, 0xFF	; 255
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	ad b7       	in	r26, 0x3d	; 61
     e96:	be b7       	in	r27, 0x3e	; 62
     e98:	12 96       	adiw	r26, 0x02	; 2
     e9a:	1c 93       	st	X, r17
     e9c:	0e 93       	st	-X, r16
     e9e:	11 97       	sbiw	r26, 0x01	; 1
     ea0:	24 e3       	ldi	r18, 0x34	; 52
     ea2:	33 e0       	ldi	r19, 0x03	; 3
     ea4:	33 83       	std	Z+3, r19	; 0x03
     ea6:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     ea8:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     eaa:	95 83       	std	Z+5, r25	; 0x05
     eac:	84 83       	std	Z+4, r24	; 0x04
     eae:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <sprintf>

	task_tc1047(arg);
     eb2:	8d b7       	in	r24, 0x3d	; 61
     eb4:	9e b7       	in	r25, 0x3e	; 62
     eb6:	06 96       	adiw	r24, 0x06	; 6
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	9e bf       	out	0x3e, r25	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	8d bf       	out	0x3d, r24	; 61
     ec2:	c8 01       	movw	r24, r16
     ec4:	0e 94 cd 06 	call	0xd9a	; 0xd9a <task_tc1047>
}
     ec8:	28 96       	adiw	r28, 0x08	; 8
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	0f 90       	pop	r0
     ef0:	0b be       	out	0x3b, r0	; 59
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__mulsf3>:
     efc:	a0 e2       	ldi	r26, 0x20	; 32
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e8       	ldi	r30, 0x84	; 132
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__prologue_saves__+0x4>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8d 83       	std	Y+5, r24	; 0x05
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	af 83       	std	Y+7, r26	; 0x07
     f12:	b8 87       	std	Y+8, r27	; 0x08
     f14:	29 83       	std	Y+1, r18	; 0x01
     f16:	3a 83       	std	Y+2, r19	; 0x02
     f18:	4b 83       	std	Y+3, r20	; 0x03
     f1a:	5c 83       	std	Y+4, r21	; 0x04
     f1c:	ce 01       	movw	r24, r28
     f1e:	05 96       	adiw	r24, 0x05	; 5
     f20:	be 01       	movw	r22, r28
     f22:	67 5e       	subi	r22, 0xE7	; 231
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__unpack_f>
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	be 01       	movw	r22, r28
     f30:	6f 5e       	subi	r22, 0xEF	; 239
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__unpack_f>
     f38:	99 8d       	ldd	r25, Y+25	; 0x19
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	78 f0       	brcs	.+30     	; 0xf5c <__mulsf3+0x60>
     f3e:	89 89       	ldd	r24, Y+17	; 0x11
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	c0 f0       	brcs	.+48     	; 0xf74 <__mulsf3+0x78>
     f44:	94 30       	cpi	r25, 0x04	; 4
     f46:	19 f4       	brne	.+6      	; 0xf4e <__mulsf3+0x52>
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	41 f4       	brne	.+16     	; 0xf5c <__mulsf3+0x60>
     f4c:	ca c0       	rjmp	.+404    	; 0x10e2 <__mulsf3+0x1e6>
     f4e:	84 30       	cpi	r24, 0x04	; 4
     f50:	19 f4       	brne	.+6      	; 0xf58 <__mulsf3+0x5c>
     f52:	92 30       	cpi	r25, 0x02	; 2
     f54:	79 f4       	brne	.+30     	; 0xf74 <__mulsf3+0x78>
     f56:	c5 c0       	rjmp	.+394    	; 0x10e2 <__mulsf3+0x1e6>
     f58:	92 30       	cpi	r25, 0x02	; 2
     f5a:	51 f4       	brne	.+20     	; 0xf70 <__mulsf3+0x74>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f60:	9a 89       	ldd	r25, Y+18	; 0x12
     f62:	29 17       	cp	r18, r25
     f64:	09 f4       	brne	.+2      	; 0xf68 <__mulsf3+0x6c>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	8a 8f       	std	Y+26, r24	; 0x1a
     f6a:	ce 01       	movw	r24, r28
     f6c:	49 96       	adiw	r24, 0x19	; 25
     f6e:	bb c0       	rjmp	.+374    	; 0x10e6 <__mulsf3+0x1ea>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	51 f4       	brne	.+20     	; 0xf88 <__mulsf3+0x8c>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f78:	9a 89       	ldd	r25, Y+18	; 0x12
     f7a:	29 17       	cp	r18, r25
     f7c:	09 f4       	brne	.+2      	; 0xf80 <__mulsf3+0x84>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	8a 8b       	std	Y+18, r24	; 0x12
     f82:	ce 01       	movw	r24, r28
     f84:	41 96       	adiw	r24, 0x11	; 17
     f86:	af c0       	rjmp	.+350    	; 0x10e6 <__mulsf3+0x1ea>
     f88:	4d 8c       	ldd	r4, Y+29	; 0x1d
     f8a:	5e 8c       	ldd	r5, Y+30	; 0x1e
     f8c:	6f 8c       	ldd	r6, Y+31	; 0x1f
     f8e:	78 a0       	lds	r23, 0x88
     f90:	0d 89       	ldd	r16, Y+21	; 0x15
     f92:	1e 89       	ldd	r17, Y+22	; 0x16
     f94:	2f 89       	ldd	r18, Y+23	; 0x17
     f96:	38 8d       	ldd	r19, Y+24	; 0x18
     f98:	e0 e2       	ldi	r30, 0x20	; 32
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	ba 01       	movw	r22, r20
     fa2:	88 24       	eor	r8, r8
     fa4:	99 24       	eor	r9, r9
     fa6:	54 01       	movw	r10, r8
     fa8:	cc 24       	eor	r12, r12
     faa:	dd 24       	eor	r13, r13
     fac:	76 01       	movw	r14, r12
     fae:	c2 01       	movw	r24, r4
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	d1 f0       	breq	.+52     	; 0xfec <__mulsf3+0xf0>
     fb8:	c0 0e       	add	r12, r16
     fba:	d1 1e       	adc	r13, r17
     fbc:	e2 1e       	adc	r14, r18
     fbe:	f3 1e       	adc	r15, r19
     fc0:	db 01       	movw	r26, r22
     fc2:	ca 01       	movw	r24, r20
     fc4:	88 0d       	add	r24, r8
     fc6:	99 1d       	adc	r25, r9
     fc8:	aa 1d       	adc	r26, r10
     fca:	bb 1d       	adc	r27, r11
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	c0 16       	cp	r12, r16
     fd6:	d1 06       	cpc	r13, r17
     fd8:	e2 06       	cpc	r14, r18
     fda:	f3 06       	cpc	r15, r19
     fdc:	18 f0       	brcs	.+6      	; 0xfe4 <__mulsf3+0xe8>
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	ba 01       	movw	r22, r20
     fe4:	48 0f       	add	r20, r24
     fe6:	59 1f       	adc	r21, r25
     fe8:	6a 1f       	adc	r22, r26
     fea:	7b 1f       	adc	r23, r27
     fec:	88 0c       	add	r8, r8
     fee:	99 1c       	adc	r9, r9
     ff0:	aa 1c       	adc	r10, r10
     ff2:	bb 1c       	adc	r11, r11
     ff4:	37 ff       	sbrs	r19, 7
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <__mulsf3+0x10c>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a0 e0       	ldi	r26, 0x00	; 0
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	88 2a       	or	r8, r24
    1002:	99 2a       	or	r9, r25
    1004:	aa 2a       	or	r10, r26
    1006:	bb 2a       	or	r11, r27
    1008:	00 0f       	add	r16, r16
    100a:	11 1f       	adc	r17, r17
    100c:	22 1f       	adc	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	76 94       	lsr	r7
    1012:	67 94       	ror	r6
    1014:	57 94       	ror	r5
    1016:	47 94       	ror	r4
    1018:	31 97       	sbiw	r30, 0x01	; 1
    101a:	49 f6       	brne	.-110    	; 0xfae <__mulsf3+0xb2>
    101c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1020:	2b 89       	ldd	r18, Y+19	; 0x13
    1022:	3c 89       	ldd	r19, Y+20	; 0x14
    1024:	82 0f       	add	r24, r18
    1026:	93 1f       	adc	r25, r19
    1028:	02 96       	adiw	r24, 0x02	; 2
    102a:	9c 87       	std	Y+12, r25	; 0x0c
    102c:	8b 87       	std	Y+11, r24	; 0x0b
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1032:	9a 89       	ldd	r25, Y+18	; 0x12
    1034:	29 17       	cp	r18, r25
    1036:	09 f4       	brne	.+2      	; 0x103a <__mulsf3+0x13e>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	8a 87       	std	Y+10, r24	; 0x0a
    103c:	2b 85       	ldd	r18, Y+11	; 0x0b
    103e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1040:	17 c0       	rjmp	.+46     	; 0x1070 <__mulsf3+0x174>
    1042:	ca 01       	movw	r24, r20
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	61 f0       	breq	.+24     	; 0x1064 <__mulsf3+0x168>
    104c:	f6 94       	lsr	r15
    104e:	e7 94       	ror	r14
    1050:	d7 94       	ror	r13
    1052:	c7 94       	ror	r12
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e8       	ldi	r27, 0x80	; 128
    105c:	c8 2a       	or	r12, r24
    105e:	d9 2a       	or	r13, r25
    1060:	ea 2a       	or	r14, r26
    1062:	fb 2a       	or	r15, r27
    1064:	76 95       	lsr	r23
    1066:	67 95       	ror	r22
    1068:	57 95       	ror	r21
    106a:	47 95       	ror	r20
    106c:	2f 5f       	subi	r18, 0xFF	; 255
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	77 fd       	sbrc	r23, 7
    1072:	e7 cf       	rjmp	.-50     	; 0x1042 <__mulsf3+0x146>
    1074:	c9 01       	movw	r24, r18
    1076:	0b c0       	rjmp	.+22     	; 0x108e <__mulsf3+0x192>
    1078:	44 0f       	add	r20, r20
    107a:	55 1f       	adc	r21, r21
    107c:	66 1f       	adc	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	f7 fc       	sbrc	r15, 7
    1082:	41 60       	ori	r20, 0x01	; 1
    1084:	cc 0c       	add	r12, r12
    1086:	dd 1c       	adc	r13, r13
    1088:	ee 1c       	adc	r14, r14
    108a:	ff 1c       	adc	r15, r15
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	40 30       	cpi	r20, 0x00	; 0
    1090:	a0 e0       	ldi	r26, 0x00	; 0
    1092:	5a 07       	cpc	r21, r26
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	6a 07       	cpc	r22, r26
    1098:	a0 e4       	ldi	r26, 0x40	; 64
    109a:	7a 07       	cpc	r23, r26
    109c:	68 f3       	brcs	.-38     	; 0x1078 <__mulsf3+0x17c>
    109e:	8b 87       	std	Y+11, r24	; 0x0b
    10a0:	9c 87       	std	Y+12, r25	; 0x0c
    10a2:	db 01       	movw	r26, r22
    10a4:	ca 01       	movw	r24, r20
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	90 70       	andi	r25, 0x00	; 0
    10aa:	a0 70       	andi	r26, 0x00	; 0
    10ac:	b0 70       	andi	r27, 0x00	; 0
    10ae:	80 34       	cpi	r24, 0x40	; 64
    10b0:	91 05       	cpc	r25, r1
    10b2:	a1 05       	cpc	r26, r1
    10b4:	b1 05       	cpc	r27, r1
    10b6:	61 f4       	brne	.+24     	; 0x10d0 <__mulsf3+0x1d4>
    10b8:	47 fd       	sbrc	r20, 7
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <__mulsf3+0x1d4>
    10bc:	c1 14       	cp	r12, r1
    10be:	d1 04       	cpc	r13, r1
    10c0:	e1 04       	cpc	r14, r1
    10c2:	f1 04       	cpc	r15, r1
    10c4:	29 f0       	breq	.+10     	; 0x10d0 <__mulsf3+0x1d4>
    10c6:	40 5c       	subi	r20, 0xC0	; 192
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	6f 4f       	sbci	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	40 78       	andi	r20, 0x80	; 128
    10d0:	4d 87       	std	Y+13, r20	; 0x0d
    10d2:	5e 87       	std	Y+14, r21	; 0x0e
    10d4:	6f 87       	std	Y+15, r22	; 0x0f
    10d6:	78 8b       	std	Y+16, r23	; 0x10
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	89 87       	std	Y+9, r24	; 0x09
    10dc:	ce 01       	movw	r24, r28
    10de:	09 96       	adiw	r24, 0x09	; 9
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <__mulsf3+0x1ea>
    10e2:	87 e3       	ldi	r24, 0x37	; 55
    10e4:	93 e0       	ldi	r25, 0x03	; 3
    10e6:	0e 94 9a 09 	call	0x1334	; 0x1334 <__pack_f>
    10ea:	46 2f       	mov	r20, r22
    10ec:	57 2f       	mov	r21, r23
    10ee:	68 2f       	mov	r22, r24
    10f0:	79 2f       	mov	r23, r25
    10f2:	cb 01       	movw	r24, r22
    10f4:	ba 01       	movw	r22, r20
    10f6:	a0 96       	adiw	r28, 0x20	; 32
    10f8:	e0 e1       	ldi	r30, 0x10	; 16
    10fa:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__epilogue_restores__+0x4>

000010fe <__floatsisf>:
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	28 97       	sbiw	r28, 0x08	; 8
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
    111e:	83 e0       	ldi	r24, 0x03	; 3
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	d7 01       	movw	r26, r14
    1124:	c6 01       	movw	r24, r12
    1126:	88 27       	eor	r24, r24
    1128:	b7 fd       	sbrc	r27, 7
    112a:	83 95       	inc	r24
    112c:	99 27       	eor	r25, r25
    112e:	aa 27       	eor	r26, r26
    1130:	bb 27       	eor	r27, r27
    1132:	28 2f       	mov	r18, r24
    1134:	8a 83       	std	Y+2, r24	; 0x02
    1136:	c1 14       	cp	r12, r1
    1138:	d1 04       	cpc	r13, r1
    113a:	e1 04       	cpc	r14, r1
    113c:	f1 04       	cpc	r15, r1
    113e:	19 f4       	brne	.+6      	; 0x1146 <__floatsisf+0x48>
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	35 c0       	rjmp	.+106    	; 0x11b0 <__floatsisf+0xb2>
    1146:	8e e1       	ldi	r24, 0x1E	; 30
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	22 23       	and	r18, r18
    1150:	89 f0       	breq	.+34     	; 0x1174 <__floatsisf+0x76>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	c8 16       	cp	r12, r24
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	d8 06       	cpc	r13, r24
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	e8 06       	cpc	r14, r24
    115e:	80 e8       	ldi	r24, 0x80	; 128
    1160:	f8 06       	cpc	r15, r24
    1162:	59 f1       	breq	.+86     	; 0x11ba <__floatsisf+0xbc>
    1164:	f0 94       	com	r15
    1166:	e0 94       	com	r14
    1168:	d0 94       	com	r13
    116a:	c0 94       	com	r12
    116c:	c1 1c       	adc	r12, r1
    116e:	d1 1c       	adc	r13, r1
    1170:	e1 1c       	adc	r14, r1
    1172:	f1 1c       	adc	r15, r1
    1174:	cd 82       	std	Y+5, r12	; 0x05
    1176:	de 82       	std	Y+6, r13	; 0x06
    1178:	ef 82       	std	Y+7, r14	; 0x07
    117a:	f8 86       	std	Y+8, r15	; 0x08
    117c:	c7 01       	movw	r24, r14
    117e:	b6 01       	movw	r22, r12
    1180:	0e 94 47 09 	call	0x128e	; 0x128e <__clzsi2>
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	18 16       	cp	r1, r24
    1188:	19 06       	cpc	r1, r25
    118a:	94 f4       	brge	.+36     	; 0x11b0 <__floatsisf+0xb2>
    118c:	08 2e       	mov	r0, r24
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <__floatsisf+0x9a>
    1190:	cc 0c       	add	r12, r12
    1192:	dd 1c       	adc	r13, r13
    1194:	ee 1c       	adc	r14, r14
    1196:	ff 1c       	adc	r15, r15
    1198:	0a 94       	dec	r0
    119a:	d2 f7       	brpl	.-12     	; 0x1190 <__floatsisf+0x92>
    119c:	cd 82       	std	Y+5, r12	; 0x05
    119e:	de 82       	std	Y+6, r13	; 0x06
    11a0:	ef 82       	std	Y+7, r14	; 0x07
    11a2:	f8 86       	std	Y+8, r15	; 0x08
    11a4:	2e e1       	ldi	r18, 0x1E	; 30
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	28 1b       	sub	r18, r24
    11aa:	39 0b       	sbc	r19, r25
    11ac:	3c 83       	std	Y+4, r19	; 0x04
    11ae:	2b 83       	std	Y+3, r18	; 0x03
    11b0:	ce 01       	movw	r24, r28
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	0e 94 9a 09 	call	0x1334	; 0x1334 <__pack_f>
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <__floatsisf+0xc4>
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	9f ec       	ldi	r25, 0xCF	; 207
    11c2:	38 2f       	mov	r19, r24
    11c4:	29 2f       	mov	r18, r25
    11c6:	86 2f       	mov	r24, r22
    11c8:	97 2f       	mov	r25, r23
    11ca:	a3 2f       	mov	r26, r19
    11cc:	b2 2f       	mov	r27, r18
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	28 96       	adiw	r28, 0x08	; 8
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	08 95       	ret

000011ec <__fixsfsi>:
    11ec:	ac e0       	ldi	r26, 0x0C	; 12
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ec ef       	ldi	r30, 0xFC	; 252
    11f2:	f8 e0       	ldi	r31, 0x08	; 8
    11f4:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__prologue_saves__+0x1c>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	ab 83       	std	Y+3, r26	; 0x03
    1202:	bc 83       	std	Y+4, r27	; 0x04
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	be 01       	movw	r22, r28
    120a:	6b 5f       	subi	r22, 0xFB	; 251
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
    120e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__unpack_f>
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	69 f1       	breq	.+90     	; 0x1272 <__fixsfsi+0x86>
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	58 f1       	brcs	.+86     	; 0x1272 <__fixsfsi+0x86>
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	39 f0       	breq	.+14     	; 0x122e <__fixsfsi+0x42>
    1220:	2f 81       	ldd	r18, Y+7	; 0x07
    1222:	38 85       	ldd	r19, Y+8	; 0x08
    1224:	37 fd       	sbrc	r19, 7
    1226:	25 c0       	rjmp	.+74     	; 0x1272 <__fixsfsi+0x86>
    1228:	2f 31       	cpi	r18, 0x1F	; 31
    122a:	31 05       	cpc	r19, r1
    122c:	44 f0       	brlt	.+16     	; 0x123e <__fixsfsi+0x52>
    122e:	8e 81       	ldd	r24, Y+6	; 0x06
    1230:	88 23       	and	r24, r24
    1232:	19 f1       	breq	.+70     	; 0x127a <__fixsfsi+0x8e>
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	10 e0       	ldi	r17, 0x00	; 0
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e8       	ldi	r19, 0x80	; 128
    123c:	22 c0       	rjmp	.+68     	; 0x1282 <__fixsfsi+0x96>
    123e:	8e e1       	ldi	r24, 0x1E	; 30
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	82 1b       	sub	r24, r18
    1244:	93 0b       	sbc	r25, r19
    1246:	09 85       	ldd	r16, Y+9	; 0x09
    1248:	1a 85       	ldd	r17, Y+10	; 0x0a
    124a:	2b 85       	ldd	r18, Y+11	; 0x0b
    124c:	3c 85       	ldd	r19, Y+12	; 0x0c
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__fixsfsi+0x6c>
    1250:	36 95       	lsr	r19
    1252:	27 95       	ror	r18
    1254:	17 95       	ror	r17
    1256:	07 95       	ror	r16
    1258:	8a 95       	dec	r24
    125a:	d2 f7       	brpl	.-12     	; 0x1250 <__fixsfsi+0x64>
    125c:	8e 81       	ldd	r24, Y+6	; 0x06
    125e:	88 23       	and	r24, r24
    1260:	81 f0       	breq	.+32     	; 0x1282 <__fixsfsi+0x96>
    1262:	30 95       	com	r19
    1264:	20 95       	com	r18
    1266:	10 95       	com	r17
    1268:	01 95       	neg	r16
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
    126c:	2f 4f       	sbci	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <__fixsfsi+0x96>
    1272:	00 e0       	ldi	r16, 0x00	; 0
    1274:	10 e0       	ldi	r17, 0x00	; 0
    1276:	98 01       	movw	r18, r16
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__fixsfsi+0x96>
    127a:	0f ef       	ldi	r16, 0xFF	; 255
    127c:	1f ef       	ldi	r17, 0xFF	; 255
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	3f e7       	ldi	r19, 0x7F	; 127
    1282:	b8 01       	movw	r22, r16
    1284:	c9 01       	movw	r24, r18
    1286:	2c 96       	adiw	r28, 0x0c	; 12
    1288:	e4 e0       	ldi	r30, 0x04	; 4
    128a:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <__epilogue_restores__+0x1c>

0000128e <__clzsi2>:
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	8b 01       	movw	r16, r22
    129c:	9c 01       	movw	r18, r24
    129e:	00 30       	cpi	r16, 0x00	; 0
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	18 07       	cpc	r17, r24
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	28 07       	cpc	r18, r24
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	38 07       	cpc	r19, r24
    12ac:	50 f4       	brcc	.+20     	; 0x12c2 <__clzsi2+0x34>
    12ae:	0f 3f       	cpi	r16, 0xFF	; 255
    12b0:	11 05       	cpc	r17, r1
    12b2:	21 05       	cpc	r18, r1
    12b4:	31 05       	cpc	r19, r1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <__clzsi2+0x2c>
    12b8:	88 f4       	brcc	.+34     	; 0x12dc <__clzsi2+0x4e>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	dc 01       	movw	r26, r24
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <__clzsi2+0x60>
    12c2:	00 30       	cpi	r16, 0x00	; 0
    12c4:	e0 e0       	ldi	r30, 0x00	; 0
    12c6:	1e 07       	cpc	r17, r30
    12c8:	e0 e0       	ldi	r30, 0x00	; 0
    12ca:	2e 07       	cpc	r18, r30
    12cc:	e1 e0       	ldi	r30, 0x01	; 1
    12ce:	3e 07       	cpc	r19, r30
    12d0:	50 f4       	brcc	.+20     	; 0x12e6 <__clzsi2+0x58>
    12d2:	80 e1       	ldi	r24, 0x10	; 16
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a0 e0       	ldi	r26, 0x00	; 0
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <__clzsi2+0x60>
    12dc:	88 e0       	ldi	r24, 0x08	; 8
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 e0       	ldi	r26, 0x00	; 0
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__clzsi2+0x60>
    12e6:	88 e1       	ldi	r24, 0x18	; 24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a0 e0       	ldi	r26, 0x00	; 0
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	48 1b       	sub	r20, r24
    12f8:	59 0b       	sbc	r21, r25
    12fa:	6a 0b       	sbc	r22, r26
    12fc:	7b 0b       	sbc	r23, r27
    12fe:	68 01       	movw	r12, r16
    1300:	79 01       	movw	r14, r18
    1302:	04 c0       	rjmp	.+8      	; 0x130c <__clzsi2+0x7e>
    1304:	f6 94       	lsr	r15
    1306:	e7 94       	ror	r14
    1308:	d7 94       	ror	r13
    130a:	c7 94       	ror	r12
    130c:	8a 95       	dec	r24
    130e:	d2 f7       	brpl	.-12     	; 0x1304 <__clzsi2+0x76>
    1310:	d7 01       	movw	r26, r14
    1312:	c6 01       	movw	r24, r12
    1314:	81 5c       	subi	r24, 0xC1	; 193
    1316:	9c 4f       	sbci	r25, 0xFC	; 252
    1318:	fc 01       	movw	r30, r24
    131a:	80 81       	ld	r24, Z
    131c:	48 1b       	sub	r20, r24
    131e:	51 09       	sbc	r21, r1
    1320:	61 09       	sbc	r22, r1
    1322:	71 09       	sbc	r23, r1
    1324:	ca 01       	movw	r24, r20
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	08 95       	ret

00001334 <__pack_f>:
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	dc 01       	movw	r26, r24
    1342:	14 96       	adiw	r26, 0x04	; 4
    1344:	4d 91       	ld	r20, X+
    1346:	5d 91       	ld	r21, X+
    1348:	6d 91       	ld	r22, X+
    134a:	7c 91       	ld	r23, X
    134c:	17 97       	sbiw	r26, 0x07	; 7
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	ec 91       	ld	r30, X
    1352:	11 97       	sbiw	r26, 0x01	; 1
    1354:	8c 91       	ld	r24, X
    1356:	82 30       	cpi	r24, 0x02	; 2
    1358:	20 f4       	brcc	.+8      	; 0x1362 <__pack_f+0x2e>
    135a:	60 61       	ori	r22, 0x10	; 16
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a5 c0       	rjmp	.+330    	; 0x14ac <__pack_f+0x178>
    1362:	84 30       	cpi	r24, 0x04	; 4
    1364:	09 f4       	brne	.+2      	; 0x1368 <__pack_f+0x34>
    1366:	9d c0       	rjmp	.+314    	; 0x14a2 <__pack_f+0x16e>
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	09 f4       	brne	.+2      	; 0x136e <__pack_f+0x3a>
    136c:	94 c0       	rjmp	.+296    	; 0x1496 <__pack_f+0x162>
    136e:	41 15       	cp	r20, r1
    1370:	51 05       	cpc	r21, r1
    1372:	61 05       	cpc	r22, r1
    1374:	71 05       	cpc	r23, r1
    1376:	09 f4       	brne	.+2      	; 0x137a <__pack_f+0x46>
    1378:	91 c0       	rjmp	.+290    	; 0x149c <__pack_f+0x168>
    137a:	12 96       	adiw	r26, 0x02	; 2
    137c:	8d 91       	ld	r24, X+
    137e:	9c 91       	ld	r25, X
    1380:	13 97       	sbiw	r26, 0x03	; 3
    1382:	2f ef       	ldi	r18, 0xFF	; 255
    1384:	82 38       	cpi	r24, 0x82	; 130
    1386:	92 07       	cpc	r25, r18
    1388:	0c f0       	brlt	.+2      	; 0x138c <__pack_f+0x58>
    138a:	59 c0       	rjmp	.+178    	; 0x143e <__pack_f+0x10a>
    138c:	22 e8       	ldi	r18, 0x82	; 130
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	28 1b       	sub	r18, r24
    1392:	39 0b       	sbc	r19, r25
    1394:	2a 31       	cpi	r18, 0x1A	; 26
    1396:	31 05       	cpc	r19, r1
    1398:	64 f5       	brge	.+88     	; 0x13f2 <__pack_f+0xbe>
    139a:	6a 01       	movw	r12, r20
    139c:	7b 01       	movw	r14, r22
    139e:	02 2e       	mov	r0, r18
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <__pack_f+0x76>
    13a2:	f6 94       	lsr	r15
    13a4:	e7 94       	ror	r14
    13a6:	d7 94       	ror	r13
    13a8:	c7 94       	ror	r12
    13aa:	0a 94       	dec	r0
    13ac:	d2 f7       	brpl	.-12     	; 0x13a2 <__pack_f+0x6e>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a0 e0       	ldi	r26, 0x00	; 0
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <__pack_f+0x8c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	aa 1f       	adc	r26, r26
    13be:	bb 1f       	adc	r27, r27
    13c0:	2a 95       	dec	r18
    13c2:	d2 f7       	brpl	.-12     	; 0x13b8 <__pack_f+0x84>
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	a1 09       	sbc	r26, r1
    13c8:	b1 09       	sbc	r27, r1
    13ca:	84 23       	and	r24, r20
    13cc:	95 23       	and	r25, r21
    13ce:	a6 23       	and	r26, r22
    13d0:	b7 23       	and	r27, r23
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	a1 05       	cpc	r26, r1
    13de:	b1 05       	cpc	r27, r1
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <__pack_f+0xb4>
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	ba 01       	movw	r22, r20
    13e8:	4c 29       	or	r20, r12
    13ea:	5d 29       	or	r21, r13
    13ec:	6e 29       	or	r22, r14
    13ee:	7f 29       	or	r23, r15
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <__pack_f+0xc4>
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	ba 01       	movw	r22, r20
    13f8:	db 01       	movw	r26, r22
    13fa:	ca 01       	movw	r24, r20
    13fc:	8f 77       	andi	r24, 0x7F	; 127
    13fe:	90 70       	andi	r25, 0x00	; 0
    1400:	a0 70       	andi	r26, 0x00	; 0
    1402:	b0 70       	andi	r27, 0x00	; 0
    1404:	80 34       	cpi	r24, 0x40	; 64
    1406:	91 05       	cpc	r25, r1
    1408:	a1 05       	cpc	r26, r1
    140a:	b1 05       	cpc	r27, r1
    140c:	39 f4       	brne	.+14     	; 0x141c <__pack_f+0xe8>
    140e:	47 ff       	sbrs	r20, 7
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <__pack_f+0xf0>
    1412:	40 5c       	subi	r20, 0xC0	; 192
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	6f 4f       	sbci	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <__pack_f+0xf0>
    141c:	41 5c       	subi	r20, 0xC1	; 193
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	6f 4f       	sbci	r22, 0xFF	; 255
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	40 30       	cpi	r20, 0x00	; 0
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	52 07       	cpc	r21, r18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	62 07       	cpc	r22, r18
    1432:	20 e4       	ldi	r18, 0x40	; 64
    1434:	72 07       	cpc	r23, r18
    1436:	38 f5       	brcc	.+78     	; 0x1486 <__pack_f+0x152>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	24 c0       	rjmp	.+72     	; 0x1486 <__pack_f+0x152>
    143e:	80 38       	cpi	r24, 0x80	; 128
    1440:	91 05       	cpc	r25, r1
    1442:	7c f5       	brge	.+94     	; 0x14a2 <__pack_f+0x16e>
    1444:	8a 01       	movw	r16, r20
    1446:	9b 01       	movw	r18, r22
    1448:	0f 77       	andi	r16, 0x7F	; 127
    144a:	10 70       	andi	r17, 0x00	; 0
    144c:	20 70       	andi	r18, 0x00	; 0
    144e:	30 70       	andi	r19, 0x00	; 0
    1450:	00 34       	cpi	r16, 0x40	; 64
    1452:	11 05       	cpc	r17, r1
    1454:	21 05       	cpc	r18, r1
    1456:	31 05       	cpc	r19, r1
    1458:	39 f4       	brne	.+14     	; 0x1468 <__pack_f+0x134>
    145a:	47 ff       	sbrs	r20, 7
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <__pack_f+0x13c>
    145e:	40 5c       	subi	r20, 0xC0	; 192
    1460:	5f 4f       	sbci	r21, 0xFF	; 255
    1462:	6f 4f       	sbci	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <__pack_f+0x13c>
    1468:	41 5c       	subi	r20, 0xC1	; 193
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	6f 4f       	sbci	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	77 fd       	sbrc	r23, 7
    1472:	03 c0       	rjmp	.+6      	; 0x147a <__pack_f+0x146>
    1474:	81 58       	subi	r24, 0x81	; 129
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <__pack_f+0x152>
    147a:	76 95       	lsr	r23
    147c:	67 95       	ror	r22
    147e:	57 95       	ror	r21
    1480:	47 95       	ror	r20
    1482:	80 58       	subi	r24, 0x80	; 128
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	97 e0       	ldi	r25, 0x07	; 7
    1488:	76 95       	lsr	r23
    148a:	67 95       	ror	r22
    148c:	57 95       	ror	r21
    148e:	47 95       	ror	r20
    1490:	9a 95       	dec	r25
    1492:	d1 f7       	brne	.-12     	; 0x1488 <__pack_f+0x154>
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <__pack_f+0x178>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <__pack_f+0x172>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	05 c0       	rjmp	.+10     	; 0x14ac <__pack_f+0x178>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	ba 01       	movw	r22, r20
    14ac:	98 2f       	mov	r25, r24
    14ae:	97 95       	ror	r25
    14b0:	99 27       	eor	r25, r25
    14b2:	97 95       	ror	r25
    14b4:	a6 2f       	mov	r26, r22
    14b6:	af 77       	andi	r26, 0x7F	; 127
    14b8:	e7 95       	ror	r30
    14ba:	ee 27       	eor	r30, r30
    14bc:	e7 95       	ror	r30
    14be:	86 95       	lsr	r24
    14c0:	3a 2f       	mov	r19, r26
    14c2:	39 2b       	or	r19, r25
    14c4:	28 2f       	mov	r18, r24
    14c6:	2e 2b       	or	r18, r30
    14c8:	84 2f       	mov	r24, r20
    14ca:	95 2f       	mov	r25, r21
    14cc:	a3 2f       	mov	r26, r19
    14ce:	b2 2f       	mov	r27, r18
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	08 95       	ret

000014e2 <__unpack_f>:
    14e2:	dc 01       	movw	r26, r24
    14e4:	fb 01       	movw	r30, r22
    14e6:	4c 91       	ld	r20, X
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	5c 91       	ld	r21, X
    14ec:	11 97       	sbiw	r26, 0x01	; 1
    14ee:	12 96       	adiw	r26, 0x02	; 2
    14f0:	8c 91       	ld	r24, X
    14f2:	12 97       	sbiw	r26, 0x02	; 2
    14f4:	68 2f       	mov	r22, r24
    14f6:	6f 77       	andi	r22, 0x7F	; 127
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	98 2f       	mov	r25, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	99 27       	eor	r25, r25
    1500:	99 1f       	adc	r25, r25
    1502:	13 96       	adiw	r26, 0x03	; 3
    1504:	2c 91       	ld	r18, X
    1506:	13 97       	sbiw	r26, 0x03	; 3
    1508:	82 2f       	mov	r24, r18
    150a:	88 0f       	add	r24, r24
    150c:	89 2b       	or	r24, r25
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	22 1f       	adc	r18, r18
    1512:	22 27       	eor	r18, r18
    1514:	22 1f       	adc	r18, r18
    1516:	21 83       	std	Z+1, r18	; 0x01
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	39 f5       	brne	.+78     	; 0x156a <__unpack_f+0x88>
    151c:	41 15       	cp	r20, r1
    151e:	51 05       	cpc	r21, r1
    1520:	61 05       	cpc	r22, r1
    1522:	71 05       	cpc	r23, r1
    1524:	11 f4       	brne	.+4      	; 0x152a <__unpack_f+0x48>
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	29 c0       	rjmp	.+82     	; 0x157c <__unpack_f+0x9a>
    152a:	82 e8       	ldi	r24, 0x82	; 130
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	93 83       	std	Z+3, r25	; 0x03
    1530:	82 83       	std	Z+2, r24	; 0x02
    1532:	27 e0       	ldi	r18, 0x07	; 7
    1534:	44 0f       	add	r20, r20
    1536:	55 1f       	adc	r21, r21
    1538:	66 1f       	adc	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	2a 95       	dec	r18
    153e:	d1 f7       	brne	.-12     	; 0x1534 <__unpack_f+0x52>
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	80 83       	st	Z, r24
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <__unpack_f+0x76>
    1546:	44 0f       	add	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	66 1f       	adc	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	93 81       	ldd	r25, Z+3	; 0x03
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	93 83       	std	Z+3, r25	; 0x03
    1556:	82 83       	std	Z+2, r24	; 0x02
    1558:	40 30       	cpi	r20, 0x00	; 0
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	58 07       	cpc	r21, r24
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	68 07       	cpc	r22, r24
    1562:	80 e4       	ldi	r24, 0x40	; 64
    1564:	78 07       	cpc	r23, r24
    1566:	78 f3       	brcs	.-34     	; 0x1546 <__unpack_f+0x64>
    1568:	20 c0       	rjmp	.+64     	; 0x15aa <__unpack_f+0xc8>
    156a:	8f 3f       	cpi	r24, 0xFF	; 255
    156c:	91 05       	cpc	r25, r1
    156e:	79 f4       	brne	.+30     	; 0x158e <__unpack_f+0xac>
    1570:	41 15       	cp	r20, r1
    1572:	51 05       	cpc	r21, r1
    1574:	61 05       	cpc	r22, r1
    1576:	71 05       	cpc	r23, r1
    1578:	19 f4       	brne	.+6      	; 0x1580 <__unpack_f+0x9e>
    157a:	84 e0       	ldi	r24, 0x04	; 4
    157c:	80 83       	st	Z, r24
    157e:	08 95       	ret
    1580:	64 ff       	sbrs	r22, 4
    1582:	03 c0       	rjmp	.+6      	; 0x158a <__unpack_f+0xa8>
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 83       	st	Z, r24
    1588:	10 c0       	rjmp	.+32     	; 0x15aa <__unpack_f+0xc8>
    158a:	10 82       	st	Z, r1
    158c:	0e c0       	rjmp	.+28     	; 0x15aa <__unpack_f+0xc8>
    158e:	8f 57       	subi	r24, 0x7F	; 127
    1590:	90 40       	sbci	r25, 0x00	; 0
    1592:	93 83       	std	Z+3, r25	; 0x03
    1594:	82 83       	std	Z+2, r24	; 0x02
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	80 83       	st	Z, r24
    159a:	87 e0       	ldi	r24, 0x07	; 7
    159c:	44 0f       	add	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	66 1f       	adc	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	8a 95       	dec	r24
    15a6:	d1 f7       	brne	.-12     	; 0x159c <__unpack_f+0xba>
    15a8:	70 64       	ori	r23, 0x40	; 64
    15aa:	44 83       	std	Z+4, r20	; 0x04
    15ac:	55 83       	std	Z+5, r21	; 0x05
    15ae:	66 83       	std	Z+6, r22	; 0x06
    15b0:	77 83       	std	Z+7, r23	; 0x07
    15b2:	08 95       	ret

000015b4 <main>:
#include "timer.h"
#include "task.h"
#include "adc.h"

int main()
{
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2a 97       	sbiw	r28, 0x0a	; 10
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
	int 	tag;
	struct	task task;

	sei();
    15c8:	78 94       	sei
	uart_init();
    15ca:	0e 94 df 05 	call	0xbbe	; 0xbbe <uart_init>
	task_init();
    15ce:	0e 94 0a 03 	call	0x614	; 0x614 <task_init>
	timer_init();	
    15d2:	0e 94 4a 05 	call	0xa94	; 0xa94 <timer_init>
	adc_init();
    15d6:	0e 94 b8 06 	call	0xd70	; 0xd70 <adc_init>

	printf("$ ");
    15da:	0f 92       	push	r0
    15dc:	0f 92       	push	r0
    15de:	8a e0       	ldi	r24, 0x0A	; 10
    15e0:	92 e0       	ldi	r25, 0x02	; 2
    15e2:	ed b7       	in	r30, 0x3d	; 61
    15e4:	fe b7       	in	r31, 0x3e	; 62
    15e6:	92 83       	std	Z+2, r25	; 0x02
    15e8:	81 83       	std	Z+1, r24	; 0x01
    15ea:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <printf>
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
		
	while(1) {
		cli();
    15f2:	f8 94       	cli
		tag = task_delete(&task);
    15f4:	ce 01       	movw	r24, r28
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <task_delete>
		sei();
    15fc:	78 94       	sei
		if (tag)
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	c1 f3       	breq	.-16     	; 0x15f2 <main+0x3e>
			(*(task.fun))(task.arg);
    1602:	e9 81       	ldd	r30, Y+1	; 0x01
    1604:	fa 81       	ldd	r31, Y+2	; 0x02
    1606:	ce 01       	movw	r24, r28
    1608:	03 96       	adiw	r24, 0x03	; 3
    160a:	19 95       	eicall
    160c:	f2 cf       	rjmp	.-28     	; 0x15f2 <main+0x3e>

0000160e <__divmodhi4>:
    160e:	97 fb       	bst	r25, 7
    1610:	09 2e       	mov	r0, r25
    1612:	07 26       	eor	r0, r23
    1614:	0a d0       	rcall	.+20     	; 0x162a <__divmodhi4_neg1>
    1616:	77 fd       	sbrc	r23, 7
    1618:	04 d0       	rcall	.+8      	; 0x1622 <__divmodhi4_neg2>
    161a:	0c d0       	rcall	.+24     	; 0x1634 <__udivmodhi4>
    161c:	06 d0       	rcall	.+12     	; 0x162a <__divmodhi4_neg1>
    161e:	00 20       	and	r0, r0
    1620:	1a f4       	brpl	.+6      	; 0x1628 <__divmodhi4_exit>

00001622 <__divmodhi4_neg2>:
    1622:	70 95       	com	r23
    1624:	61 95       	neg	r22
    1626:	7f 4f       	sbci	r23, 0xFF	; 255

00001628 <__divmodhi4_exit>:
    1628:	08 95       	ret

0000162a <__divmodhi4_neg1>:
    162a:	f6 f7       	brtc	.-4      	; 0x1628 <__divmodhi4_exit>
    162c:	90 95       	com	r25
    162e:	81 95       	neg	r24
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	08 95       	ret

00001634 <__udivmodhi4>:
    1634:	aa 1b       	sub	r26, r26
    1636:	bb 1b       	sub	r27, r27
    1638:	51 e1       	ldi	r21, 0x11	; 17
    163a:	07 c0       	rjmp	.+14     	; 0x164a <__udivmodhi4_ep>

0000163c <__udivmodhi4_loop>:
    163c:	aa 1f       	adc	r26, r26
    163e:	bb 1f       	adc	r27, r27
    1640:	a6 17       	cp	r26, r22
    1642:	b7 07       	cpc	r27, r23
    1644:	10 f0       	brcs	.+4      	; 0x164a <__udivmodhi4_ep>
    1646:	a6 1b       	sub	r26, r22
    1648:	b7 0b       	sbc	r27, r23

0000164a <__udivmodhi4_ep>:
    164a:	88 1f       	adc	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	5a 95       	dec	r21
    1650:	a9 f7       	brne	.-22     	; 0x163c <__udivmodhi4_loop>
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	08 95       	ret

0000165c <__prologue_saves__>:
    165c:	2f 92       	push	r2
    165e:	3f 92       	push	r3
    1660:	4f 92       	push	r4
    1662:	5f 92       	push	r5
    1664:	6f 92       	push	r6
    1666:	7f 92       	push	r7
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	ca 1b       	sub	r28, r26
    1686:	db 0b       	sbc	r29, r27
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	19 94       	eijmp

00001694 <__epilogue_restores__>:
    1694:	2a 88       	ldd	r2, Y+18	; 0x12
    1696:	39 88       	ldd	r3, Y+17	; 0x11
    1698:	48 88       	ldd	r4, Y+16	; 0x10
    169a:	5f 84       	ldd	r5, Y+15	; 0x0f
    169c:	6e 84       	ldd	r6, Y+14	; 0x0e
    169e:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    16a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a6:	b9 84       	ldd	r11, Y+9	; 0x09
    16a8:	c8 84       	ldd	r12, Y+8	; 0x08
    16aa:	df 80       	ldd	r13, Y+7	; 0x07
    16ac:	ee 80       	ldd	r14, Y+6	; 0x06
    16ae:	fd 80       	ldd	r15, Y+5	; 0x05
    16b0:	0c 81       	ldd	r16, Y+4	; 0x04
    16b2:	1b 81       	ldd	r17, Y+3	; 0x03
    16b4:	aa 81       	ldd	r26, Y+2	; 0x02
    16b6:	b9 81       	ldd	r27, Y+1	; 0x01
    16b8:	ce 0f       	add	r28, r30
    16ba:	d1 1d       	adc	r29, r1
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	ed 01       	movw	r28, r26
    16c8:	08 95       	ret

000016ca <malloc>:
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	ac 01       	movw	r20, r24
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	91 05       	cpc	r25, r1
    16d4:	10 f4       	brcc	.+4      	; 0x16da <malloc+0x10>
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	e0 91 7f 05 	lds	r30, 0x057F
    16de:	f0 91 80 05 	lds	r31, 0x0580
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	24 c0       	rjmp	.+72     	; 0x1734 <malloc+0x6a>
    16ec:	80 81       	ld	r24, Z
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	84 17       	cp	r24, r20
    16f2:	95 07       	cpc	r25, r21
    16f4:	d0 f0       	brcs	.+52     	; 0x172a <malloc+0x60>
    16f6:	84 17       	cp	r24, r20
    16f8:	95 07       	cpc	r25, r21
    16fa:	71 f4       	brne	.+28     	; 0x1718 <malloc+0x4e>
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	10 97       	sbiw	r26, 0x00	; 0
    1702:	29 f0       	breq	.+10     	; 0x170e <malloc+0x44>
    1704:	13 96       	adiw	r26, 0x03	; 3
    1706:	9c 93       	st	X, r25
    1708:	8e 93       	st	-X, r24
    170a:	12 97       	sbiw	r26, 0x02	; 2
    170c:	2c c0       	rjmp	.+88     	; 0x1766 <malloc+0x9c>
    170e:	90 93 80 05 	sts	0x0580, r25
    1712:	80 93 7f 05 	sts	0x057F, r24
    1716:	27 c0       	rjmp	.+78     	; 0x1766 <malloc+0x9c>
    1718:	21 15       	cp	r18, r1
    171a:	31 05       	cpc	r19, r1
    171c:	19 f0       	breq	.+6      	; 0x1724 <malloc+0x5a>
    171e:	82 17       	cp	r24, r18
    1720:	93 07       	cpc	r25, r19
    1722:	18 f4       	brcc	.+6      	; 0x172a <malloc+0x60>
    1724:	9c 01       	movw	r18, r24
    1726:	bd 01       	movw	r22, r26
    1728:	ef 01       	movw	r28, r30
    172a:	92 81       	ldd	r25, Z+2	; 0x02
    172c:	83 81       	ldd	r24, Z+3	; 0x03
    172e:	df 01       	movw	r26, r30
    1730:	e9 2f       	mov	r30, r25
    1732:	f8 2f       	mov	r31, r24
    1734:	30 97       	sbiw	r30, 0x00	; 0
    1736:	d1 f6       	brne	.-76     	; 0x16ec <malloc+0x22>
    1738:	21 15       	cp	r18, r1
    173a:	31 05       	cpc	r19, r1
    173c:	f9 f0       	breq	.+62     	; 0x177c <malloc+0xb2>
    173e:	c9 01       	movw	r24, r18
    1740:	84 1b       	sub	r24, r20
    1742:	95 0b       	sbc	r25, r21
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	91 05       	cpc	r25, r1
    1748:	80 f4       	brcc	.+32     	; 0x176a <malloc+0xa0>
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	61 15       	cp	r22, r1
    1750:	71 05       	cpc	r23, r1
    1752:	21 f0       	breq	.+8      	; 0x175c <malloc+0x92>
    1754:	fb 01       	movw	r30, r22
    1756:	93 83       	std	Z+3, r25	; 0x03
    1758:	82 83       	std	Z+2, r24	; 0x02
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <malloc+0x9a>
    175c:	90 93 80 05 	sts	0x0580, r25
    1760:	80 93 7f 05 	sts	0x057F, r24
    1764:	fe 01       	movw	r30, r28
    1766:	32 96       	adiw	r30, 0x02	; 2
    1768:	42 c0       	rjmp	.+132    	; 0x17ee <malloc+0x124>
    176a:	fe 01       	movw	r30, r28
    176c:	e8 0f       	add	r30, r24
    176e:	f9 1f       	adc	r31, r25
    1770:	41 93       	st	Z+, r20
    1772:	51 93       	st	Z+, r21
    1774:	02 97       	sbiw	r24, 0x02	; 2
    1776:	99 83       	std	Y+1, r25	; 0x01
    1778:	88 83       	st	Y, r24
    177a:	39 c0       	rjmp	.+114    	; 0x17ee <malloc+0x124>
    177c:	80 91 7d 05 	lds	r24, 0x057D
    1780:	90 91 7e 05 	lds	r25, 0x057E
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	41 f4       	brne	.+16     	; 0x1798 <malloc+0xce>
    1788:	80 91 41 04 	lds	r24, 0x0441
    178c:	90 91 42 04 	lds	r25, 0x0442
    1790:	90 93 7e 05 	sts	0x057E, r25
    1794:	80 93 7d 05 	sts	0x057D, r24
    1798:	20 91 3f 04 	lds	r18, 0x043F
    179c:	30 91 40 04 	lds	r19, 0x0440
    17a0:	21 15       	cp	r18, r1
    17a2:	31 05       	cpc	r19, r1
    17a4:	41 f4       	brne	.+16     	; 0x17b6 <malloc+0xec>
    17a6:	2d b7       	in	r18, 0x3d	; 61
    17a8:	3e b7       	in	r19, 0x3e	; 62
    17aa:	80 91 43 04 	lds	r24, 0x0443
    17ae:	90 91 44 04 	lds	r25, 0x0444
    17b2:	28 1b       	sub	r18, r24
    17b4:	39 0b       	sbc	r19, r25
    17b6:	e0 91 7d 05 	lds	r30, 0x057D
    17ba:	f0 91 7e 05 	lds	r31, 0x057E
    17be:	e2 17       	cp	r30, r18
    17c0:	f3 07       	cpc	r31, r19
    17c2:	98 f4       	brcc	.+38     	; 0x17ea <malloc+0x120>
    17c4:	2e 1b       	sub	r18, r30
    17c6:	3f 0b       	sbc	r19, r31
    17c8:	24 17       	cp	r18, r20
    17ca:	35 07       	cpc	r19, r21
    17cc:	70 f0       	brcs	.+28     	; 0x17ea <malloc+0x120>
    17ce:	ca 01       	movw	r24, r20
    17d0:	02 96       	adiw	r24, 0x02	; 2
    17d2:	28 17       	cp	r18, r24
    17d4:	39 07       	cpc	r19, r25
    17d6:	48 f0       	brcs	.+18     	; 0x17ea <malloc+0x120>
    17d8:	8e 0f       	add	r24, r30
    17da:	9f 1f       	adc	r25, r31
    17dc:	90 93 7e 05 	sts	0x057E, r25
    17e0:	80 93 7d 05 	sts	0x057D, r24
    17e4:	41 93       	st	Z+, r20
    17e6:	51 93       	st	Z+, r21
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <malloc+0x124>
    17ea:	e0 e0       	ldi	r30, 0x00	; 0
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	cf 01       	movw	r24, r30
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <free>:
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	9c 01       	movw	r18, r24
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	09 f4       	brne	.+2      	; 0x1806 <free+0x10>
    1804:	8c c0       	rjmp	.+280    	; 0x191e <free+0x128>
    1806:	dc 01       	movw	r26, r24
    1808:	12 97       	sbiw	r26, 0x02	; 2
    180a:	13 96       	adiw	r26, 0x03	; 3
    180c:	1c 92       	st	X, r1
    180e:	1e 92       	st	-X, r1
    1810:	12 97       	sbiw	r26, 0x02	; 2
    1812:	60 91 7f 05 	lds	r22, 0x057F
    1816:	70 91 80 05 	lds	r23, 0x0580
    181a:	61 15       	cp	r22, r1
    181c:	71 05       	cpc	r23, r1
    181e:	89 f4       	brne	.+34     	; 0x1842 <free+0x4c>
    1820:	8d 91       	ld	r24, X+
    1822:	9c 91       	ld	r25, X
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	82 0f       	add	r24, r18
    1828:	93 1f       	adc	r25, r19
    182a:	20 91 7d 05 	lds	r18, 0x057D
    182e:	30 91 7e 05 	lds	r19, 0x057E
    1832:	28 17       	cp	r18, r24
    1834:	39 07       	cpc	r19, r25
    1836:	69 f5       	brne	.+90     	; 0x1892 <free+0x9c>
    1838:	b0 93 7e 05 	sts	0x057E, r27
    183c:	a0 93 7d 05 	sts	0x057D, r26
    1840:	6e c0       	rjmp	.+220    	; 0x191e <free+0x128>
    1842:	fb 01       	movw	r30, r22
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	01 c0       	rjmp	.+2      	; 0x184c <free+0x56>
    184a:	fc 01       	movw	r30, r24
    184c:	ea 17       	cp	r30, r26
    184e:	fb 07       	cpc	r31, r27
    1850:	30 f4       	brcc	.+12     	; 0x185e <free+0x68>
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	af 01       	movw	r20, r30
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	b9 f7       	brne	.-18     	; 0x184a <free+0x54>
    185c:	1f c0       	rjmp	.+62     	; 0x189c <free+0xa6>
    185e:	e9 01       	movw	r28, r18
    1860:	22 97       	sbiw	r28, 0x02	; 2
    1862:	fb 83       	std	Y+3, r31	; 0x03
    1864:	ea 83       	std	Y+2, r30	; 0x02
    1866:	08 81       	ld	r16, Y
    1868:	19 81       	ldd	r17, Y+1	; 0x01
    186a:	c9 01       	movw	r24, r18
    186c:	80 0f       	add	r24, r16
    186e:	91 1f       	adc	r25, r17
    1870:	8e 17       	cp	r24, r30
    1872:	9f 07       	cpc	r25, r31
    1874:	59 f4       	brne	.+22     	; 0x188c <free+0x96>
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	80 0f       	add	r24, r16
    187c:	91 1f       	adc	r25, r17
    187e:	02 96       	adiw	r24, 0x02	; 2
    1880:	99 83       	std	Y+1, r25	; 0x01
    1882:	88 83       	st	Y, r24
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	9b 83       	std	Y+3, r25	; 0x03
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	41 15       	cp	r20, r1
    188e:	51 05       	cpc	r21, r1
    1890:	29 f4       	brne	.+10     	; 0x189c <free+0xa6>
    1892:	b0 93 80 05 	sts	0x0580, r27
    1896:	a0 93 7f 05 	sts	0x057F, r26
    189a:	41 c0       	rjmp	.+130    	; 0x191e <free+0x128>
    189c:	fa 01       	movw	r30, r20
    189e:	b3 83       	std	Z+3, r27	; 0x03
    18a0:	a2 83       	std	Z+2, r26	; 0x02
    18a2:	c1 91       	ld	r28, Z+
    18a4:	d1 91       	ld	r29, Z+
    18a6:	ec 0f       	add	r30, r28
    18a8:	fd 1f       	adc	r31, r29
    18aa:	ae 17       	cp	r26, r30
    18ac:	bf 07       	cpc	r27, r31
    18ae:	81 f4       	brne	.+32     	; 0x18d0 <free+0xda>
    18b0:	f9 01       	movw	r30, r18
    18b2:	92 91       	ld	r25, -Z
    18b4:	82 91       	ld	r24, -Z
    18b6:	8c 0f       	add	r24, r28
    18b8:	9d 1f       	adc	r25, r29
    18ba:	02 96       	adiw	r24, 0x02	; 2
    18bc:	da 01       	movw	r26, r20
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	9c 93       	st	X, r25
    18c2:	8e 93       	st	-X, r24
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	13 96       	adiw	r26, 0x03	; 3
    18ca:	9c 93       	st	X, r25
    18cc:	8e 93       	st	-X, r24
    18ce:	12 97       	sbiw	r26, 0x02	; 2
    18d0:	e0 e0       	ldi	r30, 0x00	; 0
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <free+0xe4>
    18d6:	fb 01       	movw	r30, r22
    18d8:	bc 01       	movw	r22, r24
    18da:	db 01       	movw	r26, r22
    18dc:	12 96       	adiw	r26, 0x02	; 2
    18de:	8d 91       	ld	r24, X+
    18e0:	9c 91       	ld	r25, X
    18e2:	13 97       	sbiw	r26, 0x03	; 3
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	b9 f7       	brne	.-18     	; 0x18d6 <free+0xe0>
    18e8:	cb 01       	movw	r24, r22
    18ea:	02 96       	adiw	r24, 0x02	; 2
    18ec:	2d 91       	ld	r18, X+
    18ee:	3c 91       	ld	r19, X
    18f0:	11 97       	sbiw	r26, 0x01	; 1
    18f2:	82 0f       	add	r24, r18
    18f4:	93 1f       	adc	r25, r19
    18f6:	20 91 7d 05 	lds	r18, 0x057D
    18fa:	30 91 7e 05 	lds	r19, 0x057E
    18fe:	28 17       	cp	r18, r24
    1900:	39 07       	cpc	r19, r25
    1902:	69 f4       	brne	.+26     	; 0x191e <free+0x128>
    1904:	30 97       	sbiw	r30, 0x00	; 0
    1906:	29 f4       	brne	.+10     	; 0x1912 <free+0x11c>
    1908:	10 92 80 05 	sts	0x0580, r1
    190c:	10 92 7f 05 	sts	0x057F, r1
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <free+0x120>
    1912:	13 82       	std	Z+3, r1	; 0x03
    1914:	12 82       	std	Z+2, r1	; 0x02
    1916:	70 93 7e 05 	sts	0x057E, r23
    191a:	60 93 7d 05 	sts	0x057D, r22
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <atoi>:
    1928:	fc 01       	movw	r30, r24
    192a:	88 27       	eor	r24, r24
    192c:	99 27       	eor	r25, r25
    192e:	e8 94       	clt
    1930:	21 91       	ld	r18, Z+
    1932:	20 32       	cpi	r18, 0x20	; 32
    1934:	e9 f3       	breq	.-6      	; 0x1930 <atoi+0x8>
    1936:	29 30       	cpi	r18, 0x09	; 9
    1938:	10 f0       	brcs	.+4      	; 0x193e <atoi+0x16>
    193a:	2e 30       	cpi	r18, 0x0E	; 14
    193c:	c8 f3       	brcs	.-14     	; 0x1930 <atoi+0x8>
    193e:	2b 32       	cpi	r18, 0x2B	; 43
    1940:	41 f0       	breq	.+16     	; 0x1952 <atoi+0x2a>
    1942:	2d 32       	cpi	r18, 0x2D	; 45
    1944:	39 f4       	brne	.+14     	; 0x1954 <atoi+0x2c>
    1946:	68 94       	set
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <atoi+0x2a>
    194a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__mulhi_const_10>
    194e:	82 0f       	add	r24, r18
    1950:	91 1d       	adc	r25, r1
    1952:	21 91       	ld	r18, Z+
    1954:	20 53       	subi	r18, 0x30	; 48
    1956:	2a 30       	cpi	r18, 0x0A	; 10
    1958:	c0 f3       	brcs	.-16     	; 0x194a <atoi+0x22>
    195a:	1e f4       	brtc	.+6      	; 0x1962 <atoi+0x3a>
    195c:	90 95       	com	r25
    195e:	81 95       	neg	r24
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	08 95       	ret

00001964 <strtok>:
    1964:	4e e4       	ldi	r20, 0x4E	; 78
    1966:	54 e0       	ldi	r21, 0x04	; 4
    1968:	0e 94 c7 0c 	call	0x198e	; 0x198e <strtok_r>
    196c:	08 95       	ret

0000196e <strcmp>:
    196e:	fb 01       	movw	r30, r22
    1970:	dc 01       	movw	r26, r24
    1972:	8d 91       	ld	r24, X+
    1974:	01 90       	ld	r0, Z+
    1976:	80 19       	sub	r24, r0
    1978:	01 10       	cpse	r0, r1
    197a:	d9 f3       	breq	.-10     	; 0x1972 <strcmp+0x4>
    197c:	99 0b       	sbc	r25, r25
    197e:	08 95       	ret

00001980 <strcpy>:
    1980:	fb 01       	movw	r30, r22
    1982:	dc 01       	movw	r26, r24
    1984:	01 90       	ld	r0, Z+
    1986:	0d 92       	st	X+, r0
    1988:	00 20       	and	r0, r0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <strcpy+0x4>
    198c:	08 95       	ret

0000198e <strtok_r>:
    198e:	fa 01       	movw	r30, r20
    1990:	a1 91       	ld	r26, Z+
    1992:	b0 81       	ld	r27, Z
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	19 f4       	brne	.+6      	; 0x199e <strtok_r+0x10>
    1998:	10 97       	sbiw	r26, 0x00	; 0
    199a:	e1 f0       	breq	.+56     	; 0x19d4 <strtok_r+0x46>
    199c:	cd 01       	movw	r24, r26
    199e:	dc 01       	movw	r26, r24
    19a0:	cd 01       	movw	r24, r26
    19a2:	0d 90       	ld	r0, X+
    19a4:	00 20       	and	r0, r0
    19a6:	11 f4       	brne	.+4      	; 0x19ac <strtok_r+0x1e>
    19a8:	c0 01       	movw	r24, r0
    19aa:	13 c0       	rjmp	.+38     	; 0x19d2 <strtok_r+0x44>
    19ac:	fb 01       	movw	r30, r22
    19ae:	21 91       	ld	r18, Z+
    19b0:	22 23       	and	r18, r18
    19b2:	19 f0       	breq	.+6      	; 0x19ba <strtok_r+0x2c>
    19b4:	20 15       	cp	r18, r0
    19b6:	d9 f7       	brne	.-10     	; 0x19ae <strtok_r+0x20>
    19b8:	f3 cf       	rjmp	.-26     	; 0x19a0 <strtok_r+0x12>
    19ba:	fb 01       	movw	r30, r22
    19bc:	21 91       	ld	r18, Z+
    19be:	20 15       	cp	r18, r0
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <strtok_r+0x3a>
    19c2:	1e 92       	st	-X, r1
    19c4:	11 96       	adiw	r26, 0x01	; 1
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <strtok_r+0x46>
    19c8:	22 23       	and	r18, r18
    19ca:	c1 f7       	brne	.-16     	; 0x19bc <strtok_r+0x2e>
    19cc:	0d 90       	ld	r0, X+
    19ce:	00 20       	and	r0, r0
    19d0:	a1 f7       	brne	.-24     	; 0x19ba <strtok_r+0x2c>
    19d2:	d0 01       	movw	r26, r0
    19d4:	fa 01       	movw	r30, r20
    19d6:	a1 93       	st	Z+, r26
    19d8:	b0 83       	st	Z, r27
    19da:	08 95       	ret

000019dc <__mulhi_const_10>:
    19dc:	7a e0       	ldi	r23, 0x0A	; 10
    19de:	97 9f       	mul	r25, r23
    19e0:	90 2d       	mov	r25, r0
    19e2:	87 9f       	mul	r24, r23
    19e4:	80 2d       	mov	r24, r0
    19e6:	91 0d       	add	r25, r1
    19e8:	11 24       	eor	r1, r1
    19ea:	08 95       	ret

000019ec <fgets>:
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	8c 01       	movw	r16, r24
    19fe:	6a 01       	movw	r12, r20
    1a00:	fa 01       	movw	r30, r20
    1a02:	83 81       	ldd	r24, Z+3	; 0x03
    1a04:	80 ff       	sbrs	r24, 0
    1a06:	1a c0       	rjmp	.+52     	; 0x1a3c <fgets+0x50>
    1a08:	16 16       	cp	r1, r22
    1a0a:	17 06       	cpc	r1, r23
    1a0c:	bc f4       	brge	.+46     	; 0x1a3c <fgets+0x50>
    1a0e:	7b 01       	movw	r14, r22
    1a10:	e8 01       	movw	r28, r16
    1a12:	0e c0       	rjmp	.+28     	; 0x1a30 <fgets+0x44>
    1a14:	c6 01       	movw	r24, r12
    1a16:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <fgetc>
    1a1a:	ff ef       	ldi	r31, 0xFF	; 255
    1a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1e:	9f 07       	cpc	r25, r31
    1a20:	69 f0       	breq	.+26     	; 0x1a3c <fgets+0x50>
    1a22:	89 93       	st	Y+, r24
    1a24:	08 94       	sec
    1a26:	e1 08       	sbc	r14, r1
    1a28:	f1 08       	sbc	r15, r1
    1a2a:	8a 30       	cpi	r24, 0x0A	; 10
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	21 f0       	breq	.+8      	; 0x1a38 <fgets+0x4c>
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	e2 16       	cp	r14, r18
    1a34:	f1 04       	cpc	r15, r1
    1a36:	71 f7       	brne	.-36     	; 0x1a14 <fgets+0x28>
    1a38:	18 82       	st	Y, r1
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <fgets+0x54>
    1a3c:	00 e0       	ldi	r16, 0x00	; 0
    1a3e:	10 e0       	ldi	r17, 0x00	; 0
    1a40:	c8 01       	movw	r24, r16
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	08 95       	ret

00001a54 <gets>:
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	8c 01       	movw	r16, r24
    1a5e:	e0 91 81 05 	lds	r30, 0x0581
    1a62:	f0 91 82 05 	lds	r31, 0x0582
    1a66:	83 81       	ldd	r24, Z+3	; 0x03
    1a68:	80 ff       	sbrs	r24, 0
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <gets+0x3c>
    1a6c:	e8 01       	movw	r28, r16
    1a6e:	80 91 81 05 	lds	r24, 0x0581
    1a72:	90 91 82 05 	lds	r25, 0x0582
    1a76:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <fgetc>
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a7e:	92 07       	cpc	r25, r18
    1a80:	39 f0       	breq	.+14     	; 0x1a90 <gets+0x3c>
    1a82:	89 93       	st	Y+, r24
    1a84:	8a 30       	cpi	r24, 0x0A	; 10
    1a86:	91 05       	cpc	r25, r1
    1a88:	91 f7       	brne	.-28     	; 0x1a6e <gets+0x1a>
    1a8a:	21 97       	sbiw	r28, 0x01	; 1
    1a8c:	18 82       	st	Y, r1
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <gets+0x40>
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	c8 01       	movw	r24, r16
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <printf>:
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	36 96       	adiw	r30, 0x06	; 6
    1aac:	61 91       	ld	r22, Z+
    1aae:	71 91       	ld	r23, Z+
    1ab0:	80 91 83 05 	lds	r24, 0x0583
    1ab4:	90 91 84 05 	lds	r25, 0x0584
    1ab8:	af 01       	movw	r20, r30
    1aba:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <vfprintf>
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	08 95       	ret

00001ac4 <putchar>:
    1ac4:	60 91 83 05 	lds	r22, 0x0583
    1ac8:	70 91 84 05 	lds	r23, 0x0584
    1acc:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1ad0:	08 95       	ret

00001ad2 <puts>:
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	8c 01       	movw	r16, r24
    1adc:	e0 91 83 05 	lds	r30, 0x0583
    1ae0:	f0 91 84 05 	lds	r31, 0x0584
    1ae4:	83 81       	ldd	r24, Z+3	; 0x03
    1ae6:	81 ff       	sbrs	r24, 1
    1ae8:	1a c0       	rjmp	.+52     	; 0x1b1e <puts+0x4c>
    1aea:	c0 e0       	ldi	r28, 0x00	; 0
    1aec:	d0 e0       	ldi	r29, 0x00	; 0
    1aee:	05 c0       	rjmp	.+10     	; 0x1afa <puts+0x28>
    1af0:	19 95       	eicall
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	11 f0       	breq	.+4      	; 0x1afa <puts+0x28>
    1af6:	cf ef       	ldi	r28, 0xFF	; 255
    1af8:	df ef       	ldi	r29, 0xFF	; 255
    1afa:	f8 01       	movw	r30, r16
    1afc:	81 91       	ld	r24, Z+
    1afe:	8f 01       	movw	r16, r30
    1b00:	60 91 83 05 	lds	r22, 0x0583
    1b04:	70 91 84 05 	lds	r23, 0x0584
    1b08:	db 01       	movw	r26, r22
    1b0a:	18 96       	adiw	r26, 0x08	; 8
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	19 97       	sbiw	r26, 0x09	; 9
    1b12:	88 23       	and	r24, r24
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <puts+0x1e>
    1b16:	8a e0       	ldi	r24, 0x0A	; 10
    1b18:	19 95       	eicall
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	11 f0       	breq	.+4      	; 0x1b22 <puts+0x50>
    1b1e:	cf ef       	ldi	r28, 0xFF	; 255
    1b20:	df ef       	ldi	r29, 0xFF	; 255
    1b22:	ce 01       	movw	r24, r28
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <sprintf>:
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	0e 89       	ldd	r16, Y+22	; 0x16
    1b48:	1f 89       	ldd	r17, Y+23	; 0x17
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	8c 83       	std	Y+4, r24	; 0x04
    1b4e:	1a 83       	std	Y+2, r17	; 0x02
    1b50:	09 83       	std	Y+1, r16	; 0x01
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	9f e7       	ldi	r25, 0x7F	; 127
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	8d 83       	std	Y+5, r24	; 0x05
    1b5a:	ae 01       	movw	r20, r28
    1b5c:	46 5e       	subi	r20, 0xE6	; 230
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	68 8d       	ldd	r22, Y+24	; 0x18
    1b66:	79 8d       	ldd	r23, Y+25	; 0x19
    1b68:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <vfprintf>
    1b6c:	ef 81       	ldd	r30, Y+7	; 0x07
    1b6e:	f8 85       	ldd	r31, Y+8	; 0x08
    1b70:	e0 0f       	add	r30, r16
    1b72:	f1 1f       	adc	r31, r17
    1b74:	10 82       	st	Z, r1
    1b76:	2e 96       	adiw	r28, 0x0e	; 14
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	08 95       	ret

00001b8c <vfprintf>:
    1b8c:	2f 92       	push	r2
    1b8e:	3f 92       	push	r3
    1b90:	4f 92       	push	r4
    1b92:	5f 92       	push	r5
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	2d 97       	sbiw	r28, 0x0d	; 13
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	3c 01       	movw	r6, r24
    1bc2:	7d 87       	std	Y+13, r23	; 0x0d
    1bc4:	6c 87       	std	Y+12, r22	; 0x0c
    1bc6:	5a 01       	movw	r10, r20
    1bc8:	fc 01       	movw	r30, r24
    1bca:	17 82       	std	Z+7, r1	; 0x07
    1bcc:	16 82       	std	Z+6, r1	; 0x06
    1bce:	83 81       	ldd	r24, Z+3	; 0x03
    1bd0:	81 ff       	sbrs	r24, 1
    1bd2:	c8 c1       	rjmp	.+912    	; 0x1f64 <vfprintf+0x3d8>
    1bd4:	2e 01       	movw	r4, r28
    1bd6:	08 94       	sec
    1bd8:	41 1c       	adc	r4, r1
    1bda:	51 1c       	adc	r5, r1
    1bdc:	f3 01       	movw	r30, r6
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1be2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1be4:	93 fd       	sbrc	r25, 3
    1be6:	85 91       	lpm	r24, Z+
    1be8:	93 ff       	sbrs	r25, 3
    1bea:	81 91       	ld	r24, Z+
    1bec:	fd 87       	std	Y+13, r31	; 0x0d
    1bee:	ec 87       	std	Y+12, r30	; 0x0c
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <vfprintf+0x6a>
    1bf4:	b3 c1       	rjmp	.+870    	; 0x1f5c <vfprintf+0x3d0>
    1bf6:	85 32       	cpi	r24, 0x25	; 37
    1bf8:	41 f4       	brne	.+16     	; 0x1c0a <vfprintf+0x7e>
    1bfa:	93 fd       	sbrc	r25, 3
    1bfc:	85 91       	lpm	r24, Z+
    1bfe:	93 ff       	sbrs	r25, 3
    1c00:	81 91       	ld	r24, Z+
    1c02:	fd 87       	std	Y+13, r31	; 0x0d
    1c04:	ec 87       	std	Y+12, r30	; 0x0c
    1c06:	85 32       	cpi	r24, 0x25	; 37
    1c08:	29 f4       	brne	.+10     	; 0x1c14 <vfprintf+0x88>
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	b3 01       	movw	r22, r6
    1c0e:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1c12:	e4 cf       	rjmp	.-56     	; 0x1bdc <vfprintf+0x50>
    1c14:	ff 24       	eor	r15, r15
    1c16:	ee 24       	eor	r14, r14
    1c18:	10 e0       	ldi	r17, 0x00	; 0
    1c1a:	10 32       	cpi	r17, 0x20	; 32
    1c1c:	b0 f4       	brcc	.+44     	; 0x1c4a <vfprintf+0xbe>
    1c1e:	8b 32       	cpi	r24, 0x2B	; 43
    1c20:	69 f0       	breq	.+26     	; 0x1c3c <vfprintf+0xb0>
    1c22:	8c 32       	cpi	r24, 0x2C	; 44
    1c24:	28 f4       	brcc	.+10     	; 0x1c30 <vfprintf+0xa4>
    1c26:	80 32       	cpi	r24, 0x20	; 32
    1c28:	51 f0       	breq	.+20     	; 0x1c3e <vfprintf+0xb2>
    1c2a:	83 32       	cpi	r24, 0x23	; 35
    1c2c:	71 f4       	brne	.+28     	; 0x1c4a <vfprintf+0xbe>
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <vfprintf+0xba>
    1c30:	8d 32       	cpi	r24, 0x2D	; 45
    1c32:	39 f0       	breq	.+14     	; 0x1c42 <vfprintf+0xb6>
    1c34:	80 33       	cpi	r24, 0x30	; 48
    1c36:	49 f4       	brne	.+18     	; 0x1c4a <vfprintf+0xbe>
    1c38:	11 60       	ori	r17, 0x01	; 1
    1c3a:	2c c0       	rjmp	.+88     	; 0x1c94 <vfprintf+0x108>
    1c3c:	12 60       	ori	r17, 0x02	; 2
    1c3e:	14 60       	ori	r17, 0x04	; 4
    1c40:	29 c0       	rjmp	.+82     	; 0x1c94 <vfprintf+0x108>
    1c42:	18 60       	ori	r17, 0x08	; 8
    1c44:	27 c0       	rjmp	.+78     	; 0x1c94 <vfprintf+0x108>
    1c46:	10 61       	ori	r17, 0x10	; 16
    1c48:	25 c0       	rjmp	.+74     	; 0x1c94 <vfprintf+0x108>
    1c4a:	17 fd       	sbrc	r17, 7
    1c4c:	2e c0       	rjmp	.+92     	; 0x1caa <vfprintf+0x11e>
    1c4e:	28 2f       	mov	r18, r24
    1c50:	20 53       	subi	r18, 0x30	; 48
    1c52:	2a 30       	cpi	r18, 0x0A	; 10
    1c54:	98 f4       	brcc	.+38     	; 0x1c7c <vfprintf+0xf0>
    1c56:	16 ff       	sbrs	r17, 6
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <vfprintf+0xde>
    1c5a:	8f 2d       	mov	r24, r15
    1c5c:	88 0f       	add	r24, r24
    1c5e:	f8 2e       	mov	r15, r24
    1c60:	ff 0c       	add	r15, r15
    1c62:	ff 0c       	add	r15, r15
    1c64:	f8 0e       	add	r15, r24
    1c66:	f2 0e       	add	r15, r18
    1c68:	15 c0       	rjmp	.+42     	; 0x1c94 <vfprintf+0x108>
    1c6a:	8e 2d       	mov	r24, r14
    1c6c:	88 0f       	add	r24, r24
    1c6e:	e8 2e       	mov	r14, r24
    1c70:	ee 0c       	add	r14, r14
    1c72:	ee 0c       	add	r14, r14
    1c74:	e8 0e       	add	r14, r24
    1c76:	e2 0e       	add	r14, r18
    1c78:	10 62       	ori	r17, 0x20	; 32
    1c7a:	0c c0       	rjmp	.+24     	; 0x1c94 <vfprintf+0x108>
    1c7c:	8e 32       	cpi	r24, 0x2E	; 46
    1c7e:	21 f4       	brne	.+8      	; 0x1c88 <vfprintf+0xfc>
    1c80:	16 fd       	sbrc	r17, 6
    1c82:	6c c1       	rjmp	.+728    	; 0x1f5c <vfprintf+0x3d0>
    1c84:	10 64       	ori	r17, 0x40	; 64
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <vfprintf+0x108>
    1c88:	8c 36       	cpi	r24, 0x6C	; 108
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <vfprintf+0x104>
    1c8c:	10 68       	ori	r17, 0x80	; 128
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x108>
    1c90:	88 36       	cpi	r24, 0x68	; 104
    1c92:	59 f4       	brne	.+22     	; 0x1caa <vfprintf+0x11e>
    1c94:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c96:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c98:	93 fd       	sbrc	r25, 3
    1c9a:	85 91       	lpm	r24, Z+
    1c9c:	93 ff       	sbrs	r25, 3
    1c9e:	81 91       	ld	r24, Z+
    1ca0:	fd 87       	std	Y+13, r31	; 0x0d
    1ca2:	ec 87       	std	Y+12, r30	; 0x0c
    1ca4:	88 23       	and	r24, r24
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <vfprintf+0x11e>
    1ca8:	b8 cf       	rjmp	.-144    	; 0x1c1a <vfprintf+0x8e>
    1caa:	98 2f       	mov	r25, r24
    1cac:	95 54       	subi	r25, 0x45	; 69
    1cae:	93 30       	cpi	r25, 0x03	; 3
    1cb0:	18 f0       	brcs	.+6      	; 0x1cb8 <vfprintf+0x12c>
    1cb2:	90 52       	subi	r25, 0x20	; 32
    1cb4:	93 30       	cpi	r25, 0x03	; 3
    1cb6:	38 f4       	brcc	.+14     	; 0x1cc6 <vfprintf+0x13a>
    1cb8:	24 e0       	ldi	r18, 0x04	; 4
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	a2 0e       	add	r10, r18
    1cbe:	b3 1e       	adc	r11, r19
    1cc0:	3f e3       	ldi	r19, 0x3F	; 63
    1cc2:	39 83       	std	Y+1, r19	; 0x01
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <vfprintf+0x158>
    1cc6:	83 36       	cpi	r24, 0x63	; 99
    1cc8:	31 f0       	breq	.+12     	; 0x1cd6 <vfprintf+0x14a>
    1cca:	83 37       	cpi	r24, 0x73	; 115
    1ccc:	81 f0       	breq	.+32     	; 0x1cee <vfprintf+0x162>
    1cce:	83 35       	cpi	r24, 0x53	; 83
    1cd0:	09 f0       	breq	.+2      	; 0x1cd4 <vfprintf+0x148>
    1cd2:	5a c0       	rjmp	.+180    	; 0x1d88 <vfprintf+0x1fc>
    1cd4:	22 c0       	rjmp	.+68     	; 0x1d1a <vfprintf+0x18e>
    1cd6:	f5 01       	movw	r30, r10
    1cd8:	80 81       	ld	r24, Z
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	22 e0       	ldi	r18, 0x02	; 2
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	a2 0e       	add	r10, r18
    1ce2:	b3 1e       	adc	r11, r19
    1ce4:	21 e0       	ldi	r18, 0x01	; 1
    1ce6:	c2 2e       	mov	r12, r18
    1ce8:	d1 2c       	mov	r13, r1
    1cea:	42 01       	movw	r8, r4
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <vfprintf+0x18a>
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	29 2e       	mov	r2, r25
    1cf2:	31 2c       	mov	r3, r1
    1cf4:	2a 0c       	add	r2, r10
    1cf6:	3b 1c       	adc	r3, r11
    1cf8:	f5 01       	movw	r30, r10
    1cfa:	80 80       	ld	r8, Z
    1cfc:	91 80       	ldd	r9, Z+1	; 0x01
    1cfe:	16 ff       	sbrs	r17, 6
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <vfprintf+0x17c>
    1d02:	6f 2d       	mov	r22, r15
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <vfprintf+0x180>
    1d08:	6f ef       	ldi	r22, 0xFF	; 255
    1d0a:	7f ef       	ldi	r23, 0xFF	; 255
    1d0c:	c4 01       	movw	r24, r8
    1d0e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <strnlen>
    1d12:	6c 01       	movw	r12, r24
    1d14:	51 01       	movw	r10, r2
    1d16:	1f 77       	andi	r17, 0x7F	; 127
    1d18:	15 c0       	rjmp	.+42     	; 0x1d44 <vfprintf+0x1b8>
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	28 2e       	mov	r2, r24
    1d1e:	31 2c       	mov	r3, r1
    1d20:	2a 0c       	add	r2, r10
    1d22:	3b 1c       	adc	r3, r11
    1d24:	f5 01       	movw	r30, r10
    1d26:	80 80       	ld	r8, Z
    1d28:	91 80       	ldd	r9, Z+1	; 0x01
    1d2a:	16 ff       	sbrs	r17, 6
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <vfprintf+0x1a8>
    1d2e:	6f 2d       	mov	r22, r15
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <vfprintf+0x1ac>
    1d34:	6f ef       	ldi	r22, 0xFF	; 255
    1d36:	7f ef       	ldi	r23, 0xFF	; 255
    1d38:	c4 01       	movw	r24, r8
    1d3a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <strnlen_P>
    1d3e:	6c 01       	movw	r12, r24
    1d40:	10 68       	ori	r17, 0x80	; 128
    1d42:	51 01       	movw	r10, r2
    1d44:	13 fd       	sbrc	r17, 3
    1d46:	1c c0       	rjmp	.+56     	; 0x1d80 <vfprintf+0x1f4>
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <vfprintf+0x1ca>
    1d4a:	80 e2       	ldi	r24, 0x20	; 32
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	b3 01       	movw	r22, r6
    1d50:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1d54:	ea 94       	dec	r14
    1d56:	8e 2d       	mov	r24, r14
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	c8 16       	cp	r12, r24
    1d5c:	d9 06       	cpc	r13, r25
    1d5e:	a8 f3       	brcs	.-22     	; 0x1d4a <vfprintf+0x1be>
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <vfprintf+0x1f4>
    1d62:	f4 01       	movw	r30, r8
    1d64:	17 fd       	sbrc	r17, 7
    1d66:	85 91       	lpm	r24, Z+
    1d68:	17 ff       	sbrs	r17, 7
    1d6a:	81 91       	ld	r24, Z+
    1d6c:	4f 01       	movw	r8, r30
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	b3 01       	movw	r22, r6
    1d72:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1d76:	e1 10       	cpse	r14, r1
    1d78:	ea 94       	dec	r14
    1d7a:	08 94       	sec
    1d7c:	c1 08       	sbc	r12, r1
    1d7e:	d1 08       	sbc	r13, r1
    1d80:	c1 14       	cp	r12, r1
    1d82:	d1 04       	cpc	r13, r1
    1d84:	71 f7       	brne	.-36     	; 0x1d62 <vfprintf+0x1d6>
    1d86:	e7 c0       	rjmp	.+462    	; 0x1f56 <vfprintf+0x3ca>
    1d88:	84 36       	cpi	r24, 0x64	; 100
    1d8a:	11 f0       	breq	.+4      	; 0x1d90 <vfprintf+0x204>
    1d8c:	89 36       	cpi	r24, 0x69	; 105
    1d8e:	51 f5       	brne	.+84     	; 0x1de4 <vfprintf+0x258>
    1d90:	f5 01       	movw	r30, r10
    1d92:	17 ff       	sbrs	r17, 7
    1d94:	07 c0       	rjmp	.+14     	; 0x1da4 <vfprintf+0x218>
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	a2 81       	ldd	r26, Z+2	; 0x02
    1d9c:	b3 81       	ldd	r27, Z+3	; 0x03
    1d9e:	24 e0       	ldi	r18, 0x04	; 4
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <vfprintf+0x228>
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	aa 27       	eor	r26, r26
    1daa:	97 fd       	sbrc	r25, 7
    1dac:	a0 95       	com	r26
    1dae:	ba 2f       	mov	r27, r26
    1db0:	22 e0       	ldi	r18, 0x02	; 2
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	a2 0e       	add	r10, r18
    1db6:	b3 1e       	adc	r11, r19
    1db8:	01 2f       	mov	r16, r17
    1dba:	0f 76       	andi	r16, 0x6F	; 111
    1dbc:	b7 ff       	sbrs	r27, 7
    1dbe:	08 c0       	rjmp	.+16     	; 0x1dd0 <vfprintf+0x244>
    1dc0:	b0 95       	com	r27
    1dc2:	a0 95       	com	r26
    1dc4:	90 95       	com	r25
    1dc6:	81 95       	neg	r24
    1dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dca:	af 4f       	sbci	r26, 0xFF	; 255
    1dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dce:	00 68       	ori	r16, 0x80	; 128
    1dd0:	bc 01       	movw	r22, r24
    1dd2:	cd 01       	movw	r24, r26
    1dd4:	a2 01       	movw	r20, r4
    1dd6:	2a e0       	ldi	r18, 0x0A	; 10
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	0e 94 4f 10 	call	0x209e	; 0x209e <__ultoa_invert>
    1dde:	d8 2e       	mov	r13, r24
    1de0:	d4 18       	sub	r13, r4
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <vfprintf+0x2d6>
    1de4:	85 37       	cpi	r24, 0x75	; 117
    1de6:	21 f4       	brne	.+8      	; 0x1df0 <vfprintf+0x264>
    1de8:	1f 7e       	andi	r17, 0xEF	; 239
    1dea:	2a e0       	ldi	r18, 0x0A	; 10
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	20 c0       	rjmp	.+64     	; 0x1e30 <vfprintf+0x2a4>
    1df0:	19 7f       	andi	r17, 0xF9	; 249
    1df2:	8f 36       	cpi	r24, 0x6F	; 111
    1df4:	a9 f0       	breq	.+42     	; 0x1e20 <vfprintf+0x294>
    1df6:	80 37       	cpi	r24, 0x70	; 112
    1df8:	20 f4       	brcc	.+8      	; 0x1e02 <vfprintf+0x276>
    1dfa:	88 35       	cpi	r24, 0x58	; 88
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <vfprintf+0x274>
    1dfe:	ae c0       	rjmp	.+348    	; 0x1f5c <vfprintf+0x3d0>
    1e00:	0b c0       	rjmp	.+22     	; 0x1e18 <vfprintf+0x28c>
    1e02:	80 37       	cpi	r24, 0x70	; 112
    1e04:	21 f0       	breq	.+8      	; 0x1e0e <vfprintf+0x282>
    1e06:	88 37       	cpi	r24, 0x78	; 120
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <vfprintf+0x280>
    1e0a:	a8 c0       	rjmp	.+336    	; 0x1f5c <vfprintf+0x3d0>
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <vfprintf+0x284>
    1e0e:	10 61       	ori	r17, 0x10	; 16
    1e10:	14 ff       	sbrs	r17, 4
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <vfprintf+0x29a>
    1e14:	14 60       	ori	r17, 0x04	; 4
    1e16:	07 c0       	rjmp	.+14     	; 0x1e26 <vfprintf+0x29a>
    1e18:	14 ff       	sbrs	r17, 4
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <vfprintf+0x2a0>
    1e1c:	16 60       	ori	r17, 0x06	; 6
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <vfprintf+0x2a0>
    1e20:	28 e0       	ldi	r18, 0x08	; 8
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <vfprintf+0x2a4>
    1e26:	20 e1       	ldi	r18, 0x10	; 16
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <vfprintf+0x2a4>
    1e2c:	20 e1       	ldi	r18, 0x10	; 16
    1e2e:	32 e0       	ldi	r19, 0x02	; 2
    1e30:	f5 01       	movw	r30, r10
    1e32:	17 ff       	sbrs	r17, 7
    1e34:	07 c0       	rjmp	.+14     	; 0x1e44 <vfprintf+0x2b8>
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	44 e0       	ldi	r20, 0x04	; 4
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	06 c0       	rjmp	.+12     	; 0x1e50 <vfprintf+0x2c4>
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	42 e0       	ldi	r20, 0x02	; 2
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	a4 0e       	add	r10, r20
    1e52:	b5 1e       	adc	r11, r21
    1e54:	a2 01       	movw	r20, r4
    1e56:	0e 94 4f 10 	call	0x209e	; 0x209e <__ultoa_invert>
    1e5a:	d8 2e       	mov	r13, r24
    1e5c:	d4 18       	sub	r13, r4
    1e5e:	01 2f       	mov	r16, r17
    1e60:	0f 77       	andi	r16, 0x7F	; 127
    1e62:	06 ff       	sbrs	r16, 6
    1e64:	09 c0       	rjmp	.+18     	; 0x1e78 <vfprintf+0x2ec>
    1e66:	0e 7f       	andi	r16, 0xFE	; 254
    1e68:	df 14       	cp	r13, r15
    1e6a:	30 f4       	brcc	.+12     	; 0x1e78 <vfprintf+0x2ec>
    1e6c:	04 ff       	sbrs	r16, 4
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <vfprintf+0x2f0>
    1e70:	02 fd       	sbrc	r16, 2
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <vfprintf+0x2f0>
    1e74:	0f 7e       	andi	r16, 0xEF	; 239
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vfprintf+0x2f0>
    1e78:	1d 2d       	mov	r17, r13
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <vfprintf+0x2f2>
    1e7c:	1f 2d       	mov	r17, r15
    1e7e:	80 2f       	mov	r24, r16
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	04 ff       	sbrs	r16, 4
    1e84:	0c c0       	rjmp	.+24     	; 0x1e9e <vfprintf+0x312>
    1e86:	fe 01       	movw	r30, r28
    1e88:	ed 0d       	add	r30, r13
    1e8a:	f1 1d       	adc	r31, r1
    1e8c:	20 81       	ld	r18, Z
    1e8e:	20 33       	cpi	r18, 0x30	; 48
    1e90:	11 f4       	brne	.+4      	; 0x1e96 <vfprintf+0x30a>
    1e92:	09 7e       	andi	r16, 0xE9	; 233
    1e94:	09 c0       	rjmp	.+18     	; 0x1ea8 <vfprintf+0x31c>
    1e96:	02 ff       	sbrs	r16, 2
    1e98:	06 c0       	rjmp	.+12     	; 0x1ea6 <vfprintf+0x31a>
    1e9a:	1e 5f       	subi	r17, 0xFE	; 254
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <vfprintf+0x31c>
    1e9e:	86 78       	andi	r24, 0x86	; 134
    1ea0:	90 70       	andi	r25, 0x00	; 0
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <vfprintf+0x31c>
    1ea6:	1f 5f       	subi	r17, 0xFF	; 255
    1ea8:	80 2e       	mov	r8, r16
    1eaa:	99 24       	eor	r9, r9
    1eac:	03 fd       	sbrc	r16, 3
    1eae:	12 c0       	rjmp	.+36     	; 0x1ed4 <vfprintf+0x348>
    1eb0:	00 ff       	sbrs	r16, 0
    1eb2:	0d c0       	rjmp	.+26     	; 0x1ece <vfprintf+0x342>
    1eb4:	fd 2c       	mov	r15, r13
    1eb6:	1e 15       	cp	r17, r14
    1eb8:	50 f4       	brcc	.+20     	; 0x1ece <vfprintf+0x342>
    1eba:	fe 0c       	add	r15, r14
    1ebc:	f1 1a       	sub	r15, r17
    1ebe:	1e 2d       	mov	r17, r14
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <vfprintf+0x342>
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	b3 01       	movw	r22, r6
    1ec8:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1ecc:	1f 5f       	subi	r17, 0xFF	; 255
    1ece:	1e 15       	cp	r17, r14
    1ed0:	c0 f3       	brcs	.-16     	; 0x1ec2 <vfprintf+0x336>
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <vfprintf+0x350>
    1ed4:	1e 15       	cp	r17, r14
    1ed6:	10 f4       	brcc	.+4      	; 0x1edc <vfprintf+0x350>
    1ed8:	e1 1a       	sub	r14, r17
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <vfprintf+0x352>
    1edc:	ee 24       	eor	r14, r14
    1ede:	84 fe       	sbrs	r8, 4
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <vfprintf+0x374>
    1ee2:	80 e3       	ldi	r24, 0x30	; 48
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	b3 01       	movw	r22, r6
    1ee8:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1eec:	82 fe       	sbrs	r8, 2
    1eee:	1f c0       	rjmp	.+62     	; 0x1f2e <vfprintf+0x3a2>
    1ef0:	81 fe       	sbrs	r8, 1
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <vfprintf+0x36e>
    1ef4:	88 e5       	ldi	r24, 0x58	; 88
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	10 c0       	rjmp	.+32     	; 0x1f1a <vfprintf+0x38e>
    1efa:	88 e7       	ldi	r24, 0x78	; 120
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0d c0       	rjmp	.+26     	; 0x1f1a <vfprintf+0x38e>
    1f00:	c4 01       	movw	r24, r8
    1f02:	86 78       	andi	r24, 0x86	; 134
    1f04:	90 70       	andi	r25, 0x00	; 0
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	91 f0       	breq	.+36     	; 0x1f2e <vfprintf+0x3a2>
    1f0a:	81 fc       	sbrc	r8, 1
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x386>
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <vfprintf+0x388>
    1f12:	8b e2       	ldi	r24, 0x2B	; 43
    1f14:	07 fd       	sbrc	r16, 7
    1f16:	8d e2       	ldi	r24, 0x2D	; 45
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	b3 01       	movw	r22, r6
    1f1c:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f20:	06 c0       	rjmp	.+12     	; 0x1f2e <vfprintf+0x3a2>
    1f22:	80 e3       	ldi	r24, 0x30	; 48
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	b3 01       	movw	r22, r6
    1f28:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f2c:	fa 94       	dec	r15
    1f2e:	df 14       	cp	r13, r15
    1f30:	c0 f3       	brcs	.-16     	; 0x1f22 <vfprintf+0x396>
    1f32:	da 94       	dec	r13
    1f34:	f2 01       	movw	r30, r4
    1f36:	ed 0d       	add	r30, r13
    1f38:	f1 1d       	adc	r31, r1
    1f3a:	80 81       	ld	r24, Z
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	b3 01       	movw	r22, r6
    1f40:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f44:	dd 20       	and	r13, r13
    1f46:	a9 f7       	brne	.-22     	; 0x1f32 <vfprintf+0x3a6>
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <vfprintf+0x3ca>
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	b3 01       	movw	r22, r6
    1f50:	0e 94 23 10 	call	0x2046	; 0x2046 <fputc>
    1f54:	ea 94       	dec	r14
    1f56:	ee 20       	and	r14, r14
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <vfprintf+0x3be>
    1f5a:	40 ce       	rjmp	.-896    	; 0x1bdc <vfprintf+0x50>
    1f5c:	f3 01       	movw	r30, r6
    1f5e:	86 81       	ldd	r24, Z+6	; 0x06
    1f60:	97 81       	ldd	r25, Z+7	; 0x07
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <vfprintf+0x3dc>
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	2d 96       	adiw	r28, 0x0d	; 13
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	7f 90       	pop	r7
    1f8e:	6f 90       	pop	r6
    1f90:	5f 90       	pop	r5
    1f92:	4f 90       	pop	r4
    1f94:	3f 90       	pop	r3
    1f96:	2f 90       	pop	r2
    1f98:	08 95       	ret

00001f9a <strnlen_P>:
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	05 90       	lpm	r0, Z+
    1f9e:	61 50       	subi	r22, 0x01	; 1
    1fa0:	70 40       	sbci	r23, 0x00	; 0
    1fa2:	01 10       	cpse	r0, r1
    1fa4:	d8 f7       	brcc	.-10     	; 0x1f9c <strnlen_P+0x2>
    1fa6:	80 95       	com	r24
    1fa8:	90 95       	com	r25
    1faa:	8e 0f       	add	r24, r30
    1fac:	9f 1f       	adc	r25, r31
    1fae:	08 95       	ret

00001fb0 <strnlen>:
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	61 50       	subi	r22, 0x01	; 1
    1fb4:	70 40       	sbci	r23, 0x00	; 0
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	01 10       	cpse	r0, r1
    1fba:	d8 f7       	brcc	.-10     	; 0x1fb2 <strnlen+0x2>
    1fbc:	80 95       	com	r24
    1fbe:	90 95       	com	r25
    1fc0:	8e 0f       	add	r24, r30
    1fc2:	9f 1f       	adc	r25, r31
    1fc4:	08 95       	ret

00001fc6 <fgetc>:
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	ec 01       	movw	r28, r24
    1fcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fce:	20 ff       	sbrs	r18, 0
    1fd0:	35 c0       	rjmp	.+106    	; 0x203c <fgetc+0x76>
    1fd2:	26 ff       	sbrs	r18, 6
    1fd4:	09 c0       	rjmp	.+18     	; 0x1fe8 <fgetc+0x22>
    1fd6:	2f 7b       	andi	r18, 0xBF	; 191
    1fd8:	2b 83       	std	Y+3, r18	; 0x03
    1fda:	8e 81       	ldd	r24, Y+6	; 0x06
    1fdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	9f 83       	std	Y+7, r25	; 0x07
    1fe2:	8e 83       	std	Y+6, r24	; 0x06
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 c0       	rjmp	.+80     	; 0x2038 <fgetc+0x72>
    1fe8:	22 ff       	sbrs	r18, 2
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <fgetc+0x44>
    1fec:	e8 81       	ld	r30, Y
    1fee:	f9 81       	ldd	r31, Y+1	; 0x01
    1ff0:	80 81       	ld	r24, Z
    1ff2:	99 27       	eor	r25, r25
    1ff4:	87 fd       	sbrc	r24, 7
    1ff6:	90 95       	com	r25
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <fgetc+0x3c>
    1ffc:	20 62       	ori	r18, 0x20	; 32
    1ffe:	2b 83       	std	Y+3, r18	; 0x03
    2000:	1d c0       	rjmp	.+58     	; 0x203c <fgetc+0x76>
    2002:	31 96       	adiw	r30, 0x01	; 1
    2004:	f9 83       	std	Y+1, r31	; 0x01
    2006:	e8 83       	st	Y, r30
    2008:	11 c0       	rjmp	.+34     	; 0x202c <fgetc+0x66>
    200a:	ea 85       	ldd	r30, Y+10	; 0x0a
    200c:	fb 85       	ldd	r31, Y+11	; 0x0b
    200e:	ce 01       	movw	r24, r28
    2010:	19 95       	eicall
    2012:	97 ff       	sbrs	r25, 7
    2014:	0b c0       	rjmp	.+22     	; 0x202c <fgetc+0x66>
    2016:	2b 81       	ldd	r18, Y+3	; 0x03
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	8f 3f       	cpi	r24, 0xFF	; 255
    201c:	93 07       	cpc	r25, r19
    201e:	11 f4       	brne	.+4      	; 0x2024 <fgetc+0x5e>
    2020:	80 e1       	ldi	r24, 0x10	; 16
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <fgetc+0x60>
    2024:	80 e2       	ldi	r24, 0x20	; 32
    2026:	82 2b       	or	r24, r18
    2028:	8b 83       	std	Y+3, r24	; 0x03
    202a:	08 c0       	rjmp	.+16     	; 0x203c <fgetc+0x76>
    202c:	2e 81       	ldd	r18, Y+6	; 0x06
    202e:	3f 81       	ldd	r19, Y+7	; 0x07
    2030:	2f 5f       	subi	r18, 0xFF	; 255
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	3f 83       	std	Y+7, r19	; 0x07
    2036:	2e 83       	std	Y+6, r18	; 0x06
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <fgetc+0x7a>
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	9f ef       	ldi	r25, 0xFF	; 255
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <fputc>:
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	8c 01       	movw	r16, r24
    2050:	eb 01       	movw	r28, r22
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	81 ff       	sbrs	r24, 1
    2056:	1b c0       	rjmp	.+54     	; 0x208e <fputc+0x48>
    2058:	82 ff       	sbrs	r24, 2
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <fputc+0x30>
    205c:	2e 81       	ldd	r18, Y+6	; 0x06
    205e:	3f 81       	ldd	r19, Y+7	; 0x07
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	28 17       	cp	r18, r24
    2066:	39 07       	cpc	r19, r25
    2068:	64 f4       	brge	.+24     	; 0x2082 <fputc+0x3c>
    206a:	e8 81       	ld	r30, Y
    206c:	f9 81       	ldd	r31, Y+1	; 0x01
    206e:	01 93       	st	Z+, r16
    2070:	f9 83       	std	Y+1, r31	; 0x01
    2072:	e8 83       	st	Y, r30
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <fputc+0x3c>
    2076:	e8 85       	ldd	r30, Y+8	; 0x08
    2078:	f9 85       	ldd	r31, Y+9	; 0x09
    207a:	80 2f       	mov	r24, r16
    207c:	19 95       	eicall
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	31 f4       	brne	.+12     	; 0x208e <fputc+0x48>
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	9f 83       	std	Y+7, r25	; 0x07
    208a:	8e 83       	std	Y+6, r24	; 0x06
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <fputc+0x4c>
    208e:	0f ef       	ldi	r16, 0xFF	; 255
    2090:	1f ef       	ldi	r17, 0xFF	; 255
    2092:	c8 01       	movw	r24, r16
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	1f 91       	pop	r17
    209a:	0f 91       	pop	r16
    209c:	08 95       	ret

0000209e <__ultoa_invert>:
    209e:	fa 01       	movw	r30, r20
    20a0:	aa 27       	eor	r26, r26
    20a2:	28 30       	cpi	r18, 0x08	; 8
    20a4:	51 f1       	breq	.+84     	; 0x20fa <__ultoa_invert+0x5c>
    20a6:	20 31       	cpi	r18, 0x10	; 16
    20a8:	81 f1       	breq	.+96     	; 0x210a <__ultoa_invert+0x6c>
    20aa:	e8 94       	clt
    20ac:	6f 93       	push	r22
    20ae:	6e 7f       	andi	r22, 0xFE	; 254
    20b0:	6e 5f       	subi	r22, 0xFE	; 254
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	8f 4f       	sbci	r24, 0xFF	; 255
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	af 4f       	sbci	r26, 0xFF	; 255
    20ba:	b1 e0       	ldi	r27, 0x01	; 1
    20bc:	3e d0       	rcall	.+124    	; 0x213a <__ultoa_invert+0x9c>
    20be:	b4 e0       	ldi	r27, 0x04	; 4
    20c0:	3c d0       	rcall	.+120    	; 0x213a <__ultoa_invert+0x9c>
    20c2:	67 0f       	add	r22, r23
    20c4:	78 1f       	adc	r23, r24
    20c6:	89 1f       	adc	r24, r25
    20c8:	9a 1f       	adc	r25, r26
    20ca:	a1 1d       	adc	r26, r1
    20cc:	68 0f       	add	r22, r24
    20ce:	79 1f       	adc	r23, r25
    20d0:	8a 1f       	adc	r24, r26
    20d2:	91 1d       	adc	r25, r1
    20d4:	a1 1d       	adc	r26, r1
    20d6:	6a 0f       	add	r22, r26
    20d8:	71 1d       	adc	r23, r1
    20da:	81 1d       	adc	r24, r1
    20dc:	91 1d       	adc	r25, r1
    20de:	a1 1d       	adc	r26, r1
    20e0:	20 d0       	rcall	.+64     	; 0x2122 <__ultoa_invert+0x84>
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <__ultoa_invert+0x48>
    20e4:	68 94       	set
    20e6:	3f 91       	pop	r19
    20e8:	2a e0       	ldi	r18, 0x0A	; 10
    20ea:	26 9f       	mul	r18, r22
    20ec:	11 24       	eor	r1, r1
    20ee:	30 19       	sub	r19, r0
    20f0:	30 5d       	subi	r19, 0xD0	; 208
    20f2:	31 93       	st	Z+, r19
    20f4:	de f6       	brtc	.-74     	; 0x20ac <__ultoa_invert+0xe>
    20f6:	cf 01       	movw	r24, r30
    20f8:	08 95       	ret
    20fa:	46 2f       	mov	r20, r22
    20fc:	47 70       	andi	r20, 0x07	; 7
    20fe:	40 5d       	subi	r20, 0xD0	; 208
    2100:	41 93       	st	Z+, r20
    2102:	b3 e0       	ldi	r27, 0x03	; 3
    2104:	0f d0       	rcall	.+30     	; 0x2124 <__ultoa_invert+0x86>
    2106:	c9 f7       	brne	.-14     	; 0x20fa <__ultoa_invert+0x5c>
    2108:	f6 cf       	rjmp	.-20     	; 0x20f6 <__ultoa_invert+0x58>
    210a:	46 2f       	mov	r20, r22
    210c:	4f 70       	andi	r20, 0x0F	; 15
    210e:	40 5d       	subi	r20, 0xD0	; 208
    2110:	4a 33       	cpi	r20, 0x3A	; 58
    2112:	18 f0       	brcs	.+6      	; 0x211a <__ultoa_invert+0x7c>
    2114:	49 5d       	subi	r20, 0xD9	; 217
    2116:	31 fd       	sbrc	r19, 1
    2118:	40 52       	subi	r20, 0x20	; 32
    211a:	41 93       	st	Z+, r20
    211c:	02 d0       	rcall	.+4      	; 0x2122 <__ultoa_invert+0x84>
    211e:	a9 f7       	brne	.-22     	; 0x210a <__ultoa_invert+0x6c>
    2120:	ea cf       	rjmp	.-44     	; 0x20f6 <__ultoa_invert+0x58>
    2122:	b4 e0       	ldi	r27, 0x04	; 4
    2124:	a6 95       	lsr	r26
    2126:	97 95       	ror	r25
    2128:	87 95       	ror	r24
    212a:	77 95       	ror	r23
    212c:	67 95       	ror	r22
    212e:	ba 95       	dec	r27
    2130:	c9 f7       	brne	.-14     	; 0x2124 <__ultoa_invert+0x86>
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	61 05       	cpc	r22, r1
    2136:	71 05       	cpc	r23, r1
    2138:	08 95       	ret
    213a:	9b 01       	movw	r18, r22
    213c:	ac 01       	movw	r20, r24
    213e:	0a 2e       	mov	r0, r26
    2140:	06 94       	lsr	r0
    2142:	57 95       	ror	r21
    2144:	47 95       	ror	r20
    2146:	37 95       	ror	r19
    2148:	27 95       	ror	r18
    214a:	ba 95       	dec	r27
    214c:	c9 f7       	brne	.-14     	; 0x2140 <__ultoa_invert+0xa2>
    214e:	62 0f       	add	r22, r18
    2150:	73 1f       	adc	r23, r19
    2152:	84 1f       	adc	r24, r20
    2154:	95 1f       	adc	r25, r21
    2156:	a0 1d       	adc	r26, r0
    2158:	08 95       	ret

0000215a <_exit>:
    215a:	f8 94       	cli

0000215c <__stop_program>:
    215c:	ff cf       	rjmp	.-2      	; 0x215c <__stop_program>
