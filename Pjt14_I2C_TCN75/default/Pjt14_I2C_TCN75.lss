
Pjt14_I2C_TCN75.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039c  00800200  00002a9a  00002b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000144  0080059c  0080059c  00002eca  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000004e8  00000000  00000000  000043e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051db  00000000  00000000  000048d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027f3  00000000  00000000  00009aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025cd  00000000  00000000  0000c29e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d38  00000000  00000000  0000e86c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c53  00000000  00000000  0000f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003029  00000000  00000000  000101f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00013220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 61 07 	jmp	0xec2	; 0xec2 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_24>
      64:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	15 e0       	ldi	r17, 0x05	; 5
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e9       	ldi	r30, 0x9A	; 154
      fc:	fa e2       	ldi	r31, 0x2A	; 42
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 39       	cpi	r26, 0x9C	; 156
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	ac e9       	ldi	r26, 0x9C	; 156
     114:	b5 e0       	ldi	r27, 0x05	; 5
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 3e       	cpi	r26, 0xE0	; 224
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <main>
     124:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include "timer.h"
#include "adc.h"

void adc_init()
{
	cbi(DDRF, PF0);
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <__vector_29>:

ISR(ADC_vect)
{
     156:	1f 92       	push	r1
     158:	0f 92       	push	r0
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	0f 92       	push	r0
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	2f 93       	push	r18
     16a:	3f 93       	push	r19
     16c:	4f 93       	push	r20
     16e:	5f 93       	push	r21
     170:	6f 93       	push	r22
     172:	7f 93       	push	r23
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
     17c:	ef 93       	push	r30
     17e:	ff 93       	push	r31
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
     188:	28 97       	sbiw	r28, 0x08	; 8
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	cd bf       	out	0x3d, r28	; 61
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     18e:	80 91 78 00 	lds	r24, 0x0078
     192:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     196:	ea e7       	ldi	r30, 0x7A	; 122
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	20 81       	ld	r18, Z
     19c:	2f 77       	andi	r18, 0x7F	; 127
     19e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <__vector_29+0x4c>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <__vector_29+0x4e>
     1a4:	ed b7       	in	r30, 0x3d	; 61
     1a6:	fe b7       	in	r31, 0x3e	; 62
     1a8:	31 96       	adiw	r30, 0x01	; 1
     1aa:	8e 01       	movw	r16, r28
     1ac:	0f 5f       	subi	r16, 0xFF	; 255
     1ae:	1f 4f       	sbci	r17, 0xFF	; 255
     1b0:	ad b7       	in	r26, 0x3d	; 61
     1b2:	be b7       	in	r27, 0x3e	; 62
     1b4:	12 96       	adiw	r26, 0x02	; 2
     1b6:	1c 93       	st	X, r17
     1b8:	0e 93       	st	-X, r16
     1ba:	11 97       	sbiw	r26, 0x01	; 1
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	32 e0       	ldi	r19, 0x02	; 2
     1c0:	33 83       	std	Z+3, r19	; 0x03
     1c2:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     1c4:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     1c6:	95 83       	std	Z+5, r25	; 0x05
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	0e 94 35 12 	call	0x246a	; 0x246a <sprintf>

	task_tc1047(arg);
     1ce:	8d b7       	in	r24, 0x3d	; 61
     1d0:	9e b7       	in	r25, 0x3e	; 62
     1d2:	06 96       	adiw	r24, 0x06	; 6
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	9e bf       	out	0x3e, r25	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	8d bf       	out	0x3d, r24	; 61
     1de:	c8 01       	movw	r24, r16
     1e0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <task_tc1047>
}
     1e4:	28 96       	adiw	r28, 0x08	; 8
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	ff 91       	pop	r31
     1f0:	ef 91       	pop	r30
     1f2:	bf 91       	pop	r27
     1f4:	af 91       	pop	r26
     1f6:	9f 91       	pop	r25
     1f8:	8f 91       	pop	r24
     1fa:	7f 91       	pop	r23
     1fc:	6f 91       	pop	r22
     1fe:	5f 91       	pop	r21
     200:	4f 91       	pop	r20
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	0f 90       	pop	r0
     20c:	0b be       	out	0x3b, r0	; 59
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 03 10 	call	0x2006	; 0x2006 <malloc>
	return(cp);
}
     220:	08 95       	ret

00000222 <free_node>:

void free_node(struct node *np)
{
	free(np);
     222:	0e 94 99 10 	call	0x2132	; 0x2132 <free>
}
     226:	08 95       	ret

00000228 <insert_node_head>:

void insert_node_head(struct node *np)
{
     228:	fc 01       	movw	r30, r24
	if(!Head) {
     22a:	80 91 9c 05 	lds	r24, 0x059C
     22e:	90 91 9d 05 	lds	r25, 0x059D
     232:	00 97       	sbiw	r24, 0x00	; 0
     234:	39 f4       	brne	.+14     	; 0x244 <insert_node_head+0x1c>
		Head = np;
     236:	f0 93 9d 05 	sts	0x059D, r31
     23a:	e0 93 9c 05 	sts	0x059C, r30
		np->link = NULL;
     23e:	13 82       	std	Z+3, r1	; 0x03
     240:	12 82       	std	Z+2, r1	; 0x02
     242:	08 95       	ret
	} else {
		np->link = Head;
     244:	93 83       	std	Z+3, r25	; 0x03
     246:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     248:	f0 93 9d 05 	sts	0x059D, r31
     24c:	e0 93 9c 05 	sts	0x059C, r30
     250:	08 95       	ret

00000252 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     252:	e0 91 9c 05 	lds	r30, 0x059C
     256:	f0 91 9d 05 	lds	r31, 0x059D
     25a:	30 97       	sbiw	r30, 0x00	; 0
     25c:	31 f4       	brne	.+12     	; 0x26a <insert_node_tail+0x18>
		Head = np;
     25e:	90 93 9d 05 	sts	0x059D, r25
     262:	80 93 9c 05 	sts	0x059C, r24
     266:	08 c0       	rjmp	.+16     	; 0x278 <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     268:	f9 01       	movw	r30, r18
     26a:	22 81       	ldd	r18, Z+2	; 0x02
     26c:	33 81       	ldd	r19, Z+3	; 0x03
     26e:	21 15       	cp	r18, r1
     270:	31 05       	cpc	r19, r1
     272:	d1 f7       	brne	.-12     	; 0x268 <insert_node_tail+0x16>
			;
		cp->link = np;
     274:	93 83       	std	Z+3, r25	; 0x03
     276:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     278:	fc 01       	movw	r30, r24
     27a:	13 82       	std	Z+3, r1	; 0x03
     27c:	12 82       	std	Z+2, r1	; 0x02
}
     27e:	08 95       	ret

00000280 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	
	if(!Head) {
     286:	20 91 9c 05 	lds	r18, 0x059C
     28a:	30 91 9d 05 	lds	r19, 0x059D
     28e:	21 15       	cp	r18, r1
     290:	31 05       	cpc	r19, r1
     292:	31 f0       	breq	.+12     	; 0x2a0 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     294:	40 81       	ld	r20, Z
     296:	51 81       	ldd	r21, Z+1	; 0x01
     298:	d9 01       	movw	r26, r18
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	d0 e0       	ldi	r29, 0x00	; 0
     29e:	0f c0       	rjmp	.+30     	; 0x2be <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	
	if(!Head) {
		Head = np;
     2a0:	90 93 9d 05 	sts	0x059D, r25
     2a4:	80 93 9c 05 	sts	0x059C, r24
		np->link = NULL;
     2a8:	13 82       	std	Z+3, r1	; 0x03
     2aa:	12 82       	std	Z+2, r1	; 0x02
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <insert_node_ascn+0x68>
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     2ae:	12 96       	adiw	r26, 0x02	; 2
     2b0:	8d 91       	ld	r24, X+
     2b2:	9c 91       	ld	r25, X
     2b4:	13 97       	sbiw	r26, 0x03	; 3
     2b6:	ed 01       	movw	r28, r26
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	39 f0       	breq	.+14     	; 0x2ca <insert_node_ascn+0x4a>
     2bc:	dc 01       	movw	r26, r24
     2be:	8d 91       	ld	r24, X+
     2c0:	9c 91       	ld	r25, X
     2c2:	11 97       	sbiw	r26, 0x01	; 1
     2c4:	84 17       	cp	r24, r20
     2c6:	95 07       	cpc	r25, r21
     2c8:	94 f3       	brlt	.-28     	; 0x2ae <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     2ca:	20 97       	sbiw	r28, 0x00	; 0
     2cc:	39 f4       	brne	.+14     	; 0x2dc <insert_node_ascn+0x5c>
			np->link = Head;
     2ce:	33 83       	std	Z+3, r19	; 0x03
     2d0:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     2d2:	f0 93 9d 05 	sts	0x059D, r31
     2d6:	e0 93 9c 05 	sts	0x059C, r30
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	9b 81       	ldd	r25, Y+3	; 0x03
     2e0:	93 83       	std	Z+3, r25	; 0x03
     2e2:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     2e4:	fb 83       	std	Y+3, r31	; 0x03
     2e6:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <tour_list>:

void tour_list()
{
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     2f6:	8a e0       	ldi	r24, 0x0A	; 10
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 00 12 	call	0x2400	; 0x2400 <putchar>
	for(cp = Head; cp->link != NULL; cp = cp->link)
     2fe:	c0 91 9c 05 	lds	r28, 0x059C
     302:	d0 91 9d 05 	lds	r29, 0x059D
		printf("-->%c ", cp->data);
     306:	03 e0       	ldi	r16, 0x03	; 3
     308:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     30a:	13 c0       	rjmp	.+38     	; 0x332 <tour_list+0x44>
		printf("-->%c ", cp->data);
     30c:	00 d0       	rcall	.+0      	; 0x30e <tour_list+0x20>
     30e:	0f 92       	push	r0
     310:	ed b7       	in	r30, 0x3d	; 61
     312:	fe b7       	in	r31, 0x3e	; 62
     314:	12 83       	std	Z+2, r17	; 0x02
     316:	01 83       	std	Z+1, r16	; 0x01
     318:	88 81       	ld	r24, Y
     31a:	99 81       	ldd	r25, Y+1	; 0x01
     31c:	94 83       	std	Z+4, r25	; 0x04
     31e:	83 83       	std	Z+3, r24	; 0x03
     320:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     324:	0a 80       	ldd	r0, Y+2	; 0x02
     326:	db 81       	ldd	r29, Y+3	; 0x03
     328:	c0 2d       	mov	r28, r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	9b 81       	ldd	r25, Y+3	; 0x03
     336:	00 97       	sbiw	r24, 0x00	; 0
     338:	49 f7       	brne	.-46     	; 0x30c <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     33a:	8a e0       	ldi	r24, 0x0A	; 10
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 00 12 	call	0x2400	; 0x2400 <putchar>
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <free_list>:

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     34c:	09 c0       	rjmp	.+18     	; 0x360 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     34e:	fc 01       	movw	r30, r24
     350:	22 81       	ldd	r18, Z+2	; 0x02
     352:	33 81       	ldd	r19, Z+3	; 0x03
     354:	30 93 9d 05 	sts	0x059D, r19
     358:	20 93 9c 05 	sts	0x059C, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     35c:	0e 94 99 10 	call	0x2132	; 0x2132 <free>

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     360:	80 91 9c 05 	lds	r24, 0x059C
     364:	90 91 9d 05 	lds	r25, 0x059D
     368:	00 97       	sbiw	r24, 0x00	; 0
     36a:	89 f7       	brne	.-30     	; 0x34e <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     36c:	08 95       	ret

0000036e <app_list>:

void app_list(char *ap)
{
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	28 97       	sbiw	r28, 0x08	; 8
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	19 f0       	breq	.+6      	; 0x392 <app_list+0x24>
     38c:	fc 01       	movw	r30, r24
     38e:	10 81       	ld	r17, Z
     390:	01 c0       	rjmp	.+2      	; 0x394 <app_list+0x26>
	}
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     392:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	e8 2e       	mov	r14, r24
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	f8 2e       	mov	r15, r24
     39c:	0f 92       	push	r0
     39e:	0f 92       	push	r0
     3a0:	ed b7       	in	r30, 0x3d	; 61
     3a2:	fe b7       	in	r31, 0x3e	; 62
     3a4:	f2 82       	std	Z+2, r15	; 0x02
     3a6:	e1 82       	std	Z+1, r14	; 0x01
     3a8:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
		if(fgets(buf, 8, stdin) == NULL) {
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	40 91 da 06 	lds	r20, 0x06DA
     3b4:	50 91 db 06 	lds	r21, 0x06DB
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	68 e0       	ldi	r22, 0x08	; 8
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 94 11 	call	0x2328	; 0x2328 <fgets>
     3c4:	00 97       	sbiw	r24, 0x00	; 0
     3c6:	a1 f0       	breq	.+40     	; 0x3f0 <app_list+0x82>
			break;
		}
		np = get_node();
     3c8:	0e 94 0c 01 	call	0x218	; 0x218 <get_node>
		np->data = buf[0];
     3cc:	29 81       	ldd	r18, Y+1	; 0x01
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
     3d2:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     3d4:	18 36       	cpi	r17, 0x68	; 104
     3d6:	19 f0       	breq	.+6      	; 0x3de <app_list+0x70>
     3d8:	14 37       	cpi	r17, 0x74	; 116
     3da:	39 f4       	brne	.+14     	; 0x3ea <app_list+0x7c>
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <app_list+0x76>
			case	'h' : insert_node_head(np); break;
     3de:	0e 94 14 01 	call	0x228	; 0x228 <insert_node_head>
     3e2:	dc cf       	rjmp	.-72     	; 0x39c <app_list+0x2e>
			case	't' : insert_node_tail(np); break;
     3e4:	0e 94 29 01 	call	0x252	; 0x252 <insert_node_tail>
     3e8:	d9 cf       	rjmp	.-78     	; 0x39c <app_list+0x2e>
			default     : insert_node_ascn(np);
     3ea:	0e 94 40 01 	call	0x280	; 0x280 <insert_node_ascn>
     3ee:	d6 cf       	rjmp	.-84     	; 0x39c <app_list+0x2e>
		}
	}
	tour_list();
     3f0:	0e 94 77 01 	call	0x2ee	; 0x2ee <tour_list>
	free_list();
     3f4:	0e 94 a6 01 	call	0x34c	; 0x34c <free_list>
}
     3f8:	28 96       	adiw	r28, 0x08	; 8
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	08 95       	ret

00000410 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	fc 01       	movw	r30, r24
	int i; 
	for (i = 2; i <= n/2; i++)
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     41e:	eb 01       	movw	r28, r22
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	08 c0       	rjmp	.+16     	; 0x436 <is_prime+0x26>
		if((n % i) == 0)
     426:	cf 01       	movw	r24, r30
     428:	b9 01       	movw	r22, r18
     42a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     42e:	00 97       	sbiw	r24, 0x00	; 0
     430:	41 f0       	breq	.+16     	; 0x442 <is_prime+0x32>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
     432:	2f 5f       	subi	r18, 0xFF	; 255
     434:	3f 4f       	sbci	r19, 0xFF	; 255
     436:	c2 17       	cp	r28, r18
     438:	d3 07       	cpc	r29, r19
     43a:	ac f7       	brge	.-22     	; 0x426 <is_prime+0x16>
		if((n % i) == 0)
			return (0);
	return (1);
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <is_prime+0x36>

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return (0);
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int  fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     44c:	10 92 ee 05 	sts	0x05EE, r1
     450:	10 92 ed 05 	sts	0x05ED, r1
     454:	10 92 ec 05 	sts	0x05EC, r1
     458:	10 92 eb 05 	sts	0x05EB, r1
     45c:	10 92 f0 05 	sts	0x05F0, r1
     460:	10 92 ef 05 	sts	0x05EF, r1
     464:	10 92 aa 05 	sts	0x05AA, r1
     468:	10 92 a9 05 	sts	0x05A9, r1
}
     46c:	08 95       	ret

0000046e <qi_insert>:

int qi_insert(char ch)
{
     46e:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     470:	20 91 ef 05 	lds	r18, 0x05EF
     474:	30 91 f0 05 	lds	r19, 0x05F0
     478:	2f 5f       	subi	r18, 0xFF	; 255
     47a:	3f 4f       	sbci	r19, 0xFF	; 255
     47c:	c9 01       	movw	r24, r18
     47e:	60 e4       	ldi	r22, 0x40	; 64
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     486:	9c 01       	movw	r18, r24
     488:	80 91 a9 05 	lds	r24, 0x05A9
     48c:	90 91 aa 05 	lds	r25, 0x05AA
     490:	28 17       	cp	r18, r24
     492:	39 07       	cpc	r19, r25
     494:	59 f0       	breq	.+22     	; 0x4ac <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     496:	30 93 f0 05 	sts	0x05F0, r19
     49a:	20 93 ef 05 	sts	0x05EF, r18
	qi[ri] = ch;
     49e:	2f 50       	subi	r18, 0x0F	; 15
     4a0:	3a 4f       	sbci	r19, 0xFA	; 250
     4a2:	f9 01       	movw	r30, r18
     4a4:	40 83       	st	Z, r20
	return(1);
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     4b0:	08 95       	ret

000004b2 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     4b2:	80 91 a9 05 	lds	r24, 0x05A9
     4b6:	90 91 aa 05 	lds	r25, 0x05AA
     4ba:	20 91 ef 05 	lds	r18, 0x05EF
     4be:	30 91 f0 05 	lds	r19, 0x05F0
     4c2:	28 17       	cp	r18, r24
     4c4:	39 07       	cpc	r19, r25
     4c6:	79 f0       	breq	.+30     	; 0x4e6 <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	60 e4       	ldi	r22, 0x40	; 64
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     4d2:	90 93 aa 05 	sts	0x05AA, r25
     4d6:	80 93 a9 05 	sts	0x05A9, r24
	return(qi[fi]);
     4da:	8f 50       	subi	r24, 0x0F	; 15
     4dc:	9a 4f       	sbci	r25, 0xFA	; 250
     4de:	fc 01       	movw	r30, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return(0);
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     4ea:	08 95       	ret

000004ec <qo_insert>:

int qo_insert(char ch)
{
     4ec:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     4ee:	20 91 ed 05 	lds	r18, 0x05ED
     4f2:	30 91 ee 05 	lds	r19, 0x05EE
     4f6:	2f 5f       	subi	r18, 0xFF	; 255
     4f8:	3f 4f       	sbci	r19, 0xFF	; 255
     4fa:	c9 01       	movw	r24, r18
     4fc:	60 e4       	ldi	r22, 0x40	; 64
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     504:	9c 01       	movw	r18, r24
     506:	80 91 eb 05 	lds	r24, 0x05EB
     50a:	90 91 ec 05 	lds	r25, 0x05EC
     50e:	28 17       	cp	r18, r24
     510:	39 07       	cpc	r19, r25
     512:	59 f0       	breq	.+22     	; 0x52a <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     514:	30 93 ee 05 	sts	0x05EE, r19
     518:	20 93 ed 05 	sts	0x05ED, r18
	qo[ro] = ch;
     51c:	25 55       	subi	r18, 0x55	; 85
     51e:	3a 4f       	sbci	r19, 0xFA	; 250
     520:	f9 01       	movw	r30, r18
     522:	40 83       	st	Z, r20
	return(1);
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     52e:	08 95       	ret

00000530 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     530:	80 91 eb 05 	lds	r24, 0x05EB
     534:	90 91 ec 05 	lds	r25, 0x05EC
     538:	20 91 ed 05 	lds	r18, 0x05ED
     53c:	30 91 ee 05 	lds	r19, 0x05EE
     540:	28 17       	cp	r18, r24
     542:	39 07       	cpc	r19, r25
     544:	79 f0       	breq	.+30     	; 0x564 <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	60 e4       	ldi	r22, 0x40	; 64
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     550:	90 93 ec 05 	sts	0x05EC, r25
     554:	80 93 eb 05 	sts	0x05EB, r24
	return(qo[fo]);
     558:	85 55       	subi	r24, 0x55	; 85
     55a:	9a 4f       	sbci	r25, 0xFA	; 250
     55c:	fc 01       	movw	r30, r24
     55e:	80 81       	ld	r24, Z
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return(0);
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     568:	08 95       	ret

0000056a <qi_peek>:

int qi_peek()
{
	if (fi == ri)
     56a:	80 91 a9 05 	lds	r24, 0x05A9
     56e:	90 91 aa 05 	lds	r25, 0x05AA
     572:	20 91 ef 05 	lds	r18, 0x05EF
     576:	30 91 f0 05 	lds	r19, 0x05F0
     57a:	82 17       	cp	r24, r18
     57c:	93 07       	cpc	r25, r19
     57e:	59 f0       	breq	.+22     	; 0x596 <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	60 e4       	ldi	r22, 0x40	; 64
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     58a:	8f 50       	subi	r24, 0x0F	; 15
     58c:	9a 4f       	sbci	r25, 0xFA	; 250
     58e:	fc 01       	movw	r30, r24
     590:	80 81       	ld	r24, Z
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	08 95       	ret
}

int qi_peek()
{
	if (fi == ri)
		return 0;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     59a:	08 95       	ret

0000059c <spi_init>:



void spi_init()
{
	sbi(DDRB, 0); // sbi(DDRB, nSS,nCS); // output
     59c:	20 9a       	sbi	0x04, 0	; 4
	sbi(DDRB, 1); // sbi(DDRB, SCK); // output
     59e:	21 9a       	sbi	0x04, 1	; 4
	sbi(DDRB, 2); // sbi(DDRB, MOSI); // output
     5a0:	22 9a       	sbi	0x04, 2	; 4
	cbi(DDRB, 3); // cbi(DDRB, MISO); // input
     5a2:	23 98       	cbi	0x04, 3	; 4
	sbi(SPSR, SPI2X); // double speed
     5a4:	8d b5       	in	r24, 0x2d	; 45
     5a6:	81 60       	ori	r24, 0x01	; 1
     5a8:	8d bd       	out	0x2d, r24	; 45
	SPCR = ( (1 << MSTR) | (1 << SPE) | (1 << SPIE) ); // MASTER, MSB first, Fosc/4
     5aa:	80 ed       	ldi	r24, 0xD0	; 208
     5ac:	8c bd       	out	0x2c, r24	; 44
}
     5ae:	08 95       	ret

000005b0 <spi_select>:

void spi_select() { cbi(PORTB, 0); } // cbi(PORTB, nSS)
     5b0:	28 98       	cbi	0x05, 0	; 5
     5b2:	08 95       	ret

000005b4 <spi_release>:
void spi_release() { sbi(PORTB, 0); } // sbi(PORTB, nSS)
     5b4:	28 9a       	sbi	0x05, 0	; 5
     5b6:	08 95       	ret

000005b8 <spi_write>:
void spi_write(uint8_t data) { SPDR = data; }
     5b8:	8e bd       	out	0x2e, r24	; 46
     5ba:	08 95       	ret

000005bc <__vector_24>:

ISR(SPI_STC_vect)
{
     5bc:	1f 92       	push	r1
     5be:	0f 92       	push	r0
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	0f 92       	push	r0
     5c4:	0b b6       	in	r0, 0x3b	; 59
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	2a 97       	sbiw	r28, 0x0a	; 10
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	cd bf       	out	0x3d, r28	; 61
	struct task task;

	uint8_t data;
	data = SPDR;
     5f0:	2e b5       	in	r18, 0x2e	; 46

	task.fun = task_tc77;
     5f2:	85 e0       	ldi	r24, 0x05	; 5
     5f4:	94 e0       	ldi	r25, 0x04	; 4
     5f6:	9a 83       	std	Y+2, r25	; 0x02
     5f8:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg, "%d", data);
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <__vector_24+0x40>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <__vector_24+0x42>
     5fe:	ed b7       	in	r30, 0x3d	; 61
     600:	fe b7       	in	r31, 0x3e	; 62
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	ce 01       	movw	r24, r28
     606:	03 96       	adiw	r24, 0x03	; 3
     608:	ad b7       	in	r26, 0x3d	; 61
     60a:	be b7       	in	r27, 0x3e	; 62
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	9c 93       	st	X, r25
     610:	8e 93       	st	-X, r24
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	80 e1       	ldi	r24, 0x10	; 16
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	93 83       	std	Z+3, r25	; 0x03
     61a:	82 83       	std	Z+2, r24	; 0x02
     61c:	24 83       	std	Z+4, r18	; 0x04
     61e:	15 82       	std	Z+5, r1	; 0x05
     620:	0e 94 35 12 	call	0x246a	; 0x246a <sprintf>
	task_insert(&task);
     624:	8d b7       	in	r24, 0x3d	; 61
     626:	9e b7       	in	r25, 0x3e	; 62
     628:	06 96       	adiw	r24, 0x06	; 6
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	9e bf       	out	0x3e, r25	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	8d bf       	out	0x3d, r24	; 61
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <task_insert>
}
     63c:	2a 96       	adiw	r28, 0x0a	; 10
     63e:	de bf       	out	0x3e, r29	; 62
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	0f 90       	pop	r0
     660:	0b be       	out	0x3b, r0	; 59
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <task_sum>:

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	19 f0       	breq	.+6      	; 0x676 <task_sum+0xa>
     670:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     674:	02 c0       	rjmp	.+4      	; 0x67a <task_sum+0xe>
	printf("$ ");
}

void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;
     676:	84 e6       	ldi	r24, 0x64	; 100
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	04 c0       	rjmp	.+8      	; 0x68c <task_sum+0x20>
		sum += n; 
     684:	42 0f       	add	r20, r18
     686:	53 1f       	adc	r21, r19
void task_sum(char *ap)
{
	int	t = 100, n, sum = 0;

	if(ap) t = atoi(ap);
	for(n = 1; n <= t; n++) {
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	82 17       	cp	r24, r18
     68e:	93 07       	cpc	r25, r19
     690:	cc f7       	brge	.-14     	; 0x684 <task_sum+0x18>
		sum += n; 
	}
	printf("sum = %d\n", sum);
     692:	00 d0       	rcall	.+0      	; 0x694 <task_sum+0x28>
     694:	0f 92       	push	r0
     696:	83 e1       	ldi	r24, 0x13	; 19
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	ed b7       	in	r30, 0x3d	; 61
     69c:	fe b7       	in	r31, 0x3e	; 62
     69e:	92 83       	std	Z+2, r25	; 0x02
     6a0:	81 83       	std	Z+1, r24	; 0x01
     6a2:	54 83       	std	Z+4, r21	; 0x04
     6a4:	43 83       	std	Z+3, r20	; 0x03
     6a6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
	printf("$ ");
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	8d e1       	ldi	r24, 0x1D	; 29
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	ed b7       	in	r30, 0x3d	; 61
     6b4:	fe b7       	in	r31, 0x3e	; 62
     6b6:	92 83       	std	Z+2, r25	; 0x02
     6b8:	81 83       	std	Z+1, r24	; 0x01
     6ba:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
}
     6c2:	08 95       	ret

000006c4 <task_prime>:
		}
	}
}

void task_prime(char *ap)
{
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	21 f0       	breq	.+8      	; 0x6e0 <task_prime+0x1c>
     6d8:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     6dc:	7c 01       	movw	r14, r24
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <task_prime+0x24>
	}
}

void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;
     6e0:	90 ed       	ldi	r25, 0xD0	; 208
     6e2:	e9 2e       	mov	r14, r25
     6e4:	97 e0       	ldi	r25, 0x07	; 7
     6e6:	f9 2e       	mov	r15, r25
     6e8:	00 e0       	ldi	r16, 0x00	; 0
     6ea:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     6ec:	c2 e0       	ldi	r28, 0x02	; 2
     6ee:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
     6f0:	80 e2       	ldi	r24, 0x20	; 32
     6f2:	c8 2e       	mov	r12, r24
     6f4:	82 e0       	ldi	r24, 0x02	; 2
     6f6:	d8 2e       	mov	r13, r24
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     6f8:	16 c0       	rjmp	.+44     	; 0x726 <task_prime+0x62>
		if (is_prime(n)) {
     6fa:	ce 01       	movw	r24, r28
     6fc:	0e 94 08 02 	call	0x410	; 0x410 <is_prime>
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	81 f0       	breq	.+32     	; 0x724 <task_prime+0x60>
			count++;
     704:	0f 5f       	subi	r16, 0xFF	; 255
     706:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n", n);
     708:	00 d0       	rcall	.+0      	; 0x70a <task_prime+0x46>
     70a:	0f 92       	push	r0
     70c:	ed b7       	in	r30, 0x3d	; 61
     70e:	fe b7       	in	r31, 0x3e	; 62
     710:	d2 82       	std	Z+2, r13	; 0x02
     712:	c1 82       	std	Z+1, r12	; 0x01
     714:	d4 83       	std	Z+4, r29	; 0x04
     716:	c3 83       	std	Z+3, r28	; 0x03
     718:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     724:	21 96       	adiw	r28, 0x01	; 1
     726:	ec 16       	cp	r14, r28
     728:	fd 06       	cpc	r15, r29
     72a:	3c f7       	brge	.-50     	; 0x6fa <task_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
		}
	}
	printf("count = %d\n", count);
     72c:	00 d0       	rcall	.+0      	; 0x72e <task_prime+0x6a>
     72e:	0f 92       	push	r0
     730:	8a e3       	ldi	r24, 0x3A	; 58
     732:	92 e0       	ldi	r25, 0x02	; 2
     734:	ed b7       	in	r30, 0x3d	; 61
     736:	fe b7       	in	r31, 0x3e	; 62
     738:	92 83       	std	Z+2, r25	; 0x02
     73a:	81 83       	std	Z+1, r24	; 0x01
     73c:	14 83       	std	Z+4, r17	; 0x04
     73e:	03 83       	std	Z+3, r16	; 0x03
     740:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
	printf("$ ");
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	8d e1       	ldi	r24, 0x1D	; 29
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	92 83       	std	Z+2, r25	; 0x02
     752:	81 83       	std	Z+1, r24	; 0x01
     754:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <task_tcn75_i2c>:
		}
	}
}

void task_tcn75_i2c(void *arg)
{
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
	uint16_t value;

	i2c_tcn75_trans_start();
     772:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_tcn75_trans_start>
	if (i2c_tcn75_write_one_byte(0x90) != 0)
     776:	80 e9       	ldi	r24, 0x90	; 144
     778:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <i2c_tcn75_write_one_byte>
     77c:	88 23       	and	r24, r24
     77e:	29 f0       	breq	.+10     	; 0x78a <task_tcn75_i2c+0x1c>
	{ // address + write_operation
		i2c_tcn75_trans_stop(); printf("task_tcn75_i2c() : SLA+W write fail...\n");
     780:	0e 94 c5 08 	call	0x118a	; 0x118a <i2c_tcn75_trans_stop>
     784:	86 e4       	ldi	r24, 0x46	; 70
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	15 c0       	rjmp	.+42     	; 0x7b4 <task_tcn75_i2c+0x46>
		return;
	}

	if (i2c_tcn75_write_one_byte(0x00) != 0)
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <i2c_tcn75_write_one_byte>
     790:	88 23       	and	r24, r24
     792:	29 f0       	breq	.+10     	; 0x79e <task_tcn75_i2c+0x30>
	{ // pointer(TEMP)
		i2c_tcn75_trans_stop(); printf("task_tcn75_i2c() : pointer write fail...\n");
     794:	0e 94 c5 08 	call	0x118a	; 0x118a <i2c_tcn75_trans_stop>
     798:	8d e6       	ldi	r24, 0x6D	; 109
     79a:	92 e0       	ldi	r25, 0x02	; 2
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <task_tcn75_i2c+0x46>
		return;
	}

	i2c_tcn75_trans_start(); // Repeat Start
     79e:	0e 94 b8 08 	call	0x1170	; 0x1170 <i2c_tcn75_trans_start>
	if (i2c_tcn75_write_one_byte(0x91) != 0)
     7a2:	81 e9       	ldi	r24, 0x91	; 145
     7a4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <i2c_tcn75_write_one_byte>
     7a8:	88 23       	and	r24, r24
     7aa:	39 f0       	breq	.+14     	; 0x7ba <task_tcn75_i2c+0x4c>
	{ // address + read_operation
		i2c_tcn75_trans_stop(); printf("task_tcn75_i2c() : SLA+R write fail...\n");
     7ac:	0e 94 c5 08 	call	0x118a	; 0x118a <i2c_tcn75_trans_stop>
     7b0:	86 e9       	ldi	r24, 0x96	; 150
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	0e 94 07 12 	call	0x240e	; 0x240e <puts>
		return;
     7b8:	25 c0       	rjmp	.+74     	; 0x804 <task_tcn75_i2c+0x96>
	} // read TEMP register

	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <i2c_tcn75_read_one_byte>
     7c0:	c8 2f       	mov	r28, r24
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <i2c_tcn75_read_one_byte>
     7c8:	3c 2f       	mov	r19, r28
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	c8 2f       	mov	r28, r24
     7ce:	d0 e0       	ldi	r29, 0x00	; 0
     7d0:	c2 2b       	or	r28, r18
     7d2:	d3 2b       	or	r29, r19
     7d4:	cc 0f       	add	r28, r28
     7d6:	cd 2f       	mov	r28, r29
     7d8:	cc 1f       	adc	r28, r28
     7da:	dd 0b       	sbc	r29, r29

	i2c_tcn75_trans_stop();
     7dc:	0e 94 c5 08 	call	0x118a	; 0x118a <i2c_tcn75_trans_stop>

	value = value >> 1; // value = value * 0.5
	printf("task_tcn75_i2c() : current_temperature -> %d degree.\n$ ", value);
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <task_tcn75_i2c+0x74>
     7e2:	0f 92       	push	r0
     7e4:	8d eb       	ldi	r24, 0xBD	; 189
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	ed b7       	in	r30, 0x3d	; 61
     7ea:	fe b7       	in	r31, 0x3e	; 62
     7ec:	92 83       	std	Z+2, r25	; 0x02
     7ee:	81 83       	std	Z+1, r24	; 0x01

	value = ((i2c_tcn75_read_one_byte(0) << 8) | i2c_tcn75_read_one_byte(1)) >> 7;

	i2c_tcn75_trans_stop();

	value = value >> 1; // value = value * 0.5
     7f0:	d6 95       	lsr	r29
     7f2:	c7 95       	ror	r28
	printf("task_tcn75_i2c() : current_temperature -> %d degree.\n$ ", value);
     7f4:	d4 83       	std	Z+4, r29	; 0x04
     7f6:	c3 83       	std	Z+3, r28	; 0x03
     7f8:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <task_tc77>:
		in_adc = 0;
	}
}

void task_tc77(void *arg)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
	static uint8_t state;
	static uint16_t value;

	if (!strcmp(arg, ""))
     80e:	fc 01       	movw	r30, r24
     810:	20 81       	ld	r18, Z
     812:	22 23       	and	r18, r18
     814:	31 f4       	brne	.+12     	; 0x822 <task_tc77+0x18>
	{
		state = TC77_WAIT_HI;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 a2 05 	sts	0x05A2, r24
		spi_select();
     81c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <spi_select>
     820:	11 c0       	rjmp	.+34     	; 0x844 <task_tc77+0x3a>
		spi_write(0x00);
	}
	else
	{
		switch(state)
     822:	20 91 a2 05 	lds	r18, 0x05A2
     826:	21 30       	cpi	r18, 0x01	; 1
     828:	21 f0       	breq	.+8      	; 0x832 <task_tc77+0x28>
     82a:	22 30       	cpi	r18, 0x02	; 2
     82c:	09 f0       	breq	.+2      	; 0x830 <task_tc77+0x26>
     82e:	45 c0       	rjmp	.+138    	; 0x8ba <task_tc77+0xb0>
     830:	0d c0       	rjmp	.+26     	; 0x84c <task_tc77+0x42>
		{
			case TC77_WAIT_HI :
				value = atoi(arg) << 8; state = TC77_WAIT_LO; spi_write(0x00);
     832:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     836:	10 92 a3 05 	sts	0x05A3, r1
     83a:	80 93 a4 05 	sts	0x05A4, r24
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	80 93 a2 05 	sts	0x05A2, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <spi_write>
				break;
     84a:	45 c0       	rjmp	.+138    	; 0x8d6 <task_tc77+0xcc>
			case TC77_WAIT_LO:
				value |= atoi(arg); value = (value >> 3) * 0.0625;
     84c:	c0 91 a3 05 	lds	r28, 0x05A3
     850:	d0 91 a4 05 	lds	r29, 0x05A4
     854:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     858:	c8 2b       	or	r28, r24
     85a:	d9 2b       	or	r29, r25
     85c:	63 e0       	ldi	r22, 0x03	; 3
     85e:	d6 95       	lsr	r29
     860:	c7 95       	ror	r28
     862:	6a 95       	dec	r22
     864:	e1 f7       	brne	.-8      	; 0x85e <task_tc77+0x54>
     866:	be 01       	movw	r22, r28
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__floatunsisf>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e8       	ldi	r20, 0x80	; 128
     876:	5d e3       	ldi	r21, 0x3D	; 61
     878:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     87c:	0e 94 20 09 	call	0x1240	; 0x1240 <__fixunssfsi>
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	90 93 a4 05 	sts	0x05A4, r25
     888:	80 93 a3 05 	sts	0x05A3, r24
				spi_release();
     88c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <spi_release>
				printf("task_tc77() : current_temperature -> %d degree.\n$ ", value);
     890:	00 d0       	rcall	.+0      	; 0x892 <task_tc77+0x88>
     892:	0f 92       	push	r0
     894:	85 ef       	ldi	r24, 0xF5	; 245
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	ed b7       	in	r30, 0x3d	; 61
     89a:	fe b7       	in	r31, 0x3e	; 62
     89c:	92 83       	std	Z+2, r25	; 0x02
     89e:	81 83       	std	Z+1, r24	; 0x01
     8a0:	80 91 a3 05 	lds	r24, 0x05A3
     8a4:	90 91 a4 05 	lds	r25, 0x05A4
     8a8:	94 83       	std	Z+4, r25	; 0x04
     8aa:	83 83       	std	Z+3, r24	; 0x03
     8ac:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0e c0       	rjmp	.+28     	; 0x8d6 <task_tc77+0xcc>
			break;
			default:
				spi_release();
     8ba:	0e 94 da 02 	call	0x5b4	; 0x5b4 <spi_release>
				printf("task_tc77() : unexpecetd state in task_tc77...\n$ ");
     8be:	0f 92       	push	r0
     8c0:	0f 92       	push	r0
     8c2:	88 e2       	ldi	r24, 0x28	; 40
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	ed b7       	in	r30, 0x3d	; 61
     8c8:	fe b7       	in	r31, 0x3e	; 62
     8ca:	92 83       	std	Z+2, r25	; 0x02
     8cc:	81 83       	std	Z+1, r24	; 0x01
     8ce:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
		}
	}
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <task_tc1047>:

void task_tc1047(char *arg)
{
	static int	value;
	static int	volatile in_adc = 0;
	if (!strcmp(arg, "")) {
     8dc:	fc 01       	movw	r30, r24
     8de:	20 81       	ld	r18, Z
     8e0:	22 23       	and	r18, r18
     8e2:	19 f5       	brne	.+70     	; 0x92a <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     8e4:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	90 93 9f 05 	sts	0x059F, r25
     8f0:	80 93 9e 05 	sts	0x059E, r24
     8f4:	80 91 9e 05 	lds	r24, 0x059E
     8f8:	90 91 9f 05 	lds	r25, 0x059F
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	d1 f7       	brne	.-12     	; 0x8f4 <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     900:	00 d0       	rcall	.+0      	; 0x902 <task_tc1047+0x26>
     902:	0f 92       	push	r0
     904:	8a e5       	ldi	r24, 0x5A	; 90
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	ed b7       	in	r30, 0x3d	; 61
     90a:	fe b7       	in	r31, 0x3e	; 62
     90c:	92 83       	std	Z+2, r25	; 0x02
     90e:	81 83       	std	Z+1, r24	; 0x01
     910:	80 91 a0 05 	lds	r24, 0x05A0
     914:	90 91 a1 05 	lds	r25, 0x05A1
     918:	94 83       	std	Z+4, r25	; 0x04
     91a:	83 83       	std	Z+3, r24	; 0x03
     91c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	08 95       	ret
	}
	else {
		value = atoi(arg) * (1.1/1023) * 1000;
     92a:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     92e:	9c 01       	movw	r18, r24
     930:	b9 01       	movw	r22, r18
     932:	88 27       	eor	r24, r24
     934:	77 fd       	sbrc	r23, 7
     936:	80 95       	com	r24
     938:	98 2f       	mov	r25, r24
     93a:	0e 94 3f 0c 	call	0x187e	; 0x187e <__floatsisf>
     93e:	29 e0       	ldi	r18, 0x09	; 9
     940:	30 ef       	ldi	r19, 0xF0	; 240
     942:	4c e8       	ldi	r20, 0x8C	; 140
     944:	5a e3       	ldi	r21, 0x3A	; 58
     946:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	4a e7       	ldi	r20, 0x7A	; 122
     950:	54 e4       	ldi	r21, 0x44	; 68
     952:	0e 94 0d 0b 	call	0x161a	; 0x161a <__mulsf3>
     956:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fixsfsi>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     95e:	84 5f       	subi	r24, 0xF4	; 244
     960:	91 40       	sbci	r25, 0x01	; 1
     962:	6a e0       	ldi	r22, 0x0A	; 10
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     96a:	70 93 a1 05 	sts	0x05A1, r23
     96e:	60 93 a0 05 	sts	0x05A0, r22
		in_adc = 0;
     972:	10 92 9f 05 	sts	0x059F, r1
     976:	10 92 9e 05 	sts	0x059E, r1
     97a:	08 95       	ret

0000097c <what_task>:
};

int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	7c 01       	movw	r14, r24
	int i;
	for (i = 0; i < Task_cnt; i++)
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	17 c0       	rjmp	.+46     	; 0x9be <what_task+0x42>
		if (!strcmp(name, Task_tab[i].task_name))
     990:	e8 01       	movw	r28, r16
     992:	cc 0f       	add	r28, r28
     994:	dd 1f       	adc	r29, r29
     996:	c8 01       	movw	r24, r16
     998:	e5 e0       	ldi	r30, 0x05	; 5
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	ea 95       	dec	r30
     9a0:	e1 f7       	brne	.-8      	; 0x99a <what_task+0x1e>
     9a2:	c8 0f       	add	r28, r24
     9a4:	d9 1f       	adc	r29, r25
     9a6:	cb 54       	subi	r28, 0x4B	; 75
     9a8:	dc 4f       	sbci	r29, 0xFC	; 252
     9aa:	c7 01       	movw	r24, r14
     9ac:	be 01       	movw	r22, r28
     9ae:	0e 94 55 11 	call	0x22aa	; 0x22aa <strcmp>
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	11 f4       	brne	.+4      	; 0x9ba <what_task+0x3e>
			return(&Task_tab[i]);
     9b6:	ce 01       	movw	r24, r28
     9b8:	0b c0       	rjmp	.+22     	; 0x9d0 <what_task+0x54>
int Task_cnt = sizeof(Task_tab) / sizeof(struct task_tab);

struct task_tab *what_task(char *name)
{
	int i;
	for (i = 0; i < Task_cnt; i++)
     9ba:	0f 5f       	subi	r16, 0xFF	; 255
     9bc:	1f 4f       	sbci	r17, 0xFF	; 255
     9be:	80 91 b3 03 	lds	r24, 0x03B3
     9c2:	90 91 b4 03 	lds	r25, 0x03B4
     9c6:	08 17       	cp	r16, r24
     9c8:	19 07       	cpc	r17, r25
     9ca:	14 f3       	brlt	.-60     	; 0x990 <what_task+0x14>
		if (!strcmp(name, Task_tab[i].task_name))
			return(&Task_tab[i]);

	return(NULL);
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	08 95       	ret

000009de <task_init>:
struct task 	Task_q[MAX_TASK];
volatile int	Task_f, Task_r;

void task_init()
{
	Task_f = Task_r = 0;
     9de:	10 92 32 06 	sts	0x0632, r1
     9e2:	10 92 31 06 	sts	0x0631, r1
     9e6:	10 92 d4 06 	sts	0x06D4, r1
     9ea:	10 92 d3 06 	sts	0x06D3, r1
}
     9ee:	08 95       	ret

000009f0 <task_insert>:

int task_insert(struct task *tskp)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	48 2f       	mov	r20, r24
     9f6:	e9 2f       	mov	r30, r25
	if ((Task_r + 1) % MAX_TASK == Task_f)
     9f8:	80 91 31 06 	lds	r24, 0x0631
     9fc:	90 91 32 06 	lds	r25, 0x0632
     a00:	c0 91 d3 06 	lds	r28, 0x06D3
     a04:	d0 91 d4 06 	lds	r29, 0x06D4
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	20 e1       	ldi	r18, 0x10	; 16
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	b9 01       	movw	r22, r18
     a10:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     a14:	8c 17       	cp	r24, r28
     a16:	9d 07       	cpc	r25, r29
     a18:	31 f1       	breq	.+76     	; 0xa66 <task_insert+0x76>
		return 0;
	Task_r = (Task_r + 1) % MAX_TASK;
     a1a:	80 91 31 06 	lds	r24, 0x0631
     a1e:	90 91 32 06 	lds	r25, 0x0632
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	b9 01       	movw	r22, r18
     a26:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     a2a:	90 93 32 06 	sts	0x0632, r25
     a2e:	80 93 31 06 	sts	0x0631, r24
	Task_q[Task_r] = *tskp;
     a32:	80 91 31 06 	lds	r24, 0x0631
     a36:	90 91 32 06 	lds	r25, 0x0632
     a3a:	dc 01       	movw	r26, r24
     a3c:	aa 0f       	add	r26, r26
     a3e:	bb 1f       	adc	r27, r27
     a40:	c3 e0       	ldi	r28, 0x03	; 3
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	ca 95       	dec	r28
     a48:	e1 f7       	brne	.-8      	; 0xa42 <task_insert+0x52>
     a4a:	a8 0f       	add	r26, r24
     a4c:	b9 1f       	adc	r27, r25
     a4e:	ad 5c       	subi	r26, 0xCD	; 205
     a50:	b9 4f       	sbci	r27, 0xF9	; 249
     a52:	c4 2f       	mov	r28, r20
     a54:	de 2f       	mov	r29, r30
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	09 90       	ld	r0, Y+
     a5a:	0d 92       	st	X+, r0
     a5c:	81 50       	subi	r24, 0x01	; 1
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <task_insert+0x68>
	return (1);
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if ((Task_r + 1) % MAX_TASK == Task_f)
		return 0;
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return (1);
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <task_delete>:

int task_delete(struct task *tskp)
{
     a70:	9c 01       	movw	r18, r24
	if (Task_r == Task_f)
     a72:	40 91 31 06 	lds	r20, 0x0631
     a76:	50 91 32 06 	lds	r21, 0x0632
     a7a:	80 91 d3 06 	lds	r24, 0x06D3
     a7e:	90 91 d4 06 	lds	r25, 0x06D4
     a82:	48 17       	cp	r20, r24
     a84:	59 07       	cpc	r21, r25
     a86:	31 f1       	breq	.+76     	; 0xad4 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     a88:	80 91 d3 06 	lds	r24, 0x06D3
     a8c:	90 91 d4 06 	lds	r25, 0x06D4
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	60 e1       	ldi	r22, 0x10	; 16
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
     a9a:	90 93 d4 06 	sts	0x06D4, r25
     a9e:	80 93 d3 06 	sts	0x06D3, r24
	*tskp = Task_q[Task_f];
     aa2:	80 91 d3 06 	lds	r24, 0x06D3
     aa6:	90 91 d4 06 	lds	r25, 0x06D4
     aaa:	fc 01       	movw	r30, r24
     aac:	ee 0f       	add	r30, r30
     aae:	ff 1f       	adc	r31, r31
     ab0:	53 e0       	ldi	r21, 0x03	; 3
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	5a 95       	dec	r21
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <task_delete+0x42>
     aba:	e8 0f       	add	r30, r24
     abc:	f9 1f       	adc	r31, r25
     abe:	d9 01       	movw	r26, r18
     ac0:	ed 5c       	subi	r30, 0xCD	; 205
     ac2:	f9 4f       	sbci	r31, 0xF9	; 249
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	01 90       	ld	r0, Z+
     ac8:	0d 92       	st	X+, r0
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	e1 f7       	brne	.-8      	; 0xac6 <task_delete+0x56>
	return(1);
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if (Task_r == Task_f)
		return(0);
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     ad8:	08 95       	ret

00000ada <task_cmd>:

void task_cmd(char *arg)
{
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	ca 54       	subi	r28, 0x4A	; 74
     af4:	d0 40       	sbci	r29, 0x00	; 0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task_tab *tp;
	struct task task;
	int ms;

	if (!uart_peek()) return;
     b00:	0e 94 9a 08 	call	0x1134	; 0x1134 <uart_peek>
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	09 f4       	brne	.+2      	; 0xb0a <task_cmd+0x30>
     b08:	8e c0       	rjmp	.+284    	; 0xc26 <task_cmd+0x14c>

	if (gets(buf) == NULL) {
     b0a:	ce 01       	movw	r24, r28
     b0c:	0b 96       	adiw	r24, 0x0b	; 11
     b0e:	0e 94 c8 11 	call	0x2390	; 0x2390 <gets>
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	29 f4       	brne	.+10     	; 0xb20 <task_cmd+0x46>
		printf("logout, goodbye !!!\n");
     b16:	8d e7       	ldi	r24, 0x7D	; 125
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	0e 94 07 12 	call	0x240e	; 0x240e <puts>
     b1e:	ff cf       	rjmp	.-2      	; 0xb1e <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf,  " \t\n\r");
     b20:	ce 01       	movw	r24, r28
     b22:	0b 96       	adiw	r24, 0x0b	; 11
     b24:	61 e9       	ldi	r22, 0x91	; 145
     b26:	73 e0       	ldi	r23, 0x03	; 3
     b28:	0e 94 50 11 	call	0x22a0	; 0x22a0 <strtok>
     b2c:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	61 e9       	ldi	r22, 0x91	; 145
     b34:	73 e0       	ldi	r23, 0x03	; 3
     b36:	0e 94 50 11 	call	0x22a0	; 0x22a0 <strtok>
     b3a:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	61 e9       	ldi	r22, 0x91	; 145
     b42:	73 e0       	ldi	r23, 0x03	; 3
     b44:	0e 94 50 11 	call	0x22a0	; 0x22a0 <strtok>
     b48:	6c 01       	movw	r12, r24
	cp3 = strtok(NULL, " \t\n\r");
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	61 e9       	ldi	r22, 0x91	; 145
     b50:	73 e0       	ldi	r23, 0x03	; 3
     b52:	0e 94 50 11 	call	0x22a0	; 0x22a0 <strtok>
     b56:	5c 01       	movw	r10, r24

	if (cp0 == NULL) {
     b58:	01 15       	cp	r16, r1
     b5a:	11 05       	cpc	r17, r1
     b5c:	29 f4       	brne	.+10     	; 0xb68 <task_cmd+0x8e>
		printf("$ "); return;
     b5e:	0f 92       	push	r0
     b60:	0f 92       	push	r0
     b62:	8d e1       	ldi	r24, 0x1D	; 29
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	47 c0       	rjmp	.+142    	; 0xbf6 <task_cmd+0x11c>
	}

	if (!strcmp(cp0, "timer")) {
     b68:	c8 01       	movw	r24, r16
     b6a:	66 e9       	ldi	r22, 0x96	; 150
     b6c:	73 e0       	ldi	r23, 0x03	; 3
     b6e:	0e 94 55 11 	call	0x22aa	; 0x22aa <strcmp>
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	b9 f5       	brne	.+110    	; 0xbe4 <task_cmd+0x10a>
		if (!cp1 || !cp2) 
     b76:	e1 14       	cp	r14, r1
     b78:	f1 04       	cpc	r15, r1
     b7a:	19 f0       	breq	.+6      	; 0xb82 <task_cmd+0xa8>
     b7c:	c1 14       	cp	r12, r1
     b7e:	d1 04       	cpc	r13, r1
     b80:	61 f4       	brne	.+24     	; 0xb9a <task_cmd+0xc0>
			printf("Unknown command...\n$ ");
     b82:	0f 92       	push	r0
     b84:	0f 92       	push	r0
     b86:	8c e9       	ldi	r24, 0x9C	; 156
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	ed b7       	in	r30, 0x3d	; 61
     b8c:	fe b7       	in	r31, 0x3e	; 62
     b8e:	92 83       	std	Z+2, r25	; 0x02
     b90:	81 83       	std	Z+1, r24	; 0x01
     b92:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
		ms = atoi(cp1) / 256;
     b9a:	c7 01       	movw	r24, r14
     b9c:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     ba0:	8c 01       	movw	r16, r24

		if (!(tp = what_task(cp2))) {
     ba2:	c6 01       	movw	r24, r12
     ba4:	0e 94 be 04 	call	0x97c	; 0x97c <what_task>
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	09 f1       	breq	.+66     	; 0xbee <task_cmd+0x114>
			printf("Unknown command...\n$ ");
			return;
		}

		task.fun = tp->task_fun;
     bac:	fc 01       	movw	r30, r24
     bae:	80 a1       	lds	r24, 0x40
     bb0:	91 a1       	lds	r25, 0x41
     bb2:	9a 83       	std	Y+2, r25	; 0x02
     bb4:	89 83       	std	Y+1, r24	; 0x01
		if (cp3) strcpy(task.arg, cp3);
     bb6:	ce 01       	movw	r24, r28
     bb8:	03 96       	adiw	r24, 0x03	; 3
     bba:	a1 14       	cp	r10, r1
     bbc:	b1 04       	cpc	r11, r1
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <task_cmd+0xea>
     bc0:	b5 01       	movw	r22, r10
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <task_cmd+0xee>
		else	 strcpy(task.arg, "");
     bc4:	62 eb       	ldi	r22, 0xB2	; 178
     bc6:	73 e0       	ldi	r23, 0x03	; 3
     bc8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <strcpy>
		
		cli();
     bcc:	f8 94       	cli
	}

	if (!strcmp(cp0, "timer")) {
		if (!cp1 || !cp2) 
			printf("Unknown command...\n$ ");
		ms = atoi(cp1) / 256;
     bce:	c8 01       	movw	r24, r16
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	71 e0       	ldi	r23, 0x01	; 1
     bd4:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__divmodhi4>
		task.fun = tp->task_fun;
		if (cp3) strcpy(task.arg, cp3);
		else	 strcpy(task.arg, "");
		
		cli();
		insert_timer(&task, ms);
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	0e 94 2a 06 	call	0xc54	; 0xc54 <insert_timer>
		sei();
     be0:	78 94       	sei
     be2:	21 c0       	rjmp	.+66     	; 0xc26 <task_cmd+0x14c>
	} else {
		if (!(tp = what_task(cp0))) {
     be4:	c8 01       	movw	r24, r16
     be6:	0e 94 be 04 	call	0x97c	; 0x97c <what_task>
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	79 f4       	brne	.+30     	; 0xc0c <task_cmd+0x132>
			printf("Unknown command...\n$ ");
     bee:	0f 92       	push	r0
     bf0:	0f 92       	push	r0
     bf2:	8c e9       	ldi	r24, 0x9C	; 156
     bf4:	93 e0       	ldi	r25, 0x03	; 3
     bf6:	ad b7       	in	r26, 0x3d	; 61
     bf8:	be b7       	in	r27, 0x3e	; 62
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	9c 93       	st	X, r25
     bfe:	8e 93       	st	-X, r24
     c00:	11 97       	sbiw	r26, 0x01	; 1
     c02:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
			return;
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <task_cmd+0x14c>
     c0c:	dc 01       	movw	r26, r24
     c0e:	90 96       	adiw	r26, 0x20	; 32
     c10:	ed 91       	ld	r30, X+
     c12:	fc 91       	ld	r31, X
     c14:	91 97       	sbiw	r26, 0x21	; 33
		}
		if (cp2) {
     c16:	c1 14       	cp	r12, r1
     c18:	d1 04       	cpc	r13, r1
     c1a:	11 f0       	breq	.+4      	; 0xc20 <task_cmd+0x146>
			(*tp->task_fun)(cp1);
     c1c:	c7 01       	movw	r24, r14
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <task_cmd+0x14a>
		} else {
			(*tp->task_fun)("");
     c20:	82 eb       	ldi	r24, 0xB2	; 178
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	19 95       	eicall
		}
	}
}
     c26:	c6 5b       	subi	r28, 0xB6	; 182
     c28:	df 4f       	sbci	r29, 0xFF	; 255
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	08 95       	ret

00000c4a <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     c4a:	8e e0       	ldi	r24, 0x0E	; 14
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 03 10 	call	0x2006	; 0x2006 <malloc>
	return(tp);
}
     c52:	08 95       	ret

00000c54 <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	f8 2e       	mov	r15, r24
     c62:	e9 2e       	mov	r14, r25
     c64:	8b 01       	movw	r16, r22
	int			total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     c66:	0e 94 25 06 	call	0xc4a	; 0xc4a <get_timer>
     c6a:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     c6c:	dc 01       	movw	r26, r24
     c6e:	12 96       	adiw	r26, 0x02	; 2
     c70:	ef 2d       	mov	r30, r15
     c72:	fe 2d       	mov	r31, r14
     c74:	8a e0       	ldi	r24, 0x0A	; 10
     c76:	01 90       	ld	r0, Z+
     c78:	0d 92       	st	X+, r0
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <insert_timer+0x22>
	tp->time = ms;
     c7e:	19 83       	std	Y+1, r17	; 0x01
     c80:	08 83       	st	Y, r16

	if(Thead == NULL) {
     c82:	e0 91 a5 05 	lds	r30, 0x05A5
     c86:	f0 91 a6 05 	lds	r31, 0x05A6
     c8a:	30 97       	sbiw	r30, 0x00	; 0
     c8c:	29 f4       	brne	.+10     	; 0xc98 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     c8e:	d0 93 a6 05 	sts	0x05A6, r29
     c92:	c0 93 a5 05 	sts	0x05A5, r28
     c96:	2f c0       	rjmp	.+94     	; 0xcf6 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     ca2:	fd 01       	movw	r30, r26
		total += cp->time;
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	28 0f       	add	r18, r24
     caa:	39 1f       	adc	r19, r25
		if(total >= ms)
     cac:	20 17       	cp	r18, r16
     cae:	31 07       	cpc	r19, r17
     cb0:	34 f4       	brge	.+12     	; 0xcbe <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     cb2:	a4 85       	ldd	r26, Z+12	; 0x0c
     cb4:	b5 85       	ldd	r27, Z+13	; 0x0d
     cb6:	af 01       	movw	r20, r30
     cb8:	10 97       	sbiw	r26, 0x00	; 0
     cba:	99 f7       	brne	.-26     	; 0xca2 <insert_timer+0x4e>
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     cbe:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	79 f4       	brne	.+30     	; 0xce4 <insert_timer+0x90>
		cp->time -= tp->time;
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	80 1b       	sub	r24, r16
     cce:	91 0b       	sbc	r25, r17
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	9c 93       	st	X, r25
     cd4:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     cd6:	bd 87       	std	Y+13, r27	; 0x0d
     cd8:	ac 87       	std	Y+12, r26	; 0x0c
     cda:	d0 93 a6 05 	sts	0x05A6, r29
     cde:	c0 93 a5 05 	sts	0x05A5, r28
     ce2:	24 c0       	rjmp	.+72     	; 0xd2c <insert_timer+0xd8>
	} else if(cp == NULL) {
     ce4:	10 97       	sbiw	r26, 0x00	; 0
     ce6:	51 f4       	brne	.+20     	; 0xcfc <insert_timer+0xa8>
		tp->time -= total;
     ce8:	02 1b       	sub	r16, r18
     cea:	13 0b       	sbc	r17, r19
     cec:	19 83       	std	Y+1, r17	; 0x01
     cee:	08 83       	st	Y, r16
		pp->link = tp;
     cf0:	fa 01       	movw	r30, r20
     cf2:	d5 87       	std	Z+13, r29	; 0x0d
     cf4:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     cf6:	1d 86       	std	Y+13, r1	; 0x0d
     cf8:	1c 86       	std	Y+12, r1	; 0x0c
     cfa:	18 c0       	rjmp	.+48     	; 0xd2c <insert_timer+0xd8>
	} else {
		total -= cp->time;
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	11 97       	sbiw	r26, 0x01	; 1
     d02:	b9 01       	movw	r22, r18
     d04:	68 1b       	sub	r22, r24
     d06:	79 0b       	sbc	r23, r25
		tp->time -= total;
     d08:	98 01       	movw	r18, r16
     d0a:	26 1b       	sub	r18, r22
     d0c:	37 0b       	sbc	r19, r23
     d0e:	39 83       	std	Y+1, r19	; 0x01
     d10:	28 83       	st	Y, r18
		cp->time -= tp->time;
     d12:	8d 91       	ld	r24, X+
     d14:	9c 91       	ld	r25, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	82 1b       	sub	r24, r18
     d1a:	93 0b       	sbc	r25, r19
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	9c 93       	st	X, r25
     d20:	8e 93       	st	-X, r24
		pp->link = tp;
     d22:	fa 01       	movw	r30, r20
     d24:	d5 87       	std	Z+13, r29	; 0x0d
     d26:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     d28:	bd 87       	std	Y+13, r27	; 0x0d
     d2a:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <tour_timer>:

void tour_timer()
{
     d3a:	ef 92       	push	r14
     d3c:	ff 92       	push	r15
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     d46:	8a e0       	ldi	r24, 0x0A	; 10
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 00 12 	call	0x2400	; 0x2400 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     d4e:	c0 91 a5 05 	lds	r28, 0x05A5
     d52:	d0 91 a6 05 	lds	r29, 0x05A6
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     d5a:	8f e5       	ldi	r24, 0x5F	; 95
     d5c:	e8 2e       	mov	r14, r24
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     d62:	20 c0       	rjmp	.+64     	; 0xda4 <tour_timer+0x6a>
		total += cp->time;
     d64:	88 81       	ld	r24, Y
     d66:	99 81       	ldd	r25, Y+1	; 0x01
     d68:	08 0f       	add	r16, r24
     d6a:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <tour_timer+0x34>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <tour_timer+0x36>
     d70:	ed b7       	in	r30, 0x3d	; 61
     d72:	fe b7       	in	r31, 0x3e	; 62
     d74:	31 96       	adiw	r30, 0x01	; 1
     d76:	ad b7       	in	r26, 0x3d	; 61
     d78:	be b7       	in	r27, 0x3e	; 62
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	fc 92       	st	X, r15
     d7e:	ee 92       	st	-X, r14
     d80:	11 97       	sbiw	r26, 0x01	; 1
     d82:	93 83       	std	Z+3, r25	; 0x03
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	15 83       	std	Z+5, r17	; 0x05
     d88:	04 83       	std	Z+4, r16	; 0x04
     d8a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     d8e:	0c 84       	ldd	r0, Y+12	; 0x0c
     d90:	dd 85       	ldd	r29, Y+13	; 0x0d
     d92:	c0 2d       	mov	r28, r0
     d94:	8d b7       	in	r24, 0x3d	; 61
     d96:	9e b7       	in	r25, 0x3e	; 62
     d98:	06 96       	adiw	r24, 0x06	; 6
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	9e bf       	out	0x3e, r25	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	8d bf       	out	0x3d, r24	; 61
     da4:	20 97       	sbiw	r28, 0x00	; 0
     da6:	f1 f6       	brne	.-68     	; 0xd64 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     da8:	8a e0       	ldi	r24, 0x0A	; 10
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 00 12 	call	0x2400	; 0x2400 <putchar>
}
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	08 95       	ret

00000dbe <free_timer>:

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     dc0:	fc 01       	movw	r30, r24
     dc2:	24 85       	ldd	r18, Z+12	; 0x0c
     dc4:	35 85       	ldd	r19, Z+13	; 0x0d
     dc6:	30 93 a6 05 	sts	0x05A6, r19
     dca:	20 93 a5 05 	sts	0x05A5, r18
		free(cp);
     dce:	0e 94 99 10 	call	0x2132	; 0x2132 <free>

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     dd2:	80 91 a5 05 	lds	r24, 0x05A5
     dd6:	90 91 a6 05 	lds	r25, 0x05A6
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	89 f7       	brne	.-30     	; 0xdc0 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     dde:	08 95       	ret

00000de0 <app_timer>:

void app_timer(char *ap)
{
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	62 97       	sbiw	r28, 0x12	; 18
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task	tsk;

	while(1) {
		printf(">> ");
     df8:	0a e6       	ldi	r16, 0x6A	; 106
     dfa:	14 e0       	ldi	r17, 0x04	; 4
     dfc:	0f 92       	push	r0
     dfe:	0f 92       	push	r0
     e00:	ed b7       	in	r30, 0x3d	; 61
     e02:	fe b7       	in	r31, 0x3e	; 62
     e04:	12 83       	std	Z+2, r17	; 0x02
     e06:	01 83       	std	Z+1, r16	; 0x01
     e08:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	40 91 da 06 	lds	r20, 0x06DA
     e14:	50 91 db 06 	lds	r21, 0x06DB
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	68 e0       	ldi	r22, 0x08	; 8
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	0e 94 94 11 	call	0x2328	; 0x2328 <fgets>
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	61 f0       	breq	.+24     	; 0xe40 <app_timer+0x60>
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	0e 94 32 11 	call	0x2264	; 0x2264 <atoi>
     e30:	bc 01       	movw	r22, r24
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	29 f0       	breq	.+10     	; 0xe40 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     e36:	ce 01       	movw	r24, r28
     e38:	09 96       	adiw	r24, 0x09	; 9
     e3a:	0e 94 2a 06 	call	0xc54	; 0xc54 <insert_timer>
	}
     e3e:	de cf       	rjmp	.-68     	; 0xdfc <app_timer+0x1c>

	tour_timer();
     e40:	0e 94 9d 06 	call	0xd3a	; 0xd3a <tour_timer>
	free_timer();
     e44:	0e 94 df 06 	call	0xdbe	; 0xdbe <free_timer>
}
     e48:	62 96       	adiw	r28, 0x12	; 18
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	08 95       	ret

00000e5e <timer_init>:

void timer_init() {
	TCNT2 = 0;
     e5e:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     e62:	e6 eb       	ldi	r30, 0xB6	; 182
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 62       	ori	r24, 0x20	; 32
     e6a:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     e6c:	e0 e7       	ldi	r30, 0x70	; 112
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	81 60       	ori	r24, 0x01	; 1
     e74:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     e76:	e1 eb       	ldi	r30, 0xB1	; 177
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	80 83       	st	Z, r24
     e80:	80 81       	ld	r24, Z
     e82:	82 60       	ori	r24, 0x02	; 2
     e84:	80 83       	st	Z, r24
}
     e86:	08 95       	ret

00000e88 <timer_expire>:
 	if (--Thead->time == 0)
		timer_expire();
}

void timer_expire(void)
{
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     e8c:	0d c0       	rjmp	.+26     	; 0xea8 <timer_expire+0x20>
		tp = Thead, Thead = tp->link;
     e8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e90:	9d 85       	ldd	r25, Y+13	; 0x0d
     e92:	90 93 a6 05 	sts	0x05A6, r25
     e96:	80 93 a5 05 	sts	0x05A5, r24

		task_insert(&tp->task);
     e9a:	ce 01       	movw	r24, r28
     e9c:	02 96       	adiw	r24, 0x02	; 2
     e9e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <task_insert>

		free(tp);
     ea2:	ce 01       	movw	r24, r28
     ea4:	0e 94 99 10 	call	0x2132	; 0x2132 <free>

void timer_expire(void)
{
	struct timer *tp;

	for ( ; Thead != NULL && !Thead->time; ) {
     ea8:	c0 91 a5 05 	lds	r28, 0x05A5
     eac:	d0 91 a6 05 	lds	r29, 0x05A6
     eb0:	20 97       	sbiw	r28, 0x00	; 0
     eb2:	21 f0       	breq	.+8      	; 0xebc <timer_expire+0x34>
     eb4:	88 81       	ld	r24, Y
     eb6:	99 81       	ldd	r25, Y+1	; 0x01
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	49 f3       	breq	.-46     	; 0xe8e <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
	}
}
     ebc:	df 91       	pop	r29
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <__vector_15>:
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
}

ISR(TIMER2_OVF_vect)
{
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	0b b6       	in	r0, 0x3b	; 59
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
	if (!Thead)
     ee8:	e0 91 a5 05 	lds	r30, 0x05A5
     eec:	f0 91 a6 05 	lds	r31, 0x05A6
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	49 f0       	breq	.+18     	; 0xf06 <__vector_15+0x44>
		return;
 	if (--Thead->time == 0)
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	11 f4       	brne	.+4      	; 0xf06 <__vector_15+0x44>
		timer_expire();
     f02:	0e 94 44 07 	call	0xe88	; 0xe88 <timer_expire>
}
     f06:	ff 91       	pop	r31
     f08:	ef 91       	pop	r30
     f0a:	bf 91       	pop	r27
     f0c:	af 91       	pop	r26
     f0e:	9f 91       	pop	r25
     f10:	8f 91       	pop	r24
     f12:	7f 91       	pop	r23
     f14:	6f 91       	pop	r22
     f16:	5f 91       	pop	r21
     f18:	4f 91       	pop	r20
     f1a:	3f 91       	pop	r19
     f1c:	2f 91       	pop	r18
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     f2c:	f8 94       	cli
		ch = qi_delete();
     f2e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <qi_delete>
		sei();
     f32:	78 94       	sei
	} while(ch == 0);
     f34:	88 23       	and	r24, r24
     f36:	d1 f3       	breq	.-12     	; 0xf2c <uart_getchar>

	if(ch == EOT)	return(-1);
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	11 f0       	breq	.+4      	; 0xf40 <uart_getchar+0x14>
	else			return(ch);
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while(ch == 0);

	if(ch == EOT)	return(-1);
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     f44:	08 95       	ret

00000f46 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     f46:	cf 93       	push	r28
     f48:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     f4a:	8a 30       	cpi	r24, 0x0A	; 10
     f4c:	19 f4       	brne	.+6      	; 0xf54 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	0e 94 a3 07 	call	0xf46	; 0xf46 <uart_putchar>
	
	cli();
     f54:	f8 94       	cli

	if(!uart_busy) {
     f56:	80 91 d5 06 	lds	r24, 0x06D5
     f5a:	88 23       	and	r24, r24
     f5c:	59 f4       	brne	.+22     	; 0xf74 <uart_putchar+0x2e>
		UDR0 = ch;
     f5e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	80 93 d5 06 	sts	0x06D5, r24
     f68:	0a c0       	rjmp	.+20     	; 0xf7e <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     f6a:	78 94       	sei
     f6c:	86 ef       	ldi	r24, 0xF6	; 246
     f6e:	8a 95       	dec	r24
     f70:	f1 f7       	brne	.-4      	; 0xf6e <uart_putchar+0x28>
			_delay_us(100);
			cli();
     f72:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     f74:	8c 2f       	mov	r24, r28
     f76:	0e 94 76 02 	call	0x4ec	; 0x4ec <qo_insert>
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	b1 f3       	breq	.-20     	; 0xf6a <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}			
	}
	sei();
     f7e:	78 94       	sei

	return(1);
}
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     f88:	8f e6       	ldi	r24, 0x6F	; 111
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	90 93 db 06 	sts	0x06DB, r25
     f90:	80 93 da 06 	sts	0x06DA, r24
     f94:	8d e7       	ldi	r24, 0x7D	; 125
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	90 93 dd 06 	sts	0x06DD, r25
     f9c:	80 93 dc 06 	sts	0x06DC, r24
	uart_busy = 0;
     fa0:	10 92 d5 06 	sts	0x06D5, r1
	q_init();
     fa4:	0e 94 26 02 	call	0x44c	; 0x44c <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     fa8:	10 92 c5 00 	sts	0x00C5, r1
     fac:	87 e0       	ldi	r24, 0x07	; 7
     fae:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     fb2:	e0 ec       	ldi	r30, 0xC0	; 192
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	82 60       	ori	r24, 0x02	; 2
     fba:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     fbc:	e1 ec       	ldi	r30, 0xC1	; 193
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	88 60       	ori	r24, 0x08	; 8
     fc4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     fc6:	80 81       	ld	r24, Z
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     fcc:	80 81       	ld	r24, Z
     fce:	80 61       	ori	r24, 0x10	; 16
     fd0:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     fd2:	80 81       	ld	r24, Z
     fd4:	80 68       	ori	r24, 0x80	; 128
     fd6:	80 83       	st	Z, r24
}
     fd8:	08 95       	ret

00000fda <__vector_27>:
	if(ch == EOT)	return(-1);
	else			return(ch);
}

ISR(USART0_TX_vect)
{
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	0b b6       	in	r0, 0x3b	; 59
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
    1000:	0e 94 98 02 	call	0x530	; 0x530 <qo_delete>
    1004:	88 23       	and	r24, r24
    1006:	19 f4       	brne	.+6      	; 0x100e <__vector_27+0x34>
		uart_busy = 0;
    1008:	10 92 d5 06 	sts	0x06D5, r1
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <__vector_27+0x38>
	else
		UDR0 = ch;
    100e:	80 93 c6 00 	sts	0x00C6, r24
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0b be       	out	0x3b, r0	; 59
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <uart_echo>:
		task_insert(&task);
	}
}

void uart_echo(char ch)
{
    1038:	cf 93       	push	r28
    103a:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
    103c:	8a 30       	cpi	r24, 0x0A	; 10
    103e:	19 f4       	brne	.+6      	; 0x1046 <uart_echo+0xe>
    1040:	8d e0       	ldi	r24, 0x0D	; 13
    1042:	0e 94 1c 08 	call	0x1038	; 0x1038 <uart_echo>
	if(!uart_busy) {
    1046:	80 91 d5 06 	lds	r24, 0x06D5
    104a:	88 23       	and	r24, r24
    104c:	31 f4       	brne	.+12     	; 0x105a <uart_echo+0x22>
		UDR0 = ch;
    104e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 d5 06 	sts	0x06D5, r24
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <uart_echo+0x28>
	}
	else {
		qo_insert(ch);			
    105a:	8c 2f       	mov	r24, r28
    105c:	0e 94 76 02 	call	0x4ec	; 0x4ec <qo_insert>
	}
}
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <__vector_25>:
	else
		UDR0 = ch;
}

ISR(USART0_RX_vect)
{
    1064:	1f 92       	push	r1
    1066:	0f 92       	push	r0
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	0f 92       	push	r0
    106c:	0b b6       	in	r0, 0x3b	; 59
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	1f 93       	push	r17
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	2a 97       	sbiw	r28, 0x0a	; 10
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;
	ch = UDR0;
    109a:	10 91 c6 00 	lds	r17, 0x00C6

	if(ch == ESC) {
    109e:	1b 31       	cpi	r17, 0x1B	; 27
    10a0:	61 f4       	brne	.+24     	; 0x10ba <__vector_25+0x56>
		echo_mode = (echo_mode + 1) & 0x01;
    10a2:	80 91 8b 04 	lds	r24, 0x048B
    10a6:	90 91 8c 04 	lds	r25, 0x048C
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	90 70       	andi	r25, 0x00	; 0
    10b0:	90 93 8c 04 	sts	0x048C, r25
    10b4:	80 93 8b 04 	sts	0x048B, r24
		return;
    10b8:	24 c0       	rjmp	.+72     	; 0x1102 <__vector_25+0x9e>
	}

	if(ch !=EOT) {
    10ba:	14 30       	cpi	r17, 0x04	; 4
    10bc:	69 f0       	breq	.+26     	; 0x10d8 <__vector_25+0x74>
		if(ch == '\r') ch = '\n';
    10be:	1d 30       	cpi	r17, 0x0D	; 13
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <__vector_25+0x60>
    10c2:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode)  uart_echo(ch);
    10c4:	20 91 8b 04 	lds	r18, 0x048B
    10c8:	30 91 8c 04 	lds	r19, 0x048C
    10cc:	21 15       	cp	r18, r1
    10ce:	31 05       	cpc	r19, r1
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <__vector_25+0x74>
    10d2:	81 2f       	mov	r24, r17
    10d4:	0e 94 1c 08 	call	0x1038	; 0x1038 <uart_echo>
	}
	qi_insert(ch);
    10d8:	81 2f       	mov	r24, r17
    10da:	0e 94 37 02 	call	0x46e	; 0x46e <qi_insert>
	if(ch == EOT || ch == '\n') {
    10de:	14 30       	cpi	r17, 0x04	; 4
    10e0:	11 f0       	breq	.+4      	; 0x10e6 <__vector_25+0x82>
    10e2:	1a 30       	cpi	r17, 0x0A	; 10
    10e4:	71 f4       	brne	.+28     	; 0x1102 <__vector_25+0x9e>
		task.fun = task_cmd;
    10e6:	8d e6       	ldi	r24, 0x6D	; 109
    10e8:	95 e0       	ldi	r25, 0x05	; 5
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
    10ee:	ce 01       	movw	r24, r28
    10f0:	03 96       	adiw	r24, 0x03	; 3
    10f2:	6e e6       	ldi	r22, 0x6E	; 110
    10f4:	74 e0       	ldi	r23, 0x04	; 4
    10f6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <strcpy>
		task_insert(&task);
    10fa:	ce 01       	movw	r24, r28
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <task_insert>
	}
}
    1102:	2a 96       	adiw	r28, 0x0a	; 10
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	ff 91       	pop	r31
    110e:	ef 91       	pop	r30
    1110:	bf 91       	pop	r27
    1112:	af 91       	pop	r26
    1114:	9f 91       	pop	r25
    1116:	8f 91       	pop	r24
    1118:	7f 91       	pop	r23
    111a:	6f 91       	pop	r22
    111c:	5f 91       	pop	r21
    111e:	4f 91       	pop	r20
    1120:	3f 91       	pop	r19
    1122:	2f 91       	pop	r18
    1124:	1f 91       	pop	r17
    1126:	0f 90       	pop	r0
    1128:	0b be       	out	0x3b, r0	; 59
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <uart_peek>:
	}
}

int uart_peek()
{
	return(qi_peek());
    1134:	0e 94 b5 02 	call	0x56a	; 0x56a <qi_peek>
}
    1138:	08 95       	ret

0000113a <tcn75_i2c_init>:
#define SCL 0
#define SDA 1

void tcn75_i2c_init()
{
	sbi(DDRD, SDA); sbi(PORTD, SDA); // output, hi
    113a:	51 9a       	sbi	0x0a, 1	; 10
    113c:	59 9a       	sbi	0x0b, 1	; 11
	sbi(DDRD, SCL); sbi(PORTD, SCL); // output, hi -> idle state
    113e:	50 9a       	sbi	0x0a, 0	; 10
    1140:	58 9a       	sbi	0x0b, 0	; 11
	sbi(DDRH, 1); cbi(PORTH, 1); // output , A0 <- 0
    1142:	a1 e0       	ldi	r26, 0x01	; 1
    1144:	b1 e0       	ldi	r27, 0x01	; 1
    1146:	8c 91       	ld	r24, X
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	8c 93       	st	X, r24
    114c:	e2 e0       	ldi	r30, 0x02	; 2
    114e:	f1 e0       	ldi	r31, 0x01	; 1
    1150:	80 81       	ld	r24, Z
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	80 83       	st	Z, r24
	sbi(DDRH, 3); cbi(PORTH, 3); // output , A1 <- 0
    1156:	8c 91       	ld	r24, X
    1158:	88 60       	ori	r24, 0x08	; 8
    115a:	8c 93       	st	X, r24
    115c:	80 81       	ld	r24, Z
    115e:	87 7f       	andi	r24, 0xF7	; 247
    1160:	80 83       	st	Z, r24
	sbi(DDRH, 5); cbi(PORTH, 5); // output , A2 <- 0 -> address bit
    1162:	8c 91       	ld	r24, X
    1164:	80 62       	ori	r24, 0x20	; 32
    1166:	8c 93       	st	X, r24
    1168:	80 81       	ld	r24, Z
    116a:	8f 7d       	andi	r24, 0xDF	; 223
    116c:	80 83       	st	Z, r24
}
    116e:	08 95       	ret

00001170 <i2c_tcn75_trans_start>:

/*inline*/ void i2c_tcn75_trans_start()
{
	cbi(PORTD, SCL); // SCL <- L
    1170:	58 98       	cbi	0x0b, 0	; 11
	sbi(PORTD, SDA); delay_2nop(); // SDA <- H
    1172:	59 9a       	sbi	0x0b, 1	; 11
    1174:	00 00       	nop
    1176:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop(); // SCL <- H
    1178:	58 9a       	sbi	0x0b, 0	; 11
    117a:	00 00       	nop
    117c:	00 00       	nop
	cbi(PORTD, SDA); delay_us(1); // SDA <- L
    117e:	59 98       	cbi	0x0b, 1	; 11
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	8a 95       	dec	r24
    1184:	f1 f7       	brne	.-4      	; 0x1182 <i2c_tcn75_trans_start+0x12>
    1186:	00 c0       	rjmp	.+0      	; 0x1188 <i2c_tcn75_trans_start+0x18>
}
    1188:	08 95       	ret

0000118a <i2c_tcn75_trans_stop>:

/*inline*/ void i2c_tcn75_trans_stop()
{
	cbi(PORTD, SCL); // SCL <- L
    118a:	58 98       	cbi	0x0b, 0	; 11
	cbi(PORTD, SDA); delay_2nop(); // SDA <- L
    118c:	59 98       	cbi	0x0b, 1	; 11
    118e:	00 00       	nop
    1190:	00 00       	nop
	sbi(PORTD, SCL); delay_2nop(); // SCL <- H
    1192:	58 9a       	sbi	0x0b, 0	; 11
    1194:	00 00       	nop
    1196:	00 00       	nop
	sbi(PORTD, SDA); delay_us(1); // SDA <- H
    1198:	59 9a       	sbi	0x0b, 1	; 11
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	8a 95       	dec	r24
    119e:	f1 f7       	brne	.-4      	; 0x119c <i2c_tcn75_trans_stop+0x12>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <i2c_tcn75_trans_stop+0x18>
}
    11a2:	08 95       	ret

000011a4 <i2c_tcn75_write_one_byte>:

/*inline*/ uint8_t i2c_tcn75_write_one_byte(uint8_t data)
{
	uint8_t mask, ack;

	sbi(DDRD, SDA); // SDA output
    11a4:	51 9a       	sbi	0x0a, 1	; 10
    11a6:	28 e0       	ldi	r18, 0x08	; 8
    11a8:	30 e0       	ldi	r19, 0x00	; 0
	for (mask = 0x80; mask; mask = mask >> 1)
    11aa:	90 e8       	ldi	r25, 0x80	; 128
	{
		cbi(PORTD, SCL); delay_2nop(); // SCL <- L
    11ac:	58 98       	cbi	0x0b, 0	; 11
    11ae:	00 00       	nop
    11b0:	00 00       	nop

		if (mask & data) 
    11b2:	49 2f       	mov	r20, r25
    11b4:	48 23       	and	r20, r24
    11b6:	11 f0       	breq	.+4      	; 0x11bc <i2c_tcn75_write_one_byte+0x18>
			sbi(PORTD, SDA); // SDA <- 1
    11b8:	59 9a       	sbi	0x0b, 1	; 11
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <i2c_tcn75_write_one_byte+0x1a>
		else 
			cbi(PORTD, SDA); // SDA <- 0
    11bc:	59 98       	cbi	0x0b, 1	; 11
    11be:	42 e0       	ldi	r20, 0x02	; 2
    11c0:	4a 95       	dec	r20
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <i2c_tcn75_write_one_byte+0x1c>
    11c4:	00 c0       	rjmp	.+0      	; 0x11c6 <i2c_tcn75_write_one_byte+0x22>

		delay_us(1);
		sbi(PORTD, SCL); delay_us(1); // SCL <- H
    11c6:	58 9a       	sbi	0x0b, 0	; 11
    11c8:	42 e0       	ldi	r20, 0x02	; 2
    11ca:	4a 95       	dec	r20
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <i2c_tcn75_write_one_byte+0x26>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <i2c_tcn75_write_one_byte+0x2c>
/*inline*/ uint8_t i2c_tcn75_write_one_byte(uint8_t data)
{
	uint8_t mask, ack;

	sbi(DDRD, SDA); // SDA output
	for (mask = 0x80; mask; mask = mask >> 1)
    11d0:	96 95       	lsr	r25
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	30 40       	sbci	r19, 0x00	; 0
    11d6:	51 f7       	brne	.-44     	; 0x11ac <i2c_tcn75_write_one_byte+0x8>

		delay_us(1);
		sbi(PORTD, SCL); delay_us(1); // SCL <- H
	}

	cbi(DDRD, SDA); // SDA input
    11d8:	51 98       	cbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_us(1); // SCL <- L
    11da:	58 98       	cbi	0x0b, 0	; 11
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	8a 95       	dec	r24
    11e0:	f1 f7       	brne	.-4      	; 0x11de <i2c_tcn75_write_one_byte+0x3a>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <i2c_tcn75_write_one_byte+0x40>

	sbi(PORTD, SCL); delay_us(1); // SCL <- H
    11e4:	58 9a       	sbi	0x0b, 0	; 11
    11e6:	42 e0       	ldi	r20, 0x02	; 2
    11e8:	4a 95       	dec	r20
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <i2c_tcn75_write_one_byte+0x44>
    11ec:	00 c0       	rjmp	.+0      	; 0x11ee <i2c_tcn75_write_one_byte+0x4a>
	ack = PIND & (1 << SDA); // ack <- SDA read ack of TC75
    11ee:	89 b1       	in	r24, 0x09	; 9
	
	return(ack);
}
    11f0:	82 70       	andi	r24, 0x02	; 2
    11f2:	08 95       	ret

000011f4 <i2c_tcn75_read_one_byte>:

/*inline*/ uint8_t i2c_tcn75_read_one_byte(uint8_t ack)
{
    11f4:	28 2f       	mov	r18, r24
	uint8_t i, data = 0;

	cbi(DDRD, SDA); // SDA input
    11f6:	51 98       	cbi	0x0a, 1	; 10
    11f8:	98 e0       	ldi	r25, 0x08	; 8
	return(ack);
}

/*inline*/ uint8_t i2c_tcn75_read_one_byte(uint8_t ack)
{
	uint8_t i, data = 0;
    11fa:	80 e0       	ldi	r24, 0x00	; 0

	cbi(DDRD, SDA); // SDA input

	for (i = 0; i < 8; i++)
	{
		cbi(PORTD, SCL); delay_us(1); // SCL <- L
    11fc:	58 98       	cbi	0x0b, 0	; 11
    11fe:	32 e0       	ldi	r19, 0x02	; 2
    1200:	3a 95       	dec	r19
    1202:	f1 f7       	brne	.-4      	; 0x1200 <i2c_tcn75_read_one_byte+0xc>
    1204:	00 c0       	rjmp	.+0      	; 0x1206 <i2c_tcn75_read_one_byte+0x12>
		sbi(PORTD, SCL); delay_us(1); // SCL <- H
    1206:	58 9a       	sbi	0x0b, 0	; 11
    1208:	32 e0       	ldi	r19, 0x02	; 2
    120a:	3a 95       	dec	r19
    120c:	f1 f7       	brne	.-4      	; 0x120a <i2c_tcn75_read_one_byte+0x16>
    120e:	00 c0       	rjmp	.+0      	; 0x1210 <i2c_tcn75_read_one_byte+0x1c>

		data = (data << 1);
    1210:	88 0f       	add	r24, r24

		if (PIND & (1 << SDA)) 
    1212:	49 99       	sbic	0x09, 1	; 9
			data = data | 0x01; // data <- SDA
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	91 50       	subi	r25, 0x01	; 1
{
	uint8_t i, data = 0;

	cbi(DDRD, SDA); // SDA input

	for (i = 0; i < 8; i++)
    1218:	89 f7       	brne	.-30     	; 0x11fc <i2c_tcn75_read_one_byte+0x8>

		if (PIND & (1 << SDA)) 
			data = data | 0x01; // data <- SDA
	}

	sbi(DDRD, SDA); // SDA output, for sending ack
    121a:	51 9a       	sbi	0x0a, 1	; 10
	cbi(PORTD, SCL); delay_2nop(); // SCL <- L
    121c:	58 98       	cbi	0x0b, 0	; 11
    121e:	00 00       	nop
    1220:	00 00       	nop

	if (ack) 	
    1222:	22 23       	and	r18, r18
    1224:	11 f0       	breq	.+4      	; 0x122a <i2c_tcn75_read_one_byte+0x36>
		sbi(PORTD, SDA);
    1226:	59 9a       	sbi	0x0b, 1	; 11
    1228:	01 c0       	rjmp	.+2      	; 0x122c <i2c_tcn75_read_one_byte+0x38>
	else 
		cbi(PORTD, SDA); // SDA <- 0 or 1 (Ack or Nck)
    122a:	59 98       	cbi	0x0b, 1	; 11
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	9a 95       	dec	r25
    1230:	f1 f7       	brne	.-4      	; 0x122e <i2c_tcn75_read_one_byte+0x3a>
    1232:	00 c0       	rjmp	.+0      	; 0x1234 <i2c_tcn75_read_one_byte+0x40>

	delay_us(1);
	sbi(PORTD, SCL); delay_us(1); // SCL <- H
    1234:	58 9a       	sbi	0x0b, 0	; 11
    1236:	32 e0       	ldi	r19, 0x02	; 2
    1238:	3a 95       	dec	r19
    123a:	f1 f7       	brne	.-4      	; 0x1238 <i2c_tcn75_read_one_byte+0x44>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <i2c_tcn75_read_one_byte+0x4a>
	return(data);
}
    123e:	08 95       	ret

00001240 <__fixunssfsi>:
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	6b 01       	movw	r12, r22
    124e:	7c 01       	movw	r14, r24
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	5f e4       	ldi	r21, 0x4F	; 79
    1258:	0e 94 0e 0c 	call	0x181c	; 0x181c <__gesf2>
    125c:	87 fd       	sbrc	r24, 7
    125e:	11 c0       	rjmp	.+34     	; 0x1282 <__fixunssfsi+0x42>
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	5f e4       	ldi	r21, 0x4F	; 79
    126c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__subsf3>
    1270:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fixsfsi>
    1274:	8b 01       	movw	r16, r22
    1276:	9c 01       	movw	r18, r24
    1278:	00 50       	subi	r16, 0x00	; 0
    127a:	10 40       	sbci	r17, 0x00	; 0
    127c:	20 40       	sbci	r18, 0x00	; 0
    127e:	30 48       	sbci	r19, 0x80	; 128
    1280:	06 c0       	rjmp	.+12     	; 0x128e <__fixunssfsi+0x4e>
    1282:	c7 01       	movw	r24, r14
    1284:	b6 01       	movw	r22, r12
    1286:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fixsfsi>
    128a:	8b 01       	movw	r16, r22
    128c:	9c 01       	movw	r18, r24
    128e:	b8 01       	movw	r22, r16
    1290:	c9 01       	movw	r24, r18
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	08 95       	ret

000012a0 <_fpadd_parts>:
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e6 e5       	ldi	r30, 0x56	; 86
    12a6:	f9 e0       	ldi	r31, 0x09	; 9
    12a8:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__prologue_saves__+0x4>
    12ac:	ec 01       	movw	r28, r24
    12ae:	4b 01       	movw	r8, r22
    12b0:	fa 01       	movw	r30, r20
    12b2:	88 81       	ld	r24, Y
    12b4:	82 30       	cpi	r24, 0x02	; 2
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <_fpadd_parts+0x1a>
    12b8:	3e c1       	rjmp	.+636    	; 0x1536 <_fpadd_parts+0x296>
    12ba:	db 01       	movw	r26, r22
    12bc:	9c 91       	ld	r25, X
    12be:	92 30       	cpi	r25, 0x02	; 2
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <_fpadd_parts+0x24>
    12c2:	36 c1       	rjmp	.+620    	; 0x1530 <_fpadd_parts+0x290>
    12c4:	84 30       	cpi	r24, 0x04	; 4
    12c6:	59 f4       	brne	.+22     	; 0x12de <_fpadd_parts+0x3e>
    12c8:	94 30       	cpi	r25, 0x04	; 4
    12ca:	09 f0       	breq	.+2      	; 0x12ce <_fpadd_parts+0x2e>
    12cc:	34 c1       	rjmp	.+616    	; 0x1536 <_fpadd_parts+0x296>
    12ce:	99 81       	ldd	r25, Y+1	; 0x01
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	8c 91       	ld	r24, X
    12d4:	11 97       	sbiw	r26, 0x01	; 1
    12d6:	98 17       	cp	r25, r24
    12d8:	09 f0       	breq	.+2      	; 0x12dc <_fpadd_parts+0x3c>
    12da:	27 c1       	rjmp	.+590    	; 0x152a <_fpadd_parts+0x28a>
    12dc:	2c c1       	rjmp	.+600    	; 0x1536 <_fpadd_parts+0x296>
    12de:	94 30       	cpi	r25, 0x04	; 4
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <_fpadd_parts+0x44>
    12e2:	26 c1       	rjmp	.+588    	; 0x1530 <_fpadd_parts+0x290>
    12e4:	92 30       	cpi	r25, 0x02	; 2
    12e6:	a9 f4       	brne	.+42     	; 0x1312 <_fpadd_parts+0x72>
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	09 f0       	breq	.+2      	; 0x12ee <_fpadd_parts+0x4e>
    12ec:	24 c1       	rjmp	.+584    	; 0x1536 <_fpadd_parts+0x296>
    12ee:	ce 01       	movw	r24, r28
    12f0:	28 e0       	ldi	r18, 0x08	; 8
    12f2:	dc 01       	movw	r26, r24
    12f4:	0d 90       	ld	r0, X+
    12f6:	cd 01       	movw	r24, r26
    12f8:	da 01       	movw	r26, r20
    12fa:	0d 92       	st	X+, r0
    12fc:	ad 01       	movw	r20, r26
    12fe:	21 50       	subi	r18, 0x01	; 1
    1300:	c1 f7       	brne	.-16     	; 0x12f2 <_fpadd_parts+0x52>
    1302:	d4 01       	movw	r26, r8
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	8c 91       	ld	r24, X
    1308:	11 97       	sbiw	r26, 0x01	; 1
    130a:	99 81       	ldd	r25, Y+1	; 0x01
    130c:	89 23       	and	r24, r25
    130e:	81 83       	std	Z+1, r24	; 0x01
    1310:	11 c1       	rjmp	.+546    	; 0x1534 <_fpadd_parts+0x294>
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	09 f4       	brne	.+2      	; 0x1318 <_fpadd_parts+0x78>
    1316:	0c c1       	rjmp	.+536    	; 0x1530 <_fpadd_parts+0x290>
    1318:	aa 80       	ldd	r10, Y+2	; 0x02
    131a:	bb 80       	ldd	r11, Y+3	; 0x03
    131c:	db 01       	movw	r26, r22
    131e:	12 96       	adiw	r26, 0x02	; 2
    1320:	4d 91       	ld	r20, X+
    1322:	5c 91       	ld	r21, X
    1324:	13 97       	sbiw	r26, 0x03	; 3
    1326:	cc 80       	ldd	r12, Y+4	; 0x04
    1328:	dd 80       	ldd	r13, Y+5	; 0x05
    132a:	ee 80       	ldd	r14, Y+6	; 0x06
    132c:	ff 80       	ldd	r15, Y+7	; 0x07
    132e:	14 96       	adiw	r26, 0x04	; 4
    1330:	0d 91       	ld	r16, X+
    1332:	1d 91       	ld	r17, X+
    1334:	2d 91       	ld	r18, X+
    1336:	3c 91       	ld	r19, X
    1338:	17 97       	sbiw	r26, 0x07	; 7
    133a:	c5 01       	movw	r24, r10
    133c:	84 1b       	sub	r24, r20
    133e:	95 0b       	sbc	r25, r21
    1340:	dc 01       	movw	r26, r24
    1342:	97 ff       	sbrs	r25, 7
    1344:	04 c0       	rjmp	.+8      	; 0x134e <_fpadd_parts+0xae>
    1346:	aa 27       	eor	r26, r26
    1348:	bb 27       	eor	r27, r27
    134a:	a8 1b       	sub	r26, r24
    134c:	b9 0b       	sbc	r27, r25
    134e:	a0 32       	cpi	r26, 0x20	; 32
    1350:	b1 05       	cpc	r27, r1
    1352:	0c f0       	brlt	.+2      	; 0x1356 <_fpadd_parts+0xb6>
    1354:	67 c0       	rjmp	.+206    	; 0x1424 <_fpadd_parts+0x184>
    1356:	18 16       	cp	r1, r24
    1358:	19 06       	cpc	r1, r25
    135a:	84 f5       	brge	.+96     	; 0x13bc <_fpadd_parts+0x11c>
    135c:	28 01       	movw	r4, r16
    135e:	39 01       	movw	r6, r18
    1360:	0a 2e       	mov	r0, r26
    1362:	04 c0       	rjmp	.+8      	; 0x136c <_fpadd_parts+0xcc>
    1364:	76 94       	lsr	r7
    1366:	67 94       	ror	r6
    1368:	57 94       	ror	r5
    136a:	47 94       	ror	r4
    136c:	0a 94       	dec	r0
    136e:	d2 f7       	brpl	.-12     	; 0x1364 <_fpadd_parts+0xc4>
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <_fpadd_parts+0xe2>
    137a:	44 0f       	add	r20, r20
    137c:	55 1f       	adc	r21, r21
    137e:	66 1f       	adc	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	aa 95       	dec	r26
    1384:	d2 f7       	brpl	.-12     	; 0x137a <_fpadd_parts+0xda>
    1386:	41 50       	subi	r20, 0x01	; 1
    1388:	50 40       	sbci	r21, 0x00	; 0
    138a:	60 40       	sbci	r22, 0x00	; 0
    138c:	70 40       	sbci	r23, 0x00	; 0
    138e:	40 23       	and	r20, r16
    1390:	51 23       	and	r21, r17
    1392:	62 23       	and	r22, r18
    1394:	73 23       	and	r23, r19
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	41 15       	cp	r20, r1
    13a0:	51 05       	cpc	r21, r1
    13a2:	61 05       	cpc	r22, r1
    13a4:	71 05       	cpc	r23, r1
    13a6:	19 f4       	brne	.+6      	; 0x13ae <_fpadd_parts+0x10e>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	dc 01       	movw	r26, r24
    13ae:	8c 01       	movw	r16, r24
    13b0:	9d 01       	movw	r18, r26
    13b2:	04 29       	or	r16, r4
    13b4:	15 29       	or	r17, r5
    13b6:	26 29       	or	r18, r6
    13b8:	37 29       	or	r19, r7
    13ba:	3f c0       	rjmp	.+126    	; 0x143a <_fpadd_parts+0x19a>
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	e9 f1       	breq	.+122    	; 0x143a <_fpadd_parts+0x19a>
    13c0:	aa 0e       	add	r10, r26
    13c2:	bb 1e       	adc	r11, r27
    13c4:	26 01       	movw	r4, r12
    13c6:	37 01       	movw	r6, r14
    13c8:	0a 2e       	mov	r0, r26
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <_fpadd_parts+0x134>
    13cc:	76 94       	lsr	r7
    13ce:	67 94       	ror	r6
    13d0:	57 94       	ror	r5
    13d2:	47 94       	ror	r4
    13d4:	0a 94       	dec	r0
    13d6:	d2 f7       	brpl	.-12     	; 0x13cc <_fpadd_parts+0x12c>
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <_fpadd_parts+0x14a>
    13e2:	44 0f       	add	r20, r20
    13e4:	55 1f       	adc	r21, r21
    13e6:	66 1f       	adc	r22, r22
    13e8:	77 1f       	adc	r23, r23
    13ea:	aa 95       	dec	r26
    13ec:	d2 f7       	brpl	.-12     	; 0x13e2 <_fpadd_parts+0x142>
    13ee:	41 50       	subi	r20, 0x01	; 1
    13f0:	50 40       	sbci	r21, 0x00	; 0
    13f2:	60 40       	sbci	r22, 0x00	; 0
    13f4:	70 40       	sbci	r23, 0x00	; 0
    13f6:	4c 21       	and	r20, r12
    13f8:	5d 21       	and	r21, r13
    13fa:	6e 21       	and	r22, r14
    13fc:	7f 21       	and	r23, r15
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	41 15       	cp	r20, r1
    1408:	51 05       	cpc	r21, r1
    140a:	61 05       	cpc	r22, r1
    140c:	71 05       	cpc	r23, r1
    140e:	19 f4       	brne	.+6      	; 0x1416 <_fpadd_parts+0x176>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	dc 01       	movw	r26, r24
    1416:	6c 01       	movw	r12, r24
    1418:	7d 01       	movw	r14, r26
    141a:	c4 28       	or	r12, r4
    141c:	d5 28       	or	r13, r5
    141e:	e6 28       	or	r14, r6
    1420:	f7 28       	or	r15, r7
    1422:	0b c0       	rjmp	.+22     	; 0x143a <_fpadd_parts+0x19a>
    1424:	4a 15       	cp	r20, r10
    1426:	5b 05       	cpc	r21, r11
    1428:	24 f4       	brge	.+8      	; 0x1432 <_fpadd_parts+0x192>
    142a:	00 e0       	ldi	r16, 0x00	; 0
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	98 01       	movw	r18, r16
    1430:	04 c0       	rjmp	.+8      	; 0x143a <_fpadd_parts+0x19a>
    1432:	5a 01       	movw	r10, r20
    1434:	cc 24       	eor	r12, r12
    1436:	dd 24       	eor	r13, r13
    1438:	76 01       	movw	r14, r12
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	d4 01       	movw	r26, r8
    143e:	11 96       	adiw	r26, 0x01	; 1
    1440:	9c 91       	ld	r25, X
    1442:	11 97       	sbiw	r26, 0x01	; 1
    1444:	89 17       	cp	r24, r25
    1446:	09 f4       	brne	.+2      	; 0x144a <_fpadd_parts+0x1aa>
    1448:	45 c0       	rjmp	.+138    	; 0x14d4 <_fpadd_parts+0x234>
    144a:	88 23       	and	r24, r24
    144c:	29 f0       	breq	.+10     	; 0x1458 <_fpadd_parts+0x1b8>
    144e:	0c 19       	sub	r16, r12
    1450:	1d 09       	sbc	r17, r13
    1452:	2e 09       	sbc	r18, r14
    1454:	3f 09       	sbc	r19, r15
    1456:	08 c0       	rjmp	.+16     	; 0x1468 <_fpadd_parts+0x1c8>
    1458:	d7 01       	movw	r26, r14
    145a:	c6 01       	movw	r24, r12
    145c:	80 1b       	sub	r24, r16
    145e:	91 0b       	sbc	r25, r17
    1460:	a2 0b       	sbc	r26, r18
    1462:	b3 0b       	sbc	r27, r19
    1464:	8c 01       	movw	r16, r24
    1466:	9d 01       	movw	r18, r26
    1468:	37 fd       	sbrc	r19, 7
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <_fpadd_parts+0x1d4>
    146c:	11 82       	std	Z+1, r1	; 0x01
    146e:	b3 82       	std	Z+3, r11	; 0x03
    1470:	a2 82       	std	Z+2, r10	; 0x02
    1472:	0b c0       	rjmp	.+22     	; 0x148a <_fpadd_parts+0x1ea>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	81 83       	std	Z+1, r24	; 0x01
    1478:	b3 82       	std	Z+3, r11	; 0x03
    147a:	a2 82       	std	Z+2, r10	; 0x02
    147c:	30 95       	com	r19
    147e:	20 95       	com	r18
    1480:	10 95       	com	r17
    1482:	01 95       	neg	r16
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	2f 4f       	sbci	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	04 83       	std	Z+4, r16	; 0x04
    148c:	15 83       	std	Z+5, r17	; 0x05
    148e:	26 83       	std	Z+6, r18	; 0x06
    1490:	37 83       	std	Z+7, r19	; 0x07
    1492:	0d c0       	rjmp	.+26     	; 0x14ae <_fpadd_parts+0x20e>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	aa 1f       	adc	r26, r26
    149a:	bb 1f       	adc	r27, r27
    149c:	84 83       	std	Z+4, r24	; 0x04
    149e:	95 83       	std	Z+5, r25	; 0x05
    14a0:	a6 83       	std	Z+6, r26	; 0x06
    14a2:	b7 83       	std	Z+7, r27	; 0x07
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	93 83       	std	Z+3, r25	; 0x03
    14ac:	82 83       	std	Z+2, r24	; 0x02
    14ae:	84 81       	ldd	r24, Z+4	; 0x04
    14b0:	95 81       	ldd	r25, Z+5	; 0x05
    14b2:	a6 81       	ldd	r26, Z+6	; 0x06
    14b4:	b7 81       	ldd	r27, Z+7	; 0x07
    14b6:	ac 01       	movw	r20, r24
    14b8:	bd 01       	movw	r22, r26
    14ba:	41 50       	subi	r20, 0x01	; 1
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	60 40       	sbci	r22, 0x00	; 0
    14c0:	70 40       	sbci	r23, 0x00	; 0
    14c2:	4f 3f       	cpi	r20, 0xFF	; 255
    14c4:	2f ef       	ldi	r18, 0xFF	; 255
    14c6:	52 07       	cpc	r21, r18
    14c8:	2f ef       	ldi	r18, 0xFF	; 255
    14ca:	62 07       	cpc	r22, r18
    14cc:	2f e3       	ldi	r18, 0x3F	; 63
    14ce:	72 07       	cpc	r23, r18
    14d0:	08 f3       	brcs	.-62     	; 0x1494 <_fpadd_parts+0x1f4>
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <_fpadd_parts+0x24a>
    14d4:	81 83       	std	Z+1, r24	; 0x01
    14d6:	b3 82       	std	Z+3, r11	; 0x03
    14d8:	a2 82       	std	Z+2, r10	; 0x02
    14da:	0c 0d       	add	r16, r12
    14dc:	1d 1d       	adc	r17, r13
    14de:	2e 1d       	adc	r18, r14
    14e0:	3f 1d       	adc	r19, r15
    14e2:	04 83       	std	Z+4, r16	; 0x04
    14e4:	15 83       	std	Z+5, r17	; 0x05
    14e6:	26 83       	std	Z+6, r18	; 0x06
    14e8:	37 83       	std	Z+7, r19	; 0x07
    14ea:	83 e0       	ldi	r24, 0x03	; 3
    14ec:	80 83       	st	Z, r24
    14ee:	44 81       	ldd	r20, Z+4	; 0x04
    14f0:	55 81       	ldd	r21, Z+5	; 0x05
    14f2:	66 81       	ldd	r22, Z+6	; 0x06
    14f4:	77 81       	ldd	r23, Z+7	; 0x07
    14f6:	77 ff       	sbrs	r23, 7
    14f8:	1d c0       	rjmp	.+58     	; 0x1534 <_fpadd_parts+0x294>
    14fa:	db 01       	movw	r26, r22
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	90 70       	andi	r25, 0x00	; 0
    1502:	a0 70       	andi	r26, 0x00	; 0
    1504:	b0 70       	andi	r27, 0x00	; 0
    1506:	76 95       	lsr	r23
    1508:	67 95       	ror	r22
    150a:	57 95       	ror	r21
    150c:	47 95       	ror	r20
    150e:	84 2b       	or	r24, r20
    1510:	95 2b       	or	r25, r21
    1512:	a6 2b       	or	r26, r22
    1514:	b7 2b       	or	r27, r23
    1516:	84 83       	std	Z+4, r24	; 0x04
    1518:	95 83       	std	Z+5, r25	; 0x05
    151a:	a6 83       	std	Z+6, r26	; 0x06
    151c:	b7 83       	std	Z+7, r27	; 0x07
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	93 83       	std	Z+3, r25	; 0x03
    1526:	82 83       	std	Z+2, r24	; 0x02
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <_fpadd_parts+0x294>
    152a:	cd e8       	ldi	r28, 0x8D	; 141
    152c:	d4 e0       	ldi	r29, 0x04	; 4
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <_fpadd_parts+0x296>
    1530:	e4 01       	movw	r28, r8
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <_fpadd_parts+0x296>
    1534:	ef 01       	movw	r28, r30
    1536:	ce 01       	movw	r24, r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	e0 e1       	ldi	r30, 0x10	; 16
    153e:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__+0x4>

00001542 <__addsf3>:
    1542:	a0 e2       	ldi	r26, 0x20	; 32
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__prologue_saves__+0x20>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	af 83       	std	Y+7, r26	; 0x07
    1558:	b8 87       	std	Y+8, r27	; 0x08
    155a:	29 83       	std	Y+1, r18	; 0x01
    155c:	3a 83       	std	Y+2, r19	; 0x02
    155e:	4b 83       	std	Y+3, r20	; 0x03
    1560:	5c 83       	std	Y+4, r21	; 0x04
    1562:	ce 01       	movw	r24, r28
    1564:	05 96       	adiw	r24, 0x05	; 5
    1566:	be 01       	movw	r22, r28
    1568:	67 5e       	subi	r22, 0xE7	; 231
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    1570:	ce 01       	movw	r24, r28
    1572:	01 96       	adiw	r24, 0x01	; 1
    1574:	be 01       	movw	r22, r28
    1576:	6f 5e       	subi	r22, 0xEF	; 239
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    157e:	ce 01       	movw	r24, r28
    1580:	49 96       	adiw	r24, 0x19	; 25
    1582:	be 01       	movw	r22, r28
    1584:	6f 5e       	subi	r22, 0xEF	; 239
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	ae 01       	movw	r20, r28
    158a:	47 5f       	subi	r20, 0xF7	; 247
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_fpadd_parts>
    1592:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__pack_f>
    1596:	46 2f       	mov	r20, r22
    1598:	57 2f       	mov	r21, r23
    159a:	68 2f       	mov	r22, r24
    159c:	79 2f       	mov	r23, r25
    159e:	cb 01       	movw	r24, r22
    15a0:	ba 01       	movw	r22, r20
    15a2:	a0 96       	adiw	r28, 0x20	; 32
    15a4:	e2 e0       	ldi	r30, 0x02	; 2
    15a6:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__+0x20>

000015aa <__subsf3>:
    15aa:	a0 e2       	ldi	r26, 0x20	; 32
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb ed       	ldi	r30, 0xDB	; 219
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__prologue_saves__+0x20>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	8d 83       	std	Y+5, r24	; 0x05
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	af 83       	std	Y+7, r26	; 0x07
    15c0:	b8 87       	std	Y+8, r27	; 0x08
    15c2:	29 83       	std	Y+1, r18	; 0x01
    15c4:	3a 83       	std	Y+2, r19	; 0x02
    15c6:	4b 83       	std	Y+3, r20	; 0x03
    15c8:	5c 83       	std	Y+4, r21	; 0x04
    15ca:	ce 01       	movw	r24, r28
    15cc:	05 96       	adiw	r24, 0x05	; 5
    15ce:	be 01       	movw	r22, r28
    15d0:	67 5e       	subi	r22, 0xE7	; 231
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	be 01       	movw	r22, r28
    15de:	6f 5e       	subi	r22, 0xEF	; 239
    15e0:	7f 4f       	sbci	r23, 0xFF	; 255
    15e2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    15e6:	8a 89       	ldd	r24, Y+18	; 0x12
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	89 27       	eor	r24, r25
    15ec:	8a 8b       	std	Y+18, r24	; 0x12
    15ee:	ce 01       	movw	r24, r28
    15f0:	49 96       	adiw	r24, 0x19	; 25
    15f2:	be 01       	movw	r22, r28
    15f4:	6f 5e       	subi	r22, 0xEF	; 239
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	ae 01       	movw	r20, r28
    15fa:	47 5f       	subi	r20, 0xF7	; 247
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255
    15fe:	0e 94 50 09 	call	0x12a0	; 0x12a0 <_fpadd_parts>
    1602:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__pack_f>
    1606:	46 2f       	mov	r20, r22
    1608:	57 2f       	mov	r21, r23
    160a:	68 2f       	mov	r22, r24
    160c:	79 2f       	mov	r23, r25
    160e:	cb 01       	movw	r24, r22
    1610:	ba 01       	movw	r22, r20
    1612:	a0 96       	adiw	r28, 0x20	; 32
    1614:	e2 e0       	ldi	r30, 0x02	; 2
    1616:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__+0x20>

0000161a <__mulsf3>:
    161a:	a0 e2       	ldi	r26, 0x20	; 32
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e3 e1       	ldi	r30, 0x13	; 19
    1620:	fb e0       	ldi	r31, 0x0B	; 11
    1622:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__prologue_saves__+0x4>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8d 83       	std	Y+5, r24	; 0x05
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	af 83       	std	Y+7, r26	; 0x07
    1630:	b8 87       	std	Y+8, r27	; 0x08
    1632:	29 83       	std	Y+1, r18	; 0x01
    1634:	3a 83       	std	Y+2, r19	; 0x02
    1636:	4b 83       	std	Y+3, r20	; 0x03
    1638:	5c 83       	std	Y+4, r21	; 0x04
    163a:	ce 01       	movw	r24, r28
    163c:	05 96       	adiw	r24, 0x05	; 5
    163e:	be 01       	movw	r22, r28
    1640:	67 5e       	subi	r22, 0xE7	; 231
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    1648:	ce 01       	movw	r24, r28
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	be 01       	movw	r22, r28
    164e:	6f 5e       	subi	r22, 0xEF	; 239
    1650:	7f 4f       	sbci	r23, 0xFF	; 255
    1652:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    1656:	99 8d       	ldd	r25, Y+25	; 0x19
    1658:	92 30       	cpi	r25, 0x02	; 2
    165a:	78 f0       	brcs	.+30     	; 0x167a <__mulsf3+0x60>
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	c0 f0       	brcs	.+48     	; 0x1692 <__mulsf3+0x78>
    1662:	94 30       	cpi	r25, 0x04	; 4
    1664:	19 f4       	brne	.+6      	; 0x166c <__mulsf3+0x52>
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	41 f4       	brne	.+16     	; 0x167a <__mulsf3+0x60>
    166a:	ca c0       	rjmp	.+404    	; 0x1800 <__mulsf3+0x1e6>
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	19 f4       	brne	.+6      	; 0x1676 <__mulsf3+0x5c>
    1670:	92 30       	cpi	r25, 0x02	; 2
    1672:	79 f4       	brne	.+30     	; 0x1692 <__mulsf3+0x78>
    1674:	c5 c0       	rjmp	.+394    	; 0x1800 <__mulsf3+0x1e6>
    1676:	92 30       	cpi	r25, 0x02	; 2
    1678:	51 f4       	brne	.+20     	; 0x168e <__mulsf3+0x74>
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    167e:	9a 89       	ldd	r25, Y+18	; 0x12
    1680:	29 17       	cp	r18, r25
    1682:	09 f4       	brne	.+2      	; 0x1686 <__mulsf3+0x6c>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	8a 8f       	std	Y+26, r24	; 0x1a
    1688:	ce 01       	movw	r24, r28
    168a:	49 96       	adiw	r24, 0x19	; 25
    168c:	bb c0       	rjmp	.+374    	; 0x1804 <__mulsf3+0x1ea>
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	51 f4       	brne	.+20     	; 0x16a6 <__mulsf3+0x8c>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1696:	9a 89       	ldd	r25, Y+18	; 0x12
    1698:	29 17       	cp	r18, r25
    169a:	09 f4       	brne	.+2      	; 0x169e <__mulsf3+0x84>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	8a 8b       	std	Y+18, r24	; 0x12
    16a0:	ce 01       	movw	r24, r28
    16a2:	41 96       	adiw	r24, 0x11	; 17
    16a4:	af c0       	rjmp	.+350    	; 0x1804 <__mulsf3+0x1ea>
    16a6:	4d 8c       	ldd	r4, Y+29	; 0x1d
    16a8:	5e 8c       	ldd	r5, Y+30	; 0x1e
    16aa:	6f 8c       	ldd	r6, Y+31	; 0x1f
    16ac:	78 a0       	lds	r23, 0x88
    16ae:	0d 89       	ldd	r16, Y+21	; 0x15
    16b0:	1e 89       	ldd	r17, Y+22	; 0x16
    16b2:	2f 89       	ldd	r18, Y+23	; 0x17
    16b4:	38 8d       	ldd	r19, Y+24	; 0x18
    16b6:	e0 e2       	ldi	r30, 0x20	; 32
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	ba 01       	movw	r22, r20
    16c0:	88 24       	eor	r8, r8
    16c2:	99 24       	eor	r9, r9
    16c4:	54 01       	movw	r10, r8
    16c6:	cc 24       	eor	r12, r12
    16c8:	dd 24       	eor	r13, r13
    16ca:	76 01       	movw	r14, r12
    16cc:	c2 01       	movw	r24, r4
    16ce:	81 70       	andi	r24, 0x01	; 1
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	d1 f0       	breq	.+52     	; 0x170a <__mulsf3+0xf0>
    16d6:	c0 0e       	add	r12, r16
    16d8:	d1 1e       	adc	r13, r17
    16da:	e2 1e       	adc	r14, r18
    16dc:	f3 1e       	adc	r15, r19
    16de:	db 01       	movw	r26, r22
    16e0:	ca 01       	movw	r24, r20
    16e2:	88 0d       	add	r24, r8
    16e4:	99 1d       	adc	r25, r9
    16e6:	aa 1d       	adc	r26, r10
    16e8:	bb 1d       	adc	r27, r11
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	50 e0       	ldi	r21, 0x00	; 0
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	c0 16       	cp	r12, r16
    16f4:	d1 06       	cpc	r13, r17
    16f6:	e2 06       	cpc	r14, r18
    16f8:	f3 06       	cpc	r15, r19
    16fa:	18 f0       	brcs	.+6      	; 0x1702 <__mulsf3+0xe8>
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	ba 01       	movw	r22, r20
    1702:	48 0f       	add	r20, r24
    1704:	59 1f       	adc	r21, r25
    1706:	6a 1f       	adc	r22, r26
    1708:	7b 1f       	adc	r23, r27
    170a:	88 0c       	add	r8, r8
    170c:	99 1c       	adc	r9, r9
    170e:	aa 1c       	adc	r10, r10
    1710:	bb 1c       	adc	r11, r11
    1712:	37 ff       	sbrs	r19, 7
    1714:	08 c0       	rjmp	.+16     	; 0x1726 <__mulsf3+0x10c>
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a0 e0       	ldi	r26, 0x00	; 0
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	88 2a       	or	r8, r24
    1720:	99 2a       	or	r9, r25
    1722:	aa 2a       	or	r10, r26
    1724:	bb 2a       	or	r11, r27
    1726:	00 0f       	add	r16, r16
    1728:	11 1f       	adc	r17, r17
    172a:	22 1f       	adc	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	76 94       	lsr	r7
    1730:	67 94       	ror	r6
    1732:	57 94       	ror	r5
    1734:	47 94       	ror	r4
    1736:	31 97       	sbiw	r30, 0x01	; 1
    1738:	49 f6       	brne	.-110    	; 0x16cc <__mulsf3+0xb2>
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	2b 89       	ldd	r18, Y+19	; 0x13
    1740:	3c 89       	ldd	r19, Y+20	; 0x14
    1742:	82 0f       	add	r24, r18
    1744:	93 1f       	adc	r25, r19
    1746:	02 96       	adiw	r24, 0x02	; 2
    1748:	9c 87       	std	Y+12, r25	; 0x0c
    174a:	8b 87       	std	Y+11, r24	; 0x0b
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1750:	9a 89       	ldd	r25, Y+18	; 0x12
    1752:	29 17       	cp	r18, r25
    1754:	09 f4       	brne	.+2      	; 0x1758 <__mulsf3+0x13e>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	8a 87       	std	Y+10, r24	; 0x0a
    175a:	2b 85       	ldd	r18, Y+11	; 0x0b
    175c:	3c 85       	ldd	r19, Y+12	; 0x0c
    175e:	17 c0       	rjmp	.+46     	; 0x178e <__mulsf3+0x174>
    1760:	ca 01       	movw	r24, r20
    1762:	81 70       	andi	r24, 0x01	; 1
    1764:	90 70       	andi	r25, 0x00	; 0
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	61 f0       	breq	.+24     	; 0x1782 <__mulsf3+0x168>
    176a:	f6 94       	lsr	r15
    176c:	e7 94       	ror	r14
    176e:	d7 94       	ror	r13
    1770:	c7 94       	ror	r12
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b0 e8       	ldi	r27, 0x80	; 128
    177a:	c8 2a       	or	r12, r24
    177c:	d9 2a       	or	r13, r25
    177e:	ea 2a       	or	r14, r26
    1780:	fb 2a       	or	r15, r27
    1782:	76 95       	lsr	r23
    1784:	67 95       	ror	r22
    1786:	57 95       	ror	r21
    1788:	47 95       	ror	r20
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	77 fd       	sbrc	r23, 7
    1790:	e7 cf       	rjmp	.-50     	; 0x1760 <__mulsf3+0x146>
    1792:	c9 01       	movw	r24, r18
    1794:	0b c0       	rjmp	.+22     	; 0x17ac <__mulsf3+0x192>
    1796:	44 0f       	add	r20, r20
    1798:	55 1f       	adc	r21, r21
    179a:	66 1f       	adc	r22, r22
    179c:	77 1f       	adc	r23, r23
    179e:	f7 fc       	sbrc	r15, 7
    17a0:	41 60       	ori	r20, 0x01	; 1
    17a2:	cc 0c       	add	r12, r12
    17a4:	dd 1c       	adc	r13, r13
    17a6:	ee 1c       	adc	r14, r14
    17a8:	ff 1c       	adc	r15, r15
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	40 30       	cpi	r20, 0x00	; 0
    17ae:	a0 e0       	ldi	r26, 0x00	; 0
    17b0:	5a 07       	cpc	r21, r26
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	6a 07       	cpc	r22, r26
    17b6:	a0 e4       	ldi	r26, 0x40	; 64
    17b8:	7a 07       	cpc	r23, r26
    17ba:	68 f3       	brcs	.-38     	; 0x1796 <__mulsf3+0x17c>
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	9c 87       	std	Y+12, r25	; 0x0c
    17c0:	db 01       	movw	r26, r22
    17c2:	ca 01       	movw	r24, r20
    17c4:	8f 77       	andi	r24, 0x7F	; 127
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	a0 70       	andi	r26, 0x00	; 0
    17ca:	b0 70       	andi	r27, 0x00	; 0
    17cc:	80 34       	cpi	r24, 0x40	; 64
    17ce:	91 05       	cpc	r25, r1
    17d0:	a1 05       	cpc	r26, r1
    17d2:	b1 05       	cpc	r27, r1
    17d4:	61 f4       	brne	.+24     	; 0x17ee <__mulsf3+0x1d4>
    17d6:	47 fd       	sbrc	r20, 7
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <__mulsf3+0x1d4>
    17da:	c1 14       	cp	r12, r1
    17dc:	d1 04       	cpc	r13, r1
    17de:	e1 04       	cpc	r14, r1
    17e0:	f1 04       	cpc	r15, r1
    17e2:	29 f0       	breq	.+10     	; 0x17ee <__mulsf3+0x1d4>
    17e4:	40 5c       	subi	r20, 0xC0	; 192
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	6f 4f       	sbci	r22, 0xFF	; 255
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	40 78       	andi	r20, 0x80	; 128
    17ee:	4d 87       	std	Y+13, r20	; 0x0d
    17f0:	5e 87       	std	Y+14, r21	; 0x0e
    17f2:	6f 87       	std	Y+15, r22	; 0x0f
    17f4:	78 8b       	std	Y+16, r23	; 0x10
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	89 87       	std	Y+9, r24	; 0x09
    17fa:	ce 01       	movw	r24, r28
    17fc:	09 96       	adiw	r24, 0x09	; 9
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <__mulsf3+0x1ea>
    1800:	8d e8       	ldi	r24, 0x8D	; 141
    1802:	94 e0       	ldi	r25, 0x04	; 4
    1804:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__pack_f>
    1808:	46 2f       	mov	r20, r22
    180a:	57 2f       	mov	r21, r23
    180c:	68 2f       	mov	r22, r24
    180e:	79 2f       	mov	r23, r25
    1810:	cb 01       	movw	r24, r22
    1812:	ba 01       	movw	r22, r20
    1814:	a0 96       	adiw	r28, 0x20	; 32
    1816:	e0 e1       	ldi	r30, 0x10	; 16
    1818:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__+0x4>

0000181c <__gesf2>:
    181c:	a8 e1       	ldi	r26, 0x18	; 24
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e4 e1       	ldi	r30, 0x14	; 20
    1822:	fc e0       	ldi	r31, 0x0C	; 12
    1824:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <__prologue_saves__+0x20>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	af 83       	std	Y+7, r26	; 0x07
    1832:	b8 87       	std	Y+8, r27	; 0x08
    1834:	29 83       	std	Y+1, r18	; 0x01
    1836:	3a 83       	std	Y+2, r19	; 0x02
    1838:	4b 83       	std	Y+3, r20	; 0x03
    183a:	5c 83       	std	Y+4, r21	; 0x04
    183c:	ce 01       	movw	r24, r28
    183e:	05 96       	adiw	r24, 0x05	; 5
    1840:	be 01       	movw	r22, r28
    1842:	6f 5e       	subi	r22, 0xEF	; 239
    1844:	7f 4f       	sbci	r23, 0xFF	; 255
    1846:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    184a:	ce 01       	movw	r24, r28
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	be 01       	movw	r22, r28
    1850:	67 5f       	subi	r22, 0xF7	; 247
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    1858:	89 89       	ldd	r24, Y+17	; 0x11
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	58 f0       	brcs	.+22     	; 0x1874 <__gesf2+0x58>
    185e:	89 85       	ldd	r24, Y+9	; 0x09
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	40 f0       	brcs	.+16     	; 0x1874 <__gesf2+0x58>
    1864:	ce 01       	movw	r24, r28
    1866:	41 96       	adiw	r24, 0x11	; 17
    1868:	be 01       	movw	r22, r28
    186a:	67 5f       	subi	r22, 0xF7	; 247
    186c:	7f 4f       	sbci	r23, 0xFF	; 255
    186e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <__fpcmp_parts_f>
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <__gesf2+0x5a>
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	68 96       	adiw	r28, 0x18	; 24
    1878:	e2 e0       	ldi	r30, 0x02	; 2
    187a:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__epilogue_restores__+0x20>

0000187e <__floatsisf>:
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	28 97       	sbiw	r28, 0x08	; 8
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	6b 01       	movw	r12, r22
    189c:	7c 01       	movw	r14, r24
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	d7 01       	movw	r26, r14
    18a4:	c6 01       	movw	r24, r12
    18a6:	88 27       	eor	r24, r24
    18a8:	b7 fd       	sbrc	r27, 7
    18aa:	83 95       	inc	r24
    18ac:	99 27       	eor	r25, r25
    18ae:	aa 27       	eor	r26, r26
    18b0:	bb 27       	eor	r27, r27
    18b2:	28 2f       	mov	r18, r24
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	c1 14       	cp	r12, r1
    18b8:	d1 04       	cpc	r13, r1
    18ba:	e1 04       	cpc	r14, r1
    18bc:	f1 04       	cpc	r15, r1
    18be:	19 f4       	brne	.+6      	; 0x18c6 <__floatsisf+0x48>
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	35 c0       	rjmp	.+106    	; 0x1930 <__floatsisf+0xb2>
    18c6:	8e e1       	ldi	r24, 0x1E	; 30
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	22 23       	and	r18, r18
    18d0:	89 f0       	breq	.+34     	; 0x18f4 <__floatsisf+0x76>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	c8 16       	cp	r12, r24
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	d8 06       	cpc	r13, r24
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	e8 06       	cpc	r14, r24
    18de:	80 e8       	ldi	r24, 0x80	; 128
    18e0:	f8 06       	cpc	r15, r24
    18e2:	59 f1       	breq	.+86     	; 0x193a <__floatsisf+0xbc>
    18e4:	f0 94       	com	r15
    18e6:	e0 94       	com	r14
    18e8:	d0 94       	com	r13
    18ea:	c0 94       	com	r12
    18ec:	c1 1c       	adc	r12, r1
    18ee:	d1 1c       	adc	r13, r1
    18f0:	e1 1c       	adc	r14, r1
    18f2:	f1 1c       	adc	r15, r1
    18f4:	cd 82       	std	Y+5, r12	; 0x05
    18f6:	de 82       	std	Y+6, r13	; 0x06
    18f8:	ef 82       	std	Y+7, r14	; 0x07
    18fa:	f8 86       	std	Y+8, r15	; 0x08
    18fc:	c7 01       	movw	r24, r14
    18fe:	b6 01       	movw	r22, r12
    1900:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__clzsi2>
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	18 16       	cp	r1, r24
    1908:	19 06       	cpc	r1, r25
    190a:	94 f4       	brge	.+36     	; 0x1930 <__floatsisf+0xb2>
    190c:	08 2e       	mov	r0, r24
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <__floatsisf+0x9a>
    1910:	cc 0c       	add	r12, r12
    1912:	dd 1c       	adc	r13, r13
    1914:	ee 1c       	adc	r14, r14
    1916:	ff 1c       	adc	r15, r15
    1918:	0a 94       	dec	r0
    191a:	d2 f7       	brpl	.-12     	; 0x1910 <__floatsisf+0x92>
    191c:	cd 82       	std	Y+5, r12	; 0x05
    191e:	de 82       	std	Y+6, r13	; 0x06
    1920:	ef 82       	std	Y+7, r14	; 0x07
    1922:	f8 86       	std	Y+8, r15	; 0x08
    1924:	2e e1       	ldi	r18, 0x1E	; 30
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	28 1b       	sub	r18, r24
    192a:	39 0b       	sbc	r19, r25
    192c:	3c 83       	std	Y+4, r19	; 0x04
    192e:	2b 83       	std	Y+3, r18	; 0x03
    1930:	ce 01       	movw	r24, r28
    1932:	01 96       	adiw	r24, 0x01	; 1
    1934:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__pack_f>
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <__floatsisf+0xc4>
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	9f ec       	ldi	r25, 0xCF	; 207
    1942:	38 2f       	mov	r19, r24
    1944:	29 2f       	mov	r18, r25
    1946:	86 2f       	mov	r24, r22
    1948:	97 2f       	mov	r25, r23
    194a:	a3 2f       	mov	r26, r19
    194c:	b2 2f       	mov	r27, r18
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	28 96       	adiw	r28, 0x08	; 8
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	08 95       	ret

0000196c <__fixsfsi>:
    196c:	ac e0       	ldi	r26, 0x0C	; 12
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ec eb       	ldi	r30, 0xBC	; 188
    1972:	fc e0       	ldi	r31, 0x0C	; 12
    1974:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__prologue_saves__+0x1c>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	ab 83       	std	Y+3, r26	; 0x03
    1982:	bc 83       	std	Y+4, r27	; 0x04
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	be 01       	movw	r22, r28
    198a:	6b 5f       	subi	r22, 0xFB	; 251
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__unpack_f>
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	69 f1       	breq	.+90     	; 0x19f2 <__fixsfsi+0x86>
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	58 f1       	brcs	.+86     	; 0x19f2 <__fixsfsi+0x86>
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	39 f0       	breq	.+14     	; 0x19ae <__fixsfsi+0x42>
    19a0:	2f 81       	ldd	r18, Y+7	; 0x07
    19a2:	38 85       	ldd	r19, Y+8	; 0x08
    19a4:	37 fd       	sbrc	r19, 7
    19a6:	25 c0       	rjmp	.+74     	; 0x19f2 <__fixsfsi+0x86>
    19a8:	2f 31       	cpi	r18, 0x1F	; 31
    19aa:	31 05       	cpc	r19, r1
    19ac:	44 f0       	brlt	.+16     	; 0x19be <__fixsfsi+0x52>
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	88 23       	and	r24, r24
    19b2:	19 f1       	breq	.+70     	; 0x19fa <__fixsfsi+0x8e>
    19b4:	00 e0       	ldi	r16, 0x00	; 0
    19b6:	10 e0       	ldi	r17, 0x00	; 0
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e8       	ldi	r19, 0x80	; 128
    19bc:	22 c0       	rjmp	.+68     	; 0x1a02 <__fixsfsi+0x96>
    19be:	8e e1       	ldi	r24, 0x1E	; 30
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	82 1b       	sub	r24, r18
    19c4:	93 0b       	sbc	r25, r19
    19c6:	09 85       	ldd	r16, Y+9	; 0x09
    19c8:	1a 85       	ldd	r17, Y+10	; 0x0a
    19ca:	2b 85       	ldd	r18, Y+11	; 0x0b
    19cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <__fixsfsi+0x6c>
    19d0:	36 95       	lsr	r19
    19d2:	27 95       	ror	r18
    19d4:	17 95       	ror	r17
    19d6:	07 95       	ror	r16
    19d8:	8a 95       	dec	r24
    19da:	d2 f7       	brpl	.-12     	; 0x19d0 <__fixsfsi+0x64>
    19dc:	8e 81       	ldd	r24, Y+6	; 0x06
    19de:	88 23       	and	r24, r24
    19e0:	81 f0       	breq	.+32     	; 0x1a02 <__fixsfsi+0x96>
    19e2:	30 95       	com	r19
    19e4:	20 95       	com	r18
    19e6:	10 95       	com	r17
    19e8:	01 95       	neg	r16
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	2f 4f       	sbci	r18, 0xFF	; 255
    19ee:	3f 4f       	sbci	r19, 0xFF	; 255
    19f0:	08 c0       	rjmp	.+16     	; 0x1a02 <__fixsfsi+0x96>
    19f2:	00 e0       	ldi	r16, 0x00	; 0
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	98 01       	movw	r18, r16
    19f8:	04 c0       	rjmp	.+8      	; 0x1a02 <__fixsfsi+0x96>
    19fa:	0f ef       	ldi	r16, 0xFF	; 255
    19fc:	1f ef       	ldi	r17, 0xFF	; 255
    19fe:	2f ef       	ldi	r18, 0xFF	; 255
    1a00:	3f e7       	ldi	r19, 0x7F	; 127
    1a02:	b8 01       	movw	r22, r16
    1a04:	c9 01       	movw	r24, r18
    1a06:	2c 96       	adiw	r28, 0x0c	; 12
    1a08:	e4 e0       	ldi	r30, 0x04	; 4
    1a0a:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__epilogue_restores__+0x1c>

00001a0e <__floatunsisf>:
    1a0e:	a8 e0       	ldi	r26, 0x08	; 8
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ed e0       	ldi	r30, 0x0D	; 13
    1a14:	fd e0       	ldi	r31, 0x0D	; 13
    1a16:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__prologue_saves__+0x14>
    1a1a:	6b 01       	movw	r12, r22
    1a1c:	7c 01       	movw	r14, r24
    1a1e:	1a 82       	std	Y+2, r1	; 0x02
    1a20:	61 15       	cp	r22, r1
    1a22:	71 05       	cpc	r23, r1
    1a24:	81 05       	cpc	r24, r1
    1a26:	91 05       	cpc	r25, r1
    1a28:	19 f4       	brne	.+6      	; 0x1a30 <__floatunsisf+0x22>
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	5e c0       	rjmp	.+188    	; 0x1aec <__floatunsisf+0xde>
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	0e e1       	ldi	r16, 0x1E	; 30
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	1c 83       	std	Y+4, r17	; 0x04
    1a3a:	0b 83       	std	Y+3, r16	; 0x03
    1a3c:	cd 82       	std	Y+5, r12	; 0x05
    1a3e:	de 82       	std	Y+6, r13	; 0x06
    1a40:	ef 82       	std	Y+7, r14	; 0x07
    1a42:	f8 86       	std	Y+8, r15	; 0x08
    1a44:	c7 01       	movw	r24, r14
    1a46:	b6 01       	movw	r22, r12
    1a48:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__clzsi2>
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	30 40       	sbci	r19, 0x00	; 0
    1a52:	37 ff       	sbrs	r19, 7
    1a54:	38 c0       	rjmp	.+112    	; 0x1ac6 <__floatunsisf+0xb8>
    1a56:	ee 27       	eor	r30, r30
    1a58:	ff 27       	eor	r31, r31
    1a5a:	e2 1b       	sub	r30, r18
    1a5c:	f3 0b       	sbc	r31, r19
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a0 e0       	ldi	r26, 0x00	; 0
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	0e 2e       	mov	r0, r30
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <__floatunsisf+0x64>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	aa 1f       	adc	r26, r26
    1a70:	bb 1f       	adc	r27, r27
    1a72:	0a 94       	dec	r0
    1a74:	d2 f7       	brpl	.-12     	; 0x1a6a <__floatunsisf+0x5c>
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	a1 09       	sbc	r26, r1
    1a7a:	b1 09       	sbc	r27, r1
    1a7c:	8c 21       	and	r24, r12
    1a7e:	9d 21       	and	r25, r13
    1a80:	ae 21       	and	r26, r14
    1a82:	bf 21       	and	r27, r15
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	a1 05       	cpc	r26, r1
    1a90:	b1 05       	cpc	r27, r1
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <__floatunsisf+0x8c>
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	ba 01       	movw	r22, r20
    1a9a:	04 c0       	rjmp	.+8      	; 0x1aa4 <__floatunsisf+0x96>
    1a9c:	f6 94       	lsr	r15
    1a9e:	e7 94       	ror	r14
    1aa0:	d7 94       	ror	r13
    1aa2:	c7 94       	ror	r12
    1aa4:	ea 95       	dec	r30
    1aa6:	d2 f7       	brpl	.-12     	; 0x1a9c <__floatunsisf+0x8e>
    1aa8:	c4 2a       	or	r12, r20
    1aaa:	d5 2a       	or	r13, r21
    1aac:	e6 2a       	or	r14, r22
    1aae:	f7 2a       	or	r15, r23
    1ab0:	cd 82       	std	Y+5, r12	; 0x05
    1ab2:	de 82       	std	Y+6, r13	; 0x06
    1ab4:	ef 82       	std	Y+7, r14	; 0x07
    1ab6:	f8 86       	std	Y+8, r15	; 0x08
    1ab8:	8e e1       	ldi	r24, 0x1E	; 30
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	82 1b       	sub	r24, r18
    1abe:	93 0b       	sbc	r25, r19
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <__floatunsisf+0xde>
    1ac6:	21 15       	cp	r18, r1
    1ac8:	31 05       	cpc	r19, r1
    1aca:	81 f0       	breq	.+32     	; 0x1aec <__floatunsisf+0xde>
    1acc:	02 2e       	mov	r0, r18
    1ace:	04 c0       	rjmp	.+8      	; 0x1ad8 <__floatunsisf+0xca>
    1ad0:	cc 0c       	add	r12, r12
    1ad2:	dd 1c       	adc	r13, r13
    1ad4:	ee 1c       	adc	r14, r14
    1ad6:	ff 1c       	adc	r15, r15
    1ad8:	0a 94       	dec	r0
    1ada:	d2 f7       	brpl	.-12     	; 0x1ad0 <__floatunsisf+0xc2>
    1adc:	cd 82       	std	Y+5, r12	; 0x05
    1ade:	de 82       	std	Y+6, r13	; 0x06
    1ae0:	ef 82       	std	Y+7, r14	; 0x07
    1ae2:	f8 86       	std	Y+8, r15	; 0x08
    1ae4:	02 1b       	sub	r16, r18
    1ae6:	13 0b       	sbc	r17, r19
    1ae8:	1c 83       	std	Y+4, r17	; 0x04
    1aea:	0b 83       	std	Y+3, r16	; 0x03
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__pack_f>
    1af4:	46 2f       	mov	r20, r22
    1af6:	57 2f       	mov	r21, r23
    1af8:	68 2f       	mov	r22, r24
    1afa:	79 2f       	mov	r23, r25
    1afc:	cb 01       	movw	r24, r22
    1afe:	ba 01       	movw	r22, r20
    1b00:	28 96       	adiw	r28, 0x08	; 8
    1b02:	e8 e0       	ldi	r30, 0x08	; 8
    1b04:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__epilogue_restores__+0x14>

00001b08 <__clzsi2>:
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	8b 01       	movw	r16, r22
    1b16:	9c 01       	movw	r18, r24
    1b18:	00 30       	cpi	r16, 0x00	; 0
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	18 07       	cpc	r17, r24
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	28 07       	cpc	r18, r24
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	38 07       	cpc	r19, r24
    1b26:	50 f4       	brcc	.+20     	; 0x1b3c <__clzsi2+0x34>
    1b28:	0f 3f       	cpi	r16, 0xFF	; 255
    1b2a:	11 05       	cpc	r17, r1
    1b2c:	21 05       	cpc	r18, r1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <__clzsi2+0x2c>
    1b32:	88 f4       	brcc	.+34     	; 0x1b56 <__clzsi2+0x4e>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	dc 01       	movw	r26, r24
    1b3a:	16 c0       	rjmp	.+44     	; 0x1b68 <__clzsi2+0x60>
    1b3c:	00 30       	cpi	r16, 0x00	; 0
    1b3e:	e0 e0       	ldi	r30, 0x00	; 0
    1b40:	1e 07       	cpc	r17, r30
    1b42:	e0 e0       	ldi	r30, 0x00	; 0
    1b44:	2e 07       	cpc	r18, r30
    1b46:	e1 e0       	ldi	r30, 0x01	; 1
    1b48:	3e 07       	cpc	r19, r30
    1b4a:	50 f4       	brcc	.+20     	; 0x1b60 <__clzsi2+0x58>
    1b4c:	80 e1       	ldi	r24, 0x10	; 16
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	09 c0       	rjmp	.+18     	; 0x1b68 <__clzsi2+0x60>
    1b56:	88 e0       	ldi	r24, 0x08	; 8
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e0       	ldi	r26, 0x00	; 0
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <__clzsi2+0x60>
    1b60:	88 e1       	ldi	r24, 0x18	; 24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e0       	ldi	r26, 0x00	; 0
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	48 1b       	sub	r20, r24
    1b72:	59 0b       	sbc	r21, r25
    1b74:	6a 0b       	sbc	r22, r26
    1b76:	7b 0b       	sbc	r23, r27
    1b78:	68 01       	movw	r12, r16
    1b7a:	79 01       	movw	r14, r18
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <__clzsi2+0x7e>
    1b7e:	f6 94       	lsr	r15
    1b80:	e7 94       	ror	r14
    1b82:	d7 94       	ror	r13
    1b84:	c7 94       	ror	r12
    1b86:	8a 95       	dec	r24
    1b88:	d2 f7       	brpl	.-12     	; 0x1b7e <__clzsi2+0x76>
    1b8a:	d7 01       	movw	r26, r14
    1b8c:	c6 01       	movw	r24, r12
    1b8e:	8b 56       	subi	r24, 0x6B	; 107
    1b90:	9b 4f       	sbci	r25, 0xFB	; 251
    1b92:	fc 01       	movw	r30, r24
    1b94:	80 81       	ld	r24, Z
    1b96:	48 1b       	sub	r20, r24
    1b98:	51 09       	sbc	r21, r1
    1b9a:	61 09       	sbc	r22, r1
    1b9c:	71 09       	sbc	r23, r1
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	08 95       	ret

00001bae <__pack_f>:
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	dc 01       	movw	r26, r24
    1bbc:	14 96       	adiw	r26, 0x04	; 4
    1bbe:	4d 91       	ld	r20, X+
    1bc0:	5d 91       	ld	r21, X+
    1bc2:	6d 91       	ld	r22, X+
    1bc4:	7c 91       	ld	r23, X
    1bc6:	17 97       	sbiw	r26, 0x07	; 7
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	ec 91       	ld	r30, X
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	8c 91       	ld	r24, X
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	20 f4       	brcc	.+8      	; 0x1bdc <__pack_f+0x2e>
    1bd4:	60 61       	ori	r22, 0x10	; 16
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a5 c0       	rjmp	.+330    	; 0x1d26 <__pack_f+0x178>
    1bdc:	84 30       	cpi	r24, 0x04	; 4
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <__pack_f+0x34>
    1be0:	9d c0       	rjmp	.+314    	; 0x1d1c <__pack_f+0x16e>
    1be2:	82 30       	cpi	r24, 0x02	; 2
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <__pack_f+0x3a>
    1be6:	94 c0       	rjmp	.+296    	; 0x1d10 <__pack_f+0x162>
    1be8:	41 15       	cp	r20, r1
    1bea:	51 05       	cpc	r21, r1
    1bec:	61 05       	cpc	r22, r1
    1bee:	71 05       	cpc	r23, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <__pack_f+0x46>
    1bf2:	91 c0       	rjmp	.+290    	; 0x1d16 <__pack_f+0x168>
    1bf4:	12 96       	adiw	r26, 0x02	; 2
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	9c 91       	ld	r25, X
    1bfa:	13 97       	sbiw	r26, 0x03	; 3
    1bfc:	2f ef       	ldi	r18, 0xFF	; 255
    1bfe:	82 38       	cpi	r24, 0x82	; 130
    1c00:	92 07       	cpc	r25, r18
    1c02:	0c f0       	brlt	.+2      	; 0x1c06 <__pack_f+0x58>
    1c04:	59 c0       	rjmp	.+178    	; 0x1cb8 <__pack_f+0x10a>
    1c06:	22 e8       	ldi	r18, 0x82	; 130
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	28 1b       	sub	r18, r24
    1c0c:	39 0b       	sbc	r19, r25
    1c0e:	2a 31       	cpi	r18, 0x1A	; 26
    1c10:	31 05       	cpc	r19, r1
    1c12:	64 f5       	brge	.+88     	; 0x1c6c <__pack_f+0xbe>
    1c14:	6a 01       	movw	r12, r20
    1c16:	7b 01       	movw	r14, r22
    1c18:	02 2e       	mov	r0, r18
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <__pack_f+0x76>
    1c1c:	f6 94       	lsr	r15
    1c1e:	e7 94       	ror	r14
    1c20:	d7 94       	ror	r13
    1c22:	c7 94       	ror	r12
    1c24:	0a 94       	dec	r0
    1c26:	d2 f7       	brpl	.-12     	; 0x1c1c <__pack_f+0x6e>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e0       	ldi	r26, 0x00	; 0
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <__pack_f+0x8c>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	aa 1f       	adc	r26, r26
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	2a 95       	dec	r18
    1c3c:	d2 f7       	brpl	.-12     	; 0x1c32 <__pack_f+0x84>
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	a1 09       	sbc	r26, r1
    1c42:	b1 09       	sbc	r27, r1
    1c44:	84 23       	and	r24, r20
    1c46:	95 23       	and	r25, r21
    1c48:	a6 23       	and	r26, r22
    1c4a:	b7 23       	and	r27, r23
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	60 e0       	ldi	r22, 0x00	; 0
    1c52:	70 e0       	ldi	r23, 0x00	; 0
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	a1 05       	cpc	r26, r1
    1c58:	b1 05       	cpc	r27, r1
    1c5a:	19 f4       	brne	.+6      	; 0x1c62 <__pack_f+0xb4>
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	ba 01       	movw	r22, r20
    1c62:	4c 29       	or	r20, r12
    1c64:	5d 29       	or	r21, r13
    1c66:	6e 29       	or	r22, r14
    1c68:	7f 29       	or	r23, r15
    1c6a:	03 c0       	rjmp	.+6      	; 0x1c72 <__pack_f+0xc4>
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	ba 01       	movw	r22, r20
    1c72:	db 01       	movw	r26, r22
    1c74:	ca 01       	movw	r24, r20
    1c76:	8f 77       	andi	r24, 0x7F	; 127
    1c78:	90 70       	andi	r25, 0x00	; 0
    1c7a:	a0 70       	andi	r26, 0x00	; 0
    1c7c:	b0 70       	andi	r27, 0x00	; 0
    1c7e:	80 34       	cpi	r24, 0x40	; 64
    1c80:	91 05       	cpc	r25, r1
    1c82:	a1 05       	cpc	r26, r1
    1c84:	b1 05       	cpc	r27, r1
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <__pack_f+0xe8>
    1c88:	47 ff       	sbrs	r20, 7
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <__pack_f+0xf0>
    1c8c:	40 5c       	subi	r20, 0xC0	; 192
    1c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c90:	6f 4f       	sbci	r22, 0xFF	; 255
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <__pack_f+0xf0>
    1c96:	41 5c       	subi	r20, 0xC1	; 193
    1c98:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9a:	6f 4f       	sbci	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	40 30       	cpi	r20, 0x00	; 0
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	52 07       	cpc	r21, r18
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	62 07       	cpc	r22, r18
    1cac:	20 e4       	ldi	r18, 0x40	; 64
    1cae:	72 07       	cpc	r23, r18
    1cb0:	38 f5       	brcc	.+78     	; 0x1d00 <__pack_f+0x152>
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	24 c0       	rjmp	.+72     	; 0x1d00 <__pack_f+0x152>
    1cb8:	80 38       	cpi	r24, 0x80	; 128
    1cba:	91 05       	cpc	r25, r1
    1cbc:	7c f5       	brge	.+94     	; 0x1d1c <__pack_f+0x16e>
    1cbe:	8a 01       	movw	r16, r20
    1cc0:	9b 01       	movw	r18, r22
    1cc2:	0f 77       	andi	r16, 0x7F	; 127
    1cc4:	10 70       	andi	r17, 0x00	; 0
    1cc6:	20 70       	andi	r18, 0x00	; 0
    1cc8:	30 70       	andi	r19, 0x00	; 0
    1cca:	00 34       	cpi	r16, 0x40	; 64
    1ccc:	11 05       	cpc	r17, r1
    1cce:	21 05       	cpc	r18, r1
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	39 f4       	brne	.+14     	; 0x1ce2 <__pack_f+0x134>
    1cd4:	47 ff       	sbrs	r20, 7
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <__pack_f+0x13c>
    1cd8:	40 5c       	subi	r20, 0xC0	; 192
    1cda:	5f 4f       	sbci	r21, 0xFF	; 255
    1cdc:	6f 4f       	sbci	r22, 0xFF	; 255
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <__pack_f+0x13c>
    1ce2:	41 5c       	subi	r20, 0xC1	; 193
    1ce4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce6:	6f 4f       	sbci	r22, 0xFF	; 255
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	77 fd       	sbrc	r23, 7
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <__pack_f+0x146>
    1cee:	81 58       	subi	r24, 0x81	; 129
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	06 c0       	rjmp	.+12     	; 0x1d00 <__pack_f+0x152>
    1cf4:	76 95       	lsr	r23
    1cf6:	67 95       	ror	r22
    1cf8:	57 95       	ror	r21
    1cfa:	47 95       	ror	r20
    1cfc:	80 58       	subi	r24, 0x80	; 128
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	97 e0       	ldi	r25, 0x07	; 7
    1d02:	76 95       	lsr	r23
    1d04:	67 95       	ror	r22
    1d06:	57 95       	ror	r21
    1d08:	47 95       	ror	r20
    1d0a:	9a 95       	dec	r25
    1d0c:	d1 f7       	brne	.-12     	; 0x1d02 <__pack_f+0x154>
    1d0e:	0b c0       	rjmp	.+22     	; 0x1d26 <__pack_f+0x178>
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	05 c0       	rjmp	.+10     	; 0x1d20 <__pack_f+0x172>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	05 c0       	rjmp	.+10     	; 0x1d26 <__pack_f+0x178>
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	ba 01       	movw	r22, r20
    1d26:	98 2f       	mov	r25, r24
    1d28:	97 95       	ror	r25
    1d2a:	99 27       	eor	r25, r25
    1d2c:	97 95       	ror	r25
    1d2e:	a6 2f       	mov	r26, r22
    1d30:	af 77       	andi	r26, 0x7F	; 127
    1d32:	e7 95       	ror	r30
    1d34:	ee 27       	eor	r30, r30
    1d36:	e7 95       	ror	r30
    1d38:	86 95       	lsr	r24
    1d3a:	3a 2f       	mov	r19, r26
    1d3c:	39 2b       	or	r19, r25
    1d3e:	28 2f       	mov	r18, r24
    1d40:	2e 2b       	or	r18, r30
    1d42:	84 2f       	mov	r24, r20
    1d44:	95 2f       	mov	r25, r21
    1d46:	a3 2f       	mov	r26, r19
    1d48:	b2 2f       	mov	r27, r18
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	08 95       	ret

00001d5c <__unpack_f>:
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	fb 01       	movw	r30, r22
    1d60:	4c 91       	ld	r20, X
    1d62:	11 96       	adiw	r26, 0x01	; 1
    1d64:	5c 91       	ld	r21, X
    1d66:	11 97       	sbiw	r26, 0x01	; 1
    1d68:	12 96       	adiw	r26, 0x02	; 2
    1d6a:	8c 91       	ld	r24, X
    1d6c:	12 97       	sbiw	r26, 0x02	; 2
    1d6e:	68 2f       	mov	r22, r24
    1d70:	6f 77       	andi	r22, 0x7F	; 127
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	98 2f       	mov	r25, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	99 27       	eor	r25, r25
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	13 96       	adiw	r26, 0x03	; 3
    1d7e:	2c 91       	ld	r18, X
    1d80:	13 97       	sbiw	r26, 0x03	; 3
    1d82:	82 2f       	mov	r24, r18
    1d84:	88 0f       	add	r24, r24
    1d86:	89 2b       	or	r24, r25
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	22 1f       	adc	r18, r18
    1d8c:	22 27       	eor	r18, r18
    1d8e:	22 1f       	adc	r18, r18
    1d90:	21 83       	std	Z+1, r18	; 0x01
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	39 f5       	brne	.+78     	; 0x1de4 <__unpack_f+0x88>
    1d96:	41 15       	cp	r20, r1
    1d98:	51 05       	cpc	r21, r1
    1d9a:	61 05       	cpc	r22, r1
    1d9c:	71 05       	cpc	r23, r1
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <__unpack_f+0x48>
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	29 c0       	rjmp	.+82     	; 0x1df6 <__unpack_f+0x9a>
    1da4:	82 e8       	ldi	r24, 0x82	; 130
    1da6:	9f ef       	ldi	r25, 0xFF	; 255
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	82 83       	std	Z+2, r24	; 0x02
    1dac:	27 e0       	ldi	r18, 0x07	; 7
    1dae:	44 0f       	add	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	66 1f       	adc	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	2a 95       	dec	r18
    1db8:	d1 f7       	brne	.-12     	; 0x1dae <__unpack_f+0x52>
    1dba:	83 e0       	ldi	r24, 0x03	; 3
    1dbc:	80 83       	st	Z, r24
    1dbe:	09 c0       	rjmp	.+18     	; 0x1dd2 <__unpack_f+0x76>
    1dc0:	44 0f       	add	r20, r20
    1dc2:	55 1f       	adc	r21, r21
    1dc4:	66 1f       	adc	r22, r22
    1dc6:	77 1f       	adc	r23, r23
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	93 83       	std	Z+3, r25	; 0x03
    1dd0:	82 83       	std	Z+2, r24	; 0x02
    1dd2:	40 30       	cpi	r20, 0x00	; 0
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	58 07       	cpc	r21, r24
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	68 07       	cpc	r22, r24
    1ddc:	80 e4       	ldi	r24, 0x40	; 64
    1dde:	78 07       	cpc	r23, r24
    1de0:	78 f3       	brcs	.-34     	; 0x1dc0 <__unpack_f+0x64>
    1de2:	20 c0       	rjmp	.+64     	; 0x1e24 <__unpack_f+0xc8>
    1de4:	8f 3f       	cpi	r24, 0xFF	; 255
    1de6:	91 05       	cpc	r25, r1
    1de8:	79 f4       	brne	.+30     	; 0x1e08 <__unpack_f+0xac>
    1dea:	41 15       	cp	r20, r1
    1dec:	51 05       	cpc	r21, r1
    1dee:	61 05       	cpc	r22, r1
    1df0:	71 05       	cpc	r23, r1
    1df2:	19 f4       	brne	.+6      	; 0x1dfa <__unpack_f+0x9e>
    1df4:	84 e0       	ldi	r24, 0x04	; 4
    1df6:	80 83       	st	Z, r24
    1df8:	08 95       	ret
    1dfa:	64 ff       	sbrs	r22, 4
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <__unpack_f+0xa8>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 83       	st	Z, r24
    1e02:	10 c0       	rjmp	.+32     	; 0x1e24 <__unpack_f+0xc8>
    1e04:	10 82       	st	Z, r1
    1e06:	0e c0       	rjmp	.+28     	; 0x1e24 <__unpack_f+0xc8>
    1e08:	8f 57       	subi	r24, 0x7F	; 127
    1e0a:	90 40       	sbci	r25, 0x00	; 0
    1e0c:	93 83       	std	Z+3, r25	; 0x03
    1e0e:	82 83       	std	Z+2, r24	; 0x02
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	80 83       	st	Z, r24
    1e14:	87 e0       	ldi	r24, 0x07	; 7
    1e16:	44 0f       	add	r20, r20
    1e18:	55 1f       	adc	r21, r21
    1e1a:	66 1f       	adc	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	8a 95       	dec	r24
    1e20:	d1 f7       	brne	.-12     	; 0x1e16 <__unpack_f+0xba>
    1e22:	70 64       	ori	r23, 0x40	; 64
    1e24:	44 83       	std	Z+4, r20	; 0x04
    1e26:	55 83       	std	Z+5, r21	; 0x05
    1e28:	66 83       	std	Z+6, r22	; 0x06
    1e2a:	77 83       	std	Z+7, r23	; 0x07
    1e2c:	08 95       	ret

00001e2e <__fpcmp_parts_f>:
    1e2e:	cf 93       	push	r28
    1e30:	fc 01       	movw	r30, r24
    1e32:	db 01       	movw	r26, r22
    1e34:	90 81       	ld	r25, Z
    1e36:	92 30       	cpi	r25, 0x02	; 2
    1e38:	08 f4       	brcc	.+2      	; 0x1e3c <__fpcmp_parts_f+0xe>
    1e3a:	4c c0       	rjmp	.+152    	; 0x1ed4 <__fpcmp_parts_f+0xa6>
    1e3c:	8c 91       	ld	r24, X
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <__fpcmp_parts_f+0x16>
    1e42:	48 c0       	rjmp	.+144    	; 0x1ed4 <__fpcmp_parts_f+0xa6>
    1e44:	94 30       	cpi	r25, 0x04	; 4
    1e46:	69 f4       	brne	.+26     	; 0x1e62 <__fpcmp_parts_f+0x34>
    1e48:	21 81       	ldd	r18, Z+1	; 0x01
    1e4a:	84 30       	cpi	r24, 0x04	; 4
    1e4c:	39 f4       	brne	.+14     	; 0x1e5c <__fpcmp_parts_f+0x2e>
    1e4e:	11 96       	adiw	r26, 0x01	; 1
    1e50:	8c 91       	ld	r24, X
    1e52:	11 97       	sbiw	r26, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	82 1b       	sub	r24, r18
    1e58:	91 09       	sbc	r25, r1
    1e5a:	44 c0       	rjmp	.+136    	; 0x1ee4 <__fpcmp_parts_f+0xb6>
    1e5c:	22 23       	and	r18, r18
    1e5e:	d1 f1       	breq	.+116    	; 0x1ed4 <__fpcmp_parts_f+0xa6>
    1e60:	3f c0       	rjmp	.+126    	; 0x1ee0 <__fpcmp_parts_f+0xb2>
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <__fpcmp_parts_f+0x40>
    1e66:	92 30       	cpi	r25, 0x02	; 2
    1e68:	41 f4       	brne	.+16     	; 0x1e7a <__fpcmp_parts_f+0x4c>
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	b1 f1       	breq	.+108    	; 0x1eda <__fpcmp_parts_f+0xac>
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	8c 91       	ld	r24, X
    1e72:	11 97       	sbiw	r26, 0x01	; 1
    1e74:	88 23       	and	r24, r24
    1e76:	a1 f1       	breq	.+104    	; 0x1ee0 <__fpcmp_parts_f+0xb2>
    1e78:	2d c0       	rjmp	.+90     	; 0x1ed4 <__fpcmp_parts_f+0xa6>
    1e7a:	c1 81       	ldd	r28, Z+1	; 0x01
    1e7c:	82 30       	cpi	r24, 0x02	; 2
    1e7e:	01 f1       	breq	.+64     	; 0x1ec0 <__fpcmp_parts_f+0x92>
    1e80:	11 96       	adiw	r26, 0x01	; 1
    1e82:	8c 91       	ld	r24, X
    1e84:	11 97       	sbiw	r26, 0x01	; 1
    1e86:	c8 17       	cp	r28, r24
    1e88:	d9 f4       	brne	.+54     	; 0x1ec0 <__fpcmp_parts_f+0x92>
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	12 96       	adiw	r26, 0x02	; 2
    1e90:	2d 91       	ld	r18, X+
    1e92:	3c 91       	ld	r19, X
    1e94:	13 97       	sbiw	r26, 0x03	; 3
    1e96:	28 17       	cp	r18, r24
    1e98:	39 07       	cpc	r19, r25
    1e9a:	94 f0       	brlt	.+36     	; 0x1ec0 <__fpcmp_parts_f+0x92>
    1e9c:	82 17       	cp	r24, r18
    1e9e:	93 07       	cpc	r25, r19
    1ea0:	bc f0       	brlt	.+46     	; 0x1ed0 <__fpcmp_parts_f+0xa2>
    1ea2:	44 81       	ldd	r20, Z+4	; 0x04
    1ea4:	55 81       	ldd	r21, Z+5	; 0x05
    1ea6:	66 81       	ldd	r22, Z+6	; 0x06
    1ea8:	77 81       	ldd	r23, Z+7	; 0x07
    1eaa:	14 96       	adiw	r26, 0x04	; 4
    1eac:	8d 91       	ld	r24, X+
    1eae:	9d 91       	ld	r25, X+
    1eb0:	0d 90       	ld	r0, X+
    1eb2:	bc 91       	ld	r27, X
    1eb4:	a0 2d       	mov	r26, r0
    1eb6:	84 17       	cp	r24, r20
    1eb8:	95 07       	cpc	r25, r21
    1eba:	a6 07       	cpc	r26, r22
    1ebc:	b7 07       	cpc	r27, r23
    1ebe:	18 f4       	brcc	.+6      	; 0x1ec6 <__fpcmp_parts_f+0x98>
    1ec0:	cc 23       	and	r28, r28
    1ec2:	41 f0       	breq	.+16     	; 0x1ed4 <__fpcmp_parts_f+0xa6>
    1ec4:	0d c0       	rjmp	.+26     	; 0x1ee0 <__fpcmp_parts_f+0xb2>
    1ec6:	48 17       	cp	r20, r24
    1ec8:	59 07       	cpc	r21, r25
    1eca:	6a 07       	cpc	r22, r26
    1ecc:	7b 07       	cpc	r23, r27
    1ece:	28 f4       	brcc	.+10     	; 0x1eda <__fpcmp_parts_f+0xac>
    1ed0:	cc 23       	and	r28, r28
    1ed2:	31 f0       	breq	.+12     	; 0x1ee0 <__fpcmp_parts_f+0xb2>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <__fpcmp_parts_f+0xb6>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <__fpcmp_parts_f+0xb6>
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	9f ef       	ldi	r25, 0xFF	; 255
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <main>:
#include "adc.h"
#include "spi.h"
#include "i2c.h"

int main()
{
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
	int 	tag;
	struct	task task;

	sei();
    1efc:	78 94       	sei
	uart_init();
    1efe:	0e 94 c4 07 	call	0xf88	; 0xf88 <uart_init>
	task_init();
    1f02:	0e 94 ef 04 	call	0x9de	; 0x9de <task_init>
	timer_init();	
    1f06:	0e 94 2f 07 	call	0xe5e	; 0xe5e <timer_init>
	adc_init();
    1f0a:	0e 94 96 00 	call	0x12c	; 0x12c <adc_init>
	spi_init();
    1f0e:	0e 94 ce 02 	call	0x59c	; 0x59c <spi_init>
	tcn75_i2c_init();
    1f12:	0e 94 9d 08 	call	0x113a	; 0x113a <tcn75_i2c_init>

	printf("$ ");
    1f16:	0f 92       	push	r0
    1f18:	0f 92       	push	r0
    1f1a:	8d e0       	ldi	r24, 0x0D	; 13
    1f1c:	92 e0       	ldi	r25, 0x02	; 2
    1f1e:	ed b7       	in	r30, 0x3d	; 61
    1f20:	fe b7       	in	r31, 0x3e	; 62
    1f22:	92 83       	std	Z+2, r25	; 0x02
    1f24:	81 83       	std	Z+1, r24	; 0x01
    1f26:	0e 94 ee 11 	call	0x23dc	; 0x23dc <printf>
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
		
	while(1) {
		cli();
    1f2e:	f8 94       	cli
		tag = task_delete(&task);
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 38 05 	call	0xa70	; 0xa70 <task_delete>
		sei();
    1f38:	78 94       	sei
		if (tag)
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	c1 f3       	breq	.-16     	; 0x1f2e <main+0x46>
			(*(task.fun))(task.arg);
    1f3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f40:	fa 81       	ldd	r31, Y+2	; 0x02
    1f42:	ce 01       	movw	r24, r28
    1f44:	03 96       	adiw	r24, 0x03	; 3
    1f46:	19 95       	eicall
    1f48:	f2 cf       	rjmp	.-28     	; 0x1f2e <main+0x46>

00001f4a <__divmodhi4>:
    1f4a:	97 fb       	bst	r25, 7
    1f4c:	09 2e       	mov	r0, r25
    1f4e:	07 26       	eor	r0, r23
    1f50:	0a d0       	rcall	.+20     	; 0x1f66 <__divmodhi4_neg1>
    1f52:	77 fd       	sbrc	r23, 7
    1f54:	04 d0       	rcall	.+8      	; 0x1f5e <__divmodhi4_neg2>
    1f56:	0c d0       	rcall	.+24     	; 0x1f70 <__udivmodhi4>
    1f58:	06 d0       	rcall	.+12     	; 0x1f66 <__divmodhi4_neg1>
    1f5a:	00 20       	and	r0, r0
    1f5c:	1a f4       	brpl	.+6      	; 0x1f64 <__divmodhi4_exit>

00001f5e <__divmodhi4_neg2>:
    1f5e:	70 95       	com	r23
    1f60:	61 95       	neg	r22
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255

00001f64 <__divmodhi4_exit>:
    1f64:	08 95       	ret

00001f66 <__divmodhi4_neg1>:
    1f66:	f6 f7       	brtc	.-4      	; 0x1f64 <__divmodhi4_exit>
    1f68:	90 95       	com	r25
    1f6a:	81 95       	neg	r24
    1f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6e:	08 95       	ret

00001f70 <__udivmodhi4>:
    1f70:	aa 1b       	sub	r26, r26
    1f72:	bb 1b       	sub	r27, r27
    1f74:	51 e1       	ldi	r21, 0x11	; 17
    1f76:	07 c0       	rjmp	.+14     	; 0x1f86 <__udivmodhi4_ep>

00001f78 <__udivmodhi4_loop>:
    1f78:	aa 1f       	adc	r26, r26
    1f7a:	bb 1f       	adc	r27, r27
    1f7c:	a6 17       	cp	r26, r22
    1f7e:	b7 07       	cpc	r27, r23
    1f80:	10 f0       	brcs	.+4      	; 0x1f86 <__udivmodhi4_ep>
    1f82:	a6 1b       	sub	r26, r22
    1f84:	b7 0b       	sbc	r27, r23

00001f86 <__udivmodhi4_ep>:
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	5a 95       	dec	r21
    1f8c:	a9 f7       	brne	.-22     	; 0x1f78 <__udivmodhi4_loop>
    1f8e:	80 95       	com	r24
    1f90:	90 95       	com	r25
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	08 95       	ret

00001f98 <__prologue_saves__>:
    1f98:	2f 92       	push	r2
    1f9a:	3f 92       	push	r3
    1f9c:	4f 92       	push	r4
    1f9e:	5f 92       	push	r5
    1fa0:	6f 92       	push	r6
    1fa2:	7f 92       	push	r7
    1fa4:	8f 92       	push	r8
    1fa6:	9f 92       	push	r9
    1fa8:	af 92       	push	r10
    1faa:	bf 92       	push	r11
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	ca 1b       	sub	r28, r26
    1fc2:	db 0b       	sbc	r29, r27
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	19 94       	eijmp

00001fd0 <__epilogue_restores__>:
    1fd0:	2a 88       	ldd	r2, Y+18	; 0x12
    1fd2:	39 88       	ldd	r3, Y+17	; 0x11
    1fd4:	48 88       	ldd	r4, Y+16	; 0x10
    1fd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fda:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fde:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fe0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fe2:	b9 84       	ldd	r11, Y+9	; 0x09
    1fe4:	c8 84       	ldd	r12, Y+8	; 0x08
    1fe6:	df 80       	ldd	r13, Y+7	; 0x07
    1fe8:	ee 80       	ldd	r14, Y+6	; 0x06
    1fea:	fd 80       	ldd	r15, Y+5	; 0x05
    1fec:	0c 81       	ldd	r16, Y+4	; 0x04
    1fee:	1b 81       	ldd	r17, Y+3	; 0x03
    1ff0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ff2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ff4:	ce 0f       	add	r28, r30
    1ff6:	d1 1d       	adc	r29, r1
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	ed 01       	movw	r28, r26
    2004:	08 95       	ret

00002006 <malloc>:
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	ac 01       	movw	r20, r24
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	91 05       	cpc	r25, r1
    2010:	10 f4       	brcc	.+4      	; 0x2016 <malloc+0x10>
    2012:	42 e0       	ldi	r20, 0x02	; 2
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	e0 91 d8 06 	lds	r30, 0x06D8
    201a:	f0 91 d9 06 	lds	r31, 0x06D9
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	a0 e0       	ldi	r26, 0x00	; 0
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	24 c0       	rjmp	.+72     	; 0x2070 <malloc+0x6a>
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	84 17       	cp	r24, r20
    202e:	95 07       	cpc	r25, r21
    2030:	d0 f0       	brcs	.+52     	; 0x2066 <malloc+0x60>
    2032:	84 17       	cp	r24, r20
    2034:	95 07       	cpc	r25, r21
    2036:	71 f4       	brne	.+28     	; 0x2054 <malloc+0x4e>
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	10 97       	sbiw	r26, 0x00	; 0
    203e:	29 f0       	breq	.+10     	; 0x204a <malloc+0x44>
    2040:	13 96       	adiw	r26, 0x03	; 3
    2042:	9c 93       	st	X, r25
    2044:	8e 93       	st	-X, r24
    2046:	12 97       	sbiw	r26, 0x02	; 2
    2048:	2c c0       	rjmp	.+88     	; 0x20a2 <malloc+0x9c>
    204a:	90 93 d9 06 	sts	0x06D9, r25
    204e:	80 93 d8 06 	sts	0x06D8, r24
    2052:	27 c0       	rjmp	.+78     	; 0x20a2 <malloc+0x9c>
    2054:	21 15       	cp	r18, r1
    2056:	31 05       	cpc	r19, r1
    2058:	19 f0       	breq	.+6      	; 0x2060 <malloc+0x5a>
    205a:	82 17       	cp	r24, r18
    205c:	93 07       	cpc	r25, r19
    205e:	18 f4       	brcc	.+6      	; 0x2066 <malloc+0x60>
    2060:	9c 01       	movw	r18, r24
    2062:	bd 01       	movw	r22, r26
    2064:	ef 01       	movw	r28, r30
    2066:	92 81       	ldd	r25, Z+2	; 0x02
    2068:	83 81       	ldd	r24, Z+3	; 0x03
    206a:	df 01       	movw	r26, r30
    206c:	e9 2f       	mov	r30, r25
    206e:	f8 2f       	mov	r31, r24
    2070:	30 97       	sbiw	r30, 0x00	; 0
    2072:	d1 f6       	brne	.-76     	; 0x2028 <malloc+0x22>
    2074:	21 15       	cp	r18, r1
    2076:	31 05       	cpc	r19, r1
    2078:	f9 f0       	breq	.+62     	; 0x20b8 <malloc+0xb2>
    207a:	c9 01       	movw	r24, r18
    207c:	84 1b       	sub	r24, r20
    207e:	95 0b       	sbc	r25, r21
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	91 05       	cpc	r25, r1
    2084:	80 f4       	brcc	.+32     	; 0x20a6 <malloc+0xa0>
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	9b 81       	ldd	r25, Y+3	; 0x03
    208a:	61 15       	cp	r22, r1
    208c:	71 05       	cpc	r23, r1
    208e:	21 f0       	breq	.+8      	; 0x2098 <malloc+0x92>
    2090:	fb 01       	movw	r30, r22
    2092:	93 83       	std	Z+3, r25	; 0x03
    2094:	82 83       	std	Z+2, r24	; 0x02
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <malloc+0x9a>
    2098:	90 93 d9 06 	sts	0x06D9, r25
    209c:	80 93 d8 06 	sts	0x06D8, r24
    20a0:	fe 01       	movw	r30, r28
    20a2:	32 96       	adiw	r30, 0x02	; 2
    20a4:	42 c0       	rjmp	.+132    	; 0x212a <malloc+0x124>
    20a6:	fe 01       	movw	r30, r28
    20a8:	e8 0f       	add	r30, r24
    20aa:	f9 1f       	adc	r31, r25
    20ac:	41 93       	st	Z+, r20
    20ae:	51 93       	st	Z+, r21
    20b0:	02 97       	sbiw	r24, 0x02	; 2
    20b2:	99 83       	std	Y+1, r25	; 0x01
    20b4:	88 83       	st	Y, r24
    20b6:	39 c0       	rjmp	.+114    	; 0x212a <malloc+0x124>
    20b8:	80 91 d6 06 	lds	r24, 0x06D6
    20bc:	90 91 d7 06 	lds	r25, 0x06D7
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	41 f4       	brne	.+16     	; 0x20d4 <malloc+0xce>
    20c4:	80 91 97 05 	lds	r24, 0x0597
    20c8:	90 91 98 05 	lds	r25, 0x0598
    20cc:	90 93 d7 06 	sts	0x06D7, r25
    20d0:	80 93 d6 06 	sts	0x06D6, r24
    20d4:	20 91 95 05 	lds	r18, 0x0595
    20d8:	30 91 96 05 	lds	r19, 0x0596
    20dc:	21 15       	cp	r18, r1
    20de:	31 05       	cpc	r19, r1
    20e0:	41 f4       	brne	.+16     	; 0x20f2 <malloc+0xec>
    20e2:	2d b7       	in	r18, 0x3d	; 61
    20e4:	3e b7       	in	r19, 0x3e	; 62
    20e6:	80 91 99 05 	lds	r24, 0x0599
    20ea:	90 91 9a 05 	lds	r25, 0x059A
    20ee:	28 1b       	sub	r18, r24
    20f0:	39 0b       	sbc	r19, r25
    20f2:	e0 91 d6 06 	lds	r30, 0x06D6
    20f6:	f0 91 d7 06 	lds	r31, 0x06D7
    20fa:	e2 17       	cp	r30, r18
    20fc:	f3 07       	cpc	r31, r19
    20fe:	98 f4       	brcc	.+38     	; 0x2126 <malloc+0x120>
    2100:	2e 1b       	sub	r18, r30
    2102:	3f 0b       	sbc	r19, r31
    2104:	24 17       	cp	r18, r20
    2106:	35 07       	cpc	r19, r21
    2108:	70 f0       	brcs	.+28     	; 0x2126 <malloc+0x120>
    210a:	ca 01       	movw	r24, r20
    210c:	02 96       	adiw	r24, 0x02	; 2
    210e:	28 17       	cp	r18, r24
    2110:	39 07       	cpc	r19, r25
    2112:	48 f0       	brcs	.+18     	; 0x2126 <malloc+0x120>
    2114:	8e 0f       	add	r24, r30
    2116:	9f 1f       	adc	r25, r31
    2118:	90 93 d7 06 	sts	0x06D7, r25
    211c:	80 93 d6 06 	sts	0x06D6, r24
    2120:	41 93       	st	Z+, r20
    2122:	51 93       	st	Z+, r21
    2124:	02 c0       	rjmp	.+4      	; 0x212a <malloc+0x124>
    2126:	e0 e0       	ldi	r30, 0x00	; 0
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	cf 01       	movw	r24, r30
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <free>:
    2132:	0f 93       	push	r16
    2134:	1f 93       	push	r17
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	9c 01       	movw	r18, r24
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	09 f4       	brne	.+2      	; 0x2142 <free+0x10>
    2140:	8c c0       	rjmp	.+280    	; 0x225a <__stack+0x5b>
    2142:	dc 01       	movw	r26, r24
    2144:	12 97       	sbiw	r26, 0x02	; 2
    2146:	13 96       	adiw	r26, 0x03	; 3
    2148:	1c 92       	st	X, r1
    214a:	1e 92       	st	-X, r1
    214c:	12 97       	sbiw	r26, 0x02	; 2
    214e:	60 91 d8 06 	lds	r22, 0x06D8
    2152:	70 91 d9 06 	lds	r23, 0x06D9
    2156:	61 15       	cp	r22, r1
    2158:	71 05       	cpc	r23, r1
    215a:	89 f4       	brne	.+34     	; 0x217e <free+0x4c>
    215c:	8d 91       	ld	r24, X+
    215e:	9c 91       	ld	r25, X
    2160:	11 97       	sbiw	r26, 0x01	; 1
    2162:	82 0f       	add	r24, r18
    2164:	93 1f       	adc	r25, r19
    2166:	20 91 d6 06 	lds	r18, 0x06D6
    216a:	30 91 d7 06 	lds	r19, 0x06D7
    216e:	28 17       	cp	r18, r24
    2170:	39 07       	cpc	r19, r25
    2172:	69 f5       	brne	.+90     	; 0x21ce <free+0x9c>
    2174:	b0 93 d7 06 	sts	0x06D7, r27
    2178:	a0 93 d6 06 	sts	0x06D6, r26
    217c:	6e c0       	rjmp	.+220    	; 0x225a <__stack+0x5b>
    217e:	fb 01       	movw	r30, r22
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <free+0x56>
    2186:	fc 01       	movw	r30, r24
    2188:	ea 17       	cp	r30, r26
    218a:	fb 07       	cpc	r31, r27
    218c:	30 f4       	brcc	.+12     	; 0x219a <free+0x68>
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	af 01       	movw	r20, r30
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	b9 f7       	brne	.-18     	; 0x2186 <free+0x54>
    2198:	1f c0       	rjmp	.+62     	; 0x21d8 <free+0xa6>
    219a:	e9 01       	movw	r28, r18
    219c:	22 97       	sbiw	r28, 0x02	; 2
    219e:	fb 83       	std	Y+3, r31	; 0x03
    21a0:	ea 83       	std	Y+2, r30	; 0x02
    21a2:	08 81       	ld	r16, Y
    21a4:	19 81       	ldd	r17, Y+1	; 0x01
    21a6:	c9 01       	movw	r24, r18
    21a8:	80 0f       	add	r24, r16
    21aa:	91 1f       	adc	r25, r17
    21ac:	8e 17       	cp	r24, r30
    21ae:	9f 07       	cpc	r25, r31
    21b0:	59 f4       	brne	.+22     	; 0x21c8 <free+0x96>
    21b2:	80 81       	ld	r24, Z
    21b4:	91 81       	ldd	r25, Z+1	; 0x01
    21b6:	80 0f       	add	r24, r16
    21b8:	91 1f       	adc	r25, r17
    21ba:	02 96       	adiw	r24, 0x02	; 2
    21bc:	99 83       	std	Y+1, r25	; 0x01
    21be:	88 83       	st	Y, r24
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	41 15       	cp	r20, r1
    21ca:	51 05       	cpc	r21, r1
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <free+0xa6>
    21ce:	b0 93 d9 06 	sts	0x06D9, r27
    21d2:	a0 93 d8 06 	sts	0x06D8, r26
    21d6:	41 c0       	rjmp	.+130    	; 0x225a <__stack+0x5b>
    21d8:	fa 01       	movw	r30, r20
    21da:	b3 83       	std	Z+3, r27	; 0x03
    21dc:	a2 83       	std	Z+2, r26	; 0x02
    21de:	c1 91       	ld	r28, Z+
    21e0:	d1 91       	ld	r29, Z+
    21e2:	ec 0f       	add	r30, r28
    21e4:	fd 1f       	adc	r31, r29
    21e6:	ae 17       	cp	r26, r30
    21e8:	bf 07       	cpc	r27, r31
    21ea:	81 f4       	brne	.+32     	; 0x220c <__stack+0xd>
    21ec:	f9 01       	movw	r30, r18
    21ee:	92 91       	ld	r25, -Z
    21f0:	82 91       	ld	r24, -Z
    21f2:	8c 0f       	add	r24, r28
    21f4:	9d 1f       	adc	r25, r29
    21f6:	02 96       	adiw	r24, 0x02	; 2
    21f8:	da 01       	movw	r26, r20
    21fa:	11 96       	adiw	r26, 0x01	; 1
    21fc:	9c 93       	st	X, r25
    21fe:	8e 93       	st	-X, r24
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	13 96       	adiw	r26, 0x03	; 3
    2206:	9c 93       	st	X, r25
    2208:	8e 93       	st	-X, r24
    220a:	12 97       	sbiw	r26, 0x02	; 2
    220c:	e0 e0       	ldi	r30, 0x00	; 0
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <__stack+0x17>
    2212:	fb 01       	movw	r30, r22
    2214:	bc 01       	movw	r22, r24
    2216:	db 01       	movw	r26, r22
    2218:	12 96       	adiw	r26, 0x02	; 2
    221a:	8d 91       	ld	r24, X+
    221c:	9c 91       	ld	r25, X
    221e:	13 97       	sbiw	r26, 0x03	; 3
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	b9 f7       	brne	.-18     	; 0x2212 <__stack+0x13>
    2224:	cb 01       	movw	r24, r22
    2226:	02 96       	adiw	r24, 0x02	; 2
    2228:	2d 91       	ld	r18, X+
    222a:	3c 91       	ld	r19, X
    222c:	11 97       	sbiw	r26, 0x01	; 1
    222e:	82 0f       	add	r24, r18
    2230:	93 1f       	adc	r25, r19
    2232:	20 91 d6 06 	lds	r18, 0x06D6
    2236:	30 91 d7 06 	lds	r19, 0x06D7
    223a:	28 17       	cp	r18, r24
    223c:	39 07       	cpc	r19, r25
    223e:	69 f4       	brne	.+26     	; 0x225a <__stack+0x5b>
    2240:	30 97       	sbiw	r30, 0x00	; 0
    2242:	29 f4       	brne	.+10     	; 0x224e <__stack+0x4f>
    2244:	10 92 d9 06 	sts	0x06D9, r1
    2248:	10 92 d8 06 	sts	0x06D8, r1
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <__stack+0x53>
    224e:	13 82       	std	Z+3, r1	; 0x03
    2250:	12 82       	std	Z+2, r1	; 0x02
    2252:	70 93 d7 06 	sts	0x06D7, r23
    2256:	60 93 d6 06 	sts	0x06D6, r22
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <atoi>:
    2264:	fc 01       	movw	r30, r24
    2266:	88 27       	eor	r24, r24
    2268:	99 27       	eor	r25, r25
    226a:	e8 94       	clt
    226c:	21 91       	ld	r18, Z+
    226e:	20 32       	cpi	r18, 0x20	; 32
    2270:	e9 f3       	breq	.-6      	; 0x226c <atoi+0x8>
    2272:	29 30       	cpi	r18, 0x09	; 9
    2274:	10 f0       	brcs	.+4      	; 0x227a <atoi+0x16>
    2276:	2e 30       	cpi	r18, 0x0E	; 14
    2278:	c8 f3       	brcs	.-14     	; 0x226c <atoi+0x8>
    227a:	2b 32       	cpi	r18, 0x2B	; 43
    227c:	41 f0       	breq	.+16     	; 0x228e <atoi+0x2a>
    227e:	2d 32       	cpi	r18, 0x2D	; 45
    2280:	39 f4       	brne	.+14     	; 0x2290 <atoi+0x2c>
    2282:	68 94       	set
    2284:	04 c0       	rjmp	.+8      	; 0x228e <atoi+0x2a>
    2286:	0e 94 8c 11 	call	0x2318	; 0x2318 <__mulhi_const_10>
    228a:	82 0f       	add	r24, r18
    228c:	91 1d       	adc	r25, r1
    228e:	21 91       	ld	r18, Z+
    2290:	20 53       	subi	r18, 0x30	; 48
    2292:	2a 30       	cpi	r18, 0x0A	; 10
    2294:	c0 f3       	brcs	.-16     	; 0x2286 <atoi+0x22>
    2296:	1e f4       	brtc	.+6      	; 0x229e <atoi+0x3a>
    2298:	90 95       	com	r25
    229a:	81 95       	neg	r24
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	08 95       	ret

000022a0 <strtok>:
    22a0:	47 ea       	ldi	r20, 0xA7	; 167
    22a2:	55 e0       	ldi	r21, 0x05	; 5
    22a4:	0e 94 65 11 	call	0x22ca	; 0x22ca <strtok_r>
    22a8:	08 95       	ret

000022aa <strcmp>:
    22aa:	fb 01       	movw	r30, r22
    22ac:	dc 01       	movw	r26, r24
    22ae:	8d 91       	ld	r24, X+
    22b0:	01 90       	ld	r0, Z+
    22b2:	80 19       	sub	r24, r0
    22b4:	01 10       	cpse	r0, r1
    22b6:	d9 f3       	breq	.-10     	; 0x22ae <strcmp+0x4>
    22b8:	99 0b       	sbc	r25, r25
    22ba:	08 95       	ret

000022bc <strcpy>:
    22bc:	fb 01       	movw	r30, r22
    22be:	dc 01       	movw	r26, r24
    22c0:	01 90       	ld	r0, Z+
    22c2:	0d 92       	st	X+, r0
    22c4:	00 20       	and	r0, r0
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <strcpy+0x4>
    22c8:	08 95       	ret

000022ca <strtok_r>:
    22ca:	fa 01       	movw	r30, r20
    22cc:	a1 91       	ld	r26, Z+
    22ce:	b0 81       	ld	r27, Z
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	19 f4       	brne	.+6      	; 0x22da <strtok_r+0x10>
    22d4:	10 97       	sbiw	r26, 0x00	; 0
    22d6:	e1 f0       	breq	.+56     	; 0x2310 <strtok_r+0x46>
    22d8:	cd 01       	movw	r24, r26
    22da:	dc 01       	movw	r26, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0d 90       	ld	r0, X+
    22e0:	00 20       	and	r0, r0
    22e2:	11 f4       	brne	.+4      	; 0x22e8 <strtok_r+0x1e>
    22e4:	c0 01       	movw	r24, r0
    22e6:	13 c0       	rjmp	.+38     	; 0x230e <strtok_r+0x44>
    22e8:	fb 01       	movw	r30, r22
    22ea:	21 91       	ld	r18, Z+
    22ec:	22 23       	and	r18, r18
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <strtok_r+0x2c>
    22f0:	20 15       	cp	r18, r0
    22f2:	d9 f7       	brne	.-10     	; 0x22ea <strtok_r+0x20>
    22f4:	f3 cf       	rjmp	.-26     	; 0x22dc <strtok_r+0x12>
    22f6:	fb 01       	movw	r30, r22
    22f8:	21 91       	ld	r18, Z+
    22fa:	20 15       	cp	r18, r0
    22fc:	19 f4       	brne	.+6      	; 0x2304 <strtok_r+0x3a>
    22fe:	1e 92       	st	-X, r1
    2300:	11 96       	adiw	r26, 0x01	; 1
    2302:	06 c0       	rjmp	.+12     	; 0x2310 <strtok_r+0x46>
    2304:	22 23       	and	r18, r18
    2306:	c1 f7       	brne	.-16     	; 0x22f8 <strtok_r+0x2e>
    2308:	0d 90       	ld	r0, X+
    230a:	00 20       	and	r0, r0
    230c:	a1 f7       	brne	.-24     	; 0x22f6 <strtok_r+0x2c>
    230e:	d0 01       	movw	r26, r0
    2310:	fa 01       	movw	r30, r20
    2312:	a1 93       	st	Z+, r26
    2314:	b0 83       	st	Z, r27
    2316:	08 95       	ret

00002318 <__mulhi_const_10>:
    2318:	7a e0       	ldi	r23, 0x0A	; 10
    231a:	97 9f       	mul	r25, r23
    231c:	90 2d       	mov	r25, r0
    231e:	87 9f       	mul	r24, r23
    2320:	80 2d       	mov	r24, r0
    2322:	91 0d       	add	r25, r1
    2324:	11 24       	eor	r1, r1
    2326:	08 95       	ret

00002328 <fgets>:
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	8c 01       	movw	r16, r24
    233a:	6a 01       	movw	r12, r20
    233c:	fa 01       	movw	r30, r20
    233e:	83 81       	ldd	r24, Z+3	; 0x03
    2340:	80 ff       	sbrs	r24, 0
    2342:	1a c0       	rjmp	.+52     	; 0x2378 <fgets+0x50>
    2344:	16 16       	cp	r1, r22
    2346:	17 06       	cpc	r1, r23
    2348:	bc f4       	brge	.+46     	; 0x2378 <fgets+0x50>
    234a:	7b 01       	movw	r14, r22
    234c:	e8 01       	movw	r28, r16
    234e:	0e c0       	rjmp	.+28     	; 0x236c <fgets+0x44>
    2350:	c6 01       	movw	r24, r12
    2352:	0e 94 81 14 	call	0x2902	; 0x2902 <fgetc>
    2356:	ff ef       	ldi	r31, 0xFF	; 255
    2358:	8f 3f       	cpi	r24, 0xFF	; 255
    235a:	9f 07       	cpc	r25, r31
    235c:	69 f0       	breq	.+26     	; 0x2378 <fgets+0x50>
    235e:	89 93       	st	Y+, r24
    2360:	08 94       	sec
    2362:	e1 08       	sbc	r14, r1
    2364:	f1 08       	sbc	r15, r1
    2366:	8a 30       	cpi	r24, 0x0A	; 10
    2368:	91 05       	cpc	r25, r1
    236a:	21 f0       	breq	.+8      	; 0x2374 <fgets+0x4c>
    236c:	21 e0       	ldi	r18, 0x01	; 1
    236e:	e2 16       	cp	r14, r18
    2370:	f1 04       	cpc	r15, r1
    2372:	71 f7       	brne	.-36     	; 0x2350 <fgets+0x28>
    2374:	18 82       	st	Y, r1
    2376:	02 c0       	rjmp	.+4      	; 0x237c <fgets+0x54>
    2378:	00 e0       	ldi	r16, 0x00	; 0
    237a:	10 e0       	ldi	r17, 0x00	; 0
    237c:	c8 01       	movw	r24, r16
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	08 95       	ret

00002390 <gets>:
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	8c 01       	movw	r16, r24
    239a:	e0 91 da 06 	lds	r30, 0x06DA
    239e:	f0 91 db 06 	lds	r31, 0x06DB
    23a2:	83 81       	ldd	r24, Z+3	; 0x03
    23a4:	80 ff       	sbrs	r24, 0
    23a6:	12 c0       	rjmp	.+36     	; 0x23cc <gets+0x3c>
    23a8:	e8 01       	movw	r28, r16
    23aa:	80 91 da 06 	lds	r24, 0x06DA
    23ae:	90 91 db 06 	lds	r25, 0x06DB
    23b2:	0e 94 81 14 	call	0x2902	; 0x2902 <fgetc>
    23b6:	2f ef       	ldi	r18, 0xFF	; 255
    23b8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ba:	92 07       	cpc	r25, r18
    23bc:	39 f0       	breq	.+14     	; 0x23cc <gets+0x3c>
    23be:	89 93       	st	Y+, r24
    23c0:	8a 30       	cpi	r24, 0x0A	; 10
    23c2:	91 05       	cpc	r25, r1
    23c4:	91 f7       	brne	.-28     	; 0x23aa <gets+0x1a>
    23c6:	21 97       	sbiw	r28, 0x01	; 1
    23c8:	18 82       	st	Y, r1
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <gets+0x40>
    23cc:	00 e0       	ldi	r16, 0x00	; 0
    23ce:	10 e0       	ldi	r17, 0x00	; 0
    23d0:	c8 01       	movw	r24, r16
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <printf>:
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	fe 01       	movw	r30, r28
    23e6:	36 96       	adiw	r30, 0x06	; 6
    23e8:	61 91       	ld	r22, Z+
    23ea:	71 91       	ld	r23, Z+
    23ec:	80 91 dc 06 	lds	r24, 0x06DC
    23f0:	90 91 dd 06 	lds	r25, 0x06DD
    23f4:	af 01       	movw	r20, r30
    23f6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <vfprintf>
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	08 95       	ret

00002400 <putchar>:
    2400:	60 91 dc 06 	lds	r22, 0x06DC
    2404:	70 91 dd 06 	lds	r23, 0x06DD
    2408:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    240c:	08 95       	ret

0000240e <puts>:
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	8c 01       	movw	r16, r24
    2418:	e0 91 dc 06 	lds	r30, 0x06DC
    241c:	f0 91 dd 06 	lds	r31, 0x06DD
    2420:	83 81       	ldd	r24, Z+3	; 0x03
    2422:	81 ff       	sbrs	r24, 1
    2424:	1a c0       	rjmp	.+52     	; 0x245a <puts+0x4c>
    2426:	c0 e0       	ldi	r28, 0x00	; 0
    2428:	d0 e0       	ldi	r29, 0x00	; 0
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <puts+0x28>
    242c:	19 95       	eicall
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	11 f0       	breq	.+4      	; 0x2436 <puts+0x28>
    2432:	cf ef       	ldi	r28, 0xFF	; 255
    2434:	df ef       	ldi	r29, 0xFF	; 255
    2436:	f8 01       	movw	r30, r16
    2438:	81 91       	ld	r24, Z+
    243a:	8f 01       	movw	r16, r30
    243c:	60 91 dc 06 	lds	r22, 0x06DC
    2440:	70 91 dd 06 	lds	r23, 0x06DD
    2444:	db 01       	movw	r26, r22
    2446:	18 96       	adiw	r26, 0x08	; 8
    2448:	ed 91       	ld	r30, X+
    244a:	fc 91       	ld	r31, X
    244c:	19 97       	sbiw	r26, 0x09	; 9
    244e:	88 23       	and	r24, r24
    2450:	69 f7       	brne	.-38     	; 0x242c <puts+0x1e>
    2452:	8a e0       	ldi	r24, 0x0A	; 10
    2454:	19 95       	eicall
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	11 f0       	breq	.+4      	; 0x245e <puts+0x50>
    245a:	cf ef       	ldi	r28, 0xFF	; 255
    245c:	df ef       	ldi	r29, 0xFF	; 255
    245e:	ce 01       	movw	r24, r28
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	08 95       	ret

0000246a <sprintf>:
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	cf 93       	push	r28
    2470:	df 93       	push	r29
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	2e 97       	sbiw	r28, 0x0e	; 14
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	f8 94       	cli
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	cd bf       	out	0x3d, r28	; 61
    2482:	0e 89       	ldd	r16, Y+22	; 0x16
    2484:	1f 89       	ldd	r17, Y+23	; 0x17
    2486:	86 e0       	ldi	r24, 0x06	; 6
    2488:	8c 83       	std	Y+4, r24	; 0x04
    248a:	1a 83       	std	Y+2, r17	; 0x02
    248c:	09 83       	std	Y+1, r16	; 0x01
    248e:	8f ef       	ldi	r24, 0xFF	; 255
    2490:	9f e7       	ldi	r25, 0x7F	; 127
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	ae 01       	movw	r20, r28
    2498:	46 5e       	subi	r20, 0xE6	; 230
    249a:	5f 4f       	sbci	r21, 0xFF	; 255
    249c:	ce 01       	movw	r24, r28
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	68 8d       	ldd	r22, Y+24	; 0x18
    24a2:	79 8d       	ldd	r23, Y+25	; 0x19
    24a4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <vfprintf>
    24a8:	ef 81       	ldd	r30, Y+7	; 0x07
    24aa:	f8 85       	ldd	r31, Y+8	; 0x08
    24ac:	e0 0f       	add	r30, r16
    24ae:	f1 1f       	adc	r31, r17
    24b0:	10 82       	st	Z, r1
    24b2:	2e 96       	adiw	r28, 0x0e	; 14
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	08 95       	ret

000024c8 <vfprintf>:
    24c8:	2f 92       	push	r2
    24ca:	3f 92       	push	r3
    24cc:	4f 92       	push	r4
    24ce:	5f 92       	push	r5
    24d0:	6f 92       	push	r6
    24d2:	7f 92       	push	r7
    24d4:	8f 92       	push	r8
    24d6:	9f 92       	push	r9
    24d8:	af 92       	push	r10
    24da:	bf 92       	push	r11
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	2d 97       	sbiw	r28, 0x0d	; 13
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	3c 01       	movw	r6, r24
    24fe:	7d 87       	std	Y+13, r23	; 0x0d
    2500:	6c 87       	std	Y+12, r22	; 0x0c
    2502:	5a 01       	movw	r10, r20
    2504:	fc 01       	movw	r30, r24
    2506:	17 82       	std	Z+7, r1	; 0x07
    2508:	16 82       	std	Z+6, r1	; 0x06
    250a:	83 81       	ldd	r24, Z+3	; 0x03
    250c:	81 ff       	sbrs	r24, 1
    250e:	c8 c1       	rjmp	.+912    	; 0x28a0 <vfprintf+0x3d8>
    2510:	2e 01       	movw	r4, r28
    2512:	08 94       	sec
    2514:	41 1c       	adc	r4, r1
    2516:	51 1c       	adc	r5, r1
    2518:	f3 01       	movw	r30, r6
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	ec 85       	ldd	r30, Y+12	; 0x0c
    251e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2520:	93 fd       	sbrc	r25, 3
    2522:	85 91       	lpm	r24, Z+
    2524:	93 ff       	sbrs	r25, 3
    2526:	81 91       	ld	r24, Z+
    2528:	fd 87       	std	Y+13, r31	; 0x0d
    252a:	ec 87       	std	Y+12, r30	; 0x0c
    252c:	88 23       	and	r24, r24
    252e:	09 f4       	brne	.+2      	; 0x2532 <vfprintf+0x6a>
    2530:	b3 c1       	rjmp	.+870    	; 0x2898 <vfprintf+0x3d0>
    2532:	85 32       	cpi	r24, 0x25	; 37
    2534:	41 f4       	brne	.+16     	; 0x2546 <vfprintf+0x7e>
    2536:	93 fd       	sbrc	r25, 3
    2538:	85 91       	lpm	r24, Z+
    253a:	93 ff       	sbrs	r25, 3
    253c:	81 91       	ld	r24, Z+
    253e:	fd 87       	std	Y+13, r31	; 0x0d
    2540:	ec 87       	std	Y+12, r30	; 0x0c
    2542:	85 32       	cpi	r24, 0x25	; 37
    2544:	29 f4       	brne	.+10     	; 0x2550 <vfprintf+0x88>
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	b3 01       	movw	r22, r6
    254a:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    254e:	e4 cf       	rjmp	.-56     	; 0x2518 <vfprintf+0x50>
    2550:	ff 24       	eor	r15, r15
    2552:	ee 24       	eor	r14, r14
    2554:	10 e0       	ldi	r17, 0x00	; 0
    2556:	10 32       	cpi	r17, 0x20	; 32
    2558:	b0 f4       	brcc	.+44     	; 0x2586 <vfprintf+0xbe>
    255a:	8b 32       	cpi	r24, 0x2B	; 43
    255c:	69 f0       	breq	.+26     	; 0x2578 <vfprintf+0xb0>
    255e:	8c 32       	cpi	r24, 0x2C	; 44
    2560:	28 f4       	brcc	.+10     	; 0x256c <vfprintf+0xa4>
    2562:	80 32       	cpi	r24, 0x20	; 32
    2564:	51 f0       	breq	.+20     	; 0x257a <vfprintf+0xb2>
    2566:	83 32       	cpi	r24, 0x23	; 35
    2568:	71 f4       	brne	.+28     	; 0x2586 <vfprintf+0xbe>
    256a:	0b c0       	rjmp	.+22     	; 0x2582 <vfprintf+0xba>
    256c:	8d 32       	cpi	r24, 0x2D	; 45
    256e:	39 f0       	breq	.+14     	; 0x257e <vfprintf+0xb6>
    2570:	80 33       	cpi	r24, 0x30	; 48
    2572:	49 f4       	brne	.+18     	; 0x2586 <vfprintf+0xbe>
    2574:	11 60       	ori	r17, 0x01	; 1
    2576:	2c c0       	rjmp	.+88     	; 0x25d0 <vfprintf+0x108>
    2578:	12 60       	ori	r17, 0x02	; 2
    257a:	14 60       	ori	r17, 0x04	; 4
    257c:	29 c0       	rjmp	.+82     	; 0x25d0 <vfprintf+0x108>
    257e:	18 60       	ori	r17, 0x08	; 8
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <vfprintf+0x108>
    2582:	10 61       	ori	r17, 0x10	; 16
    2584:	25 c0       	rjmp	.+74     	; 0x25d0 <vfprintf+0x108>
    2586:	17 fd       	sbrc	r17, 7
    2588:	2e c0       	rjmp	.+92     	; 0x25e6 <vfprintf+0x11e>
    258a:	28 2f       	mov	r18, r24
    258c:	20 53       	subi	r18, 0x30	; 48
    258e:	2a 30       	cpi	r18, 0x0A	; 10
    2590:	98 f4       	brcc	.+38     	; 0x25b8 <vfprintf+0xf0>
    2592:	16 ff       	sbrs	r17, 6
    2594:	08 c0       	rjmp	.+16     	; 0x25a6 <vfprintf+0xde>
    2596:	8f 2d       	mov	r24, r15
    2598:	88 0f       	add	r24, r24
    259a:	f8 2e       	mov	r15, r24
    259c:	ff 0c       	add	r15, r15
    259e:	ff 0c       	add	r15, r15
    25a0:	f8 0e       	add	r15, r24
    25a2:	f2 0e       	add	r15, r18
    25a4:	15 c0       	rjmp	.+42     	; 0x25d0 <vfprintf+0x108>
    25a6:	8e 2d       	mov	r24, r14
    25a8:	88 0f       	add	r24, r24
    25aa:	e8 2e       	mov	r14, r24
    25ac:	ee 0c       	add	r14, r14
    25ae:	ee 0c       	add	r14, r14
    25b0:	e8 0e       	add	r14, r24
    25b2:	e2 0e       	add	r14, r18
    25b4:	10 62       	ori	r17, 0x20	; 32
    25b6:	0c c0       	rjmp	.+24     	; 0x25d0 <vfprintf+0x108>
    25b8:	8e 32       	cpi	r24, 0x2E	; 46
    25ba:	21 f4       	brne	.+8      	; 0x25c4 <vfprintf+0xfc>
    25bc:	16 fd       	sbrc	r17, 6
    25be:	6c c1       	rjmp	.+728    	; 0x2898 <vfprintf+0x3d0>
    25c0:	10 64       	ori	r17, 0x40	; 64
    25c2:	06 c0       	rjmp	.+12     	; 0x25d0 <vfprintf+0x108>
    25c4:	8c 36       	cpi	r24, 0x6C	; 108
    25c6:	11 f4       	brne	.+4      	; 0x25cc <vfprintf+0x104>
    25c8:	10 68       	ori	r17, 0x80	; 128
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <vfprintf+0x108>
    25cc:	88 36       	cpi	r24, 0x68	; 104
    25ce:	59 f4       	brne	.+22     	; 0x25e6 <vfprintf+0x11e>
    25d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    25d2:	fd 85       	ldd	r31, Y+13	; 0x0d
    25d4:	93 fd       	sbrc	r25, 3
    25d6:	85 91       	lpm	r24, Z+
    25d8:	93 ff       	sbrs	r25, 3
    25da:	81 91       	ld	r24, Z+
    25dc:	fd 87       	std	Y+13, r31	; 0x0d
    25de:	ec 87       	std	Y+12, r30	; 0x0c
    25e0:	88 23       	and	r24, r24
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <vfprintf+0x11e>
    25e4:	b8 cf       	rjmp	.-144    	; 0x2556 <vfprintf+0x8e>
    25e6:	98 2f       	mov	r25, r24
    25e8:	95 54       	subi	r25, 0x45	; 69
    25ea:	93 30       	cpi	r25, 0x03	; 3
    25ec:	18 f0       	brcs	.+6      	; 0x25f4 <vfprintf+0x12c>
    25ee:	90 52       	subi	r25, 0x20	; 32
    25f0:	93 30       	cpi	r25, 0x03	; 3
    25f2:	38 f4       	brcc	.+14     	; 0x2602 <vfprintf+0x13a>
    25f4:	24 e0       	ldi	r18, 0x04	; 4
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	a2 0e       	add	r10, r18
    25fa:	b3 1e       	adc	r11, r19
    25fc:	3f e3       	ldi	r19, 0x3F	; 63
    25fe:	39 83       	std	Y+1, r19	; 0x01
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <vfprintf+0x158>
    2602:	83 36       	cpi	r24, 0x63	; 99
    2604:	31 f0       	breq	.+12     	; 0x2612 <vfprintf+0x14a>
    2606:	83 37       	cpi	r24, 0x73	; 115
    2608:	81 f0       	breq	.+32     	; 0x262a <vfprintf+0x162>
    260a:	83 35       	cpi	r24, 0x53	; 83
    260c:	09 f0       	breq	.+2      	; 0x2610 <vfprintf+0x148>
    260e:	5a c0       	rjmp	.+180    	; 0x26c4 <vfprintf+0x1fc>
    2610:	22 c0       	rjmp	.+68     	; 0x2656 <vfprintf+0x18e>
    2612:	f5 01       	movw	r30, r10
    2614:	80 81       	ld	r24, Z
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	22 e0       	ldi	r18, 0x02	; 2
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	a2 0e       	add	r10, r18
    261e:	b3 1e       	adc	r11, r19
    2620:	21 e0       	ldi	r18, 0x01	; 1
    2622:	c2 2e       	mov	r12, r18
    2624:	d1 2c       	mov	r13, r1
    2626:	42 01       	movw	r8, r4
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <vfprintf+0x18a>
    262a:	92 e0       	ldi	r25, 0x02	; 2
    262c:	29 2e       	mov	r2, r25
    262e:	31 2c       	mov	r3, r1
    2630:	2a 0c       	add	r2, r10
    2632:	3b 1c       	adc	r3, r11
    2634:	f5 01       	movw	r30, r10
    2636:	80 80       	ld	r8, Z
    2638:	91 80       	ldd	r9, Z+1	; 0x01
    263a:	16 ff       	sbrs	r17, 6
    263c:	03 c0       	rjmp	.+6      	; 0x2644 <vfprintf+0x17c>
    263e:	6f 2d       	mov	r22, r15
    2640:	70 e0       	ldi	r23, 0x00	; 0
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <vfprintf+0x180>
    2644:	6f ef       	ldi	r22, 0xFF	; 255
    2646:	7f ef       	ldi	r23, 0xFF	; 255
    2648:	c4 01       	movw	r24, r8
    264a:	0e 94 76 14 	call	0x28ec	; 0x28ec <strnlen>
    264e:	6c 01       	movw	r12, r24
    2650:	51 01       	movw	r10, r2
    2652:	1f 77       	andi	r17, 0x7F	; 127
    2654:	15 c0       	rjmp	.+42     	; 0x2680 <vfprintf+0x1b8>
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	28 2e       	mov	r2, r24
    265a:	31 2c       	mov	r3, r1
    265c:	2a 0c       	add	r2, r10
    265e:	3b 1c       	adc	r3, r11
    2660:	f5 01       	movw	r30, r10
    2662:	80 80       	ld	r8, Z
    2664:	91 80       	ldd	r9, Z+1	; 0x01
    2666:	16 ff       	sbrs	r17, 6
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <vfprintf+0x1a8>
    266a:	6f 2d       	mov	r22, r15
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <vfprintf+0x1ac>
    2670:	6f ef       	ldi	r22, 0xFF	; 255
    2672:	7f ef       	ldi	r23, 0xFF	; 255
    2674:	c4 01       	movw	r24, r8
    2676:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <strnlen_P>
    267a:	6c 01       	movw	r12, r24
    267c:	10 68       	ori	r17, 0x80	; 128
    267e:	51 01       	movw	r10, r2
    2680:	13 fd       	sbrc	r17, 3
    2682:	1c c0       	rjmp	.+56     	; 0x26bc <vfprintf+0x1f4>
    2684:	06 c0       	rjmp	.+12     	; 0x2692 <vfprintf+0x1ca>
    2686:	80 e2       	ldi	r24, 0x20	; 32
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	b3 01       	movw	r22, r6
    268c:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2690:	ea 94       	dec	r14
    2692:	8e 2d       	mov	r24, r14
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	c8 16       	cp	r12, r24
    2698:	d9 06       	cpc	r13, r25
    269a:	a8 f3       	brcs	.-22     	; 0x2686 <vfprintf+0x1be>
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <vfprintf+0x1f4>
    269e:	f4 01       	movw	r30, r8
    26a0:	17 fd       	sbrc	r17, 7
    26a2:	85 91       	lpm	r24, Z+
    26a4:	17 ff       	sbrs	r17, 7
    26a6:	81 91       	ld	r24, Z+
    26a8:	4f 01       	movw	r8, r30
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	b3 01       	movw	r22, r6
    26ae:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    26b2:	e1 10       	cpse	r14, r1
    26b4:	ea 94       	dec	r14
    26b6:	08 94       	sec
    26b8:	c1 08       	sbc	r12, r1
    26ba:	d1 08       	sbc	r13, r1
    26bc:	c1 14       	cp	r12, r1
    26be:	d1 04       	cpc	r13, r1
    26c0:	71 f7       	brne	.-36     	; 0x269e <vfprintf+0x1d6>
    26c2:	e7 c0       	rjmp	.+462    	; 0x2892 <vfprintf+0x3ca>
    26c4:	84 36       	cpi	r24, 0x64	; 100
    26c6:	11 f0       	breq	.+4      	; 0x26cc <vfprintf+0x204>
    26c8:	89 36       	cpi	r24, 0x69	; 105
    26ca:	51 f5       	brne	.+84     	; 0x2720 <vfprintf+0x258>
    26cc:	f5 01       	movw	r30, r10
    26ce:	17 ff       	sbrs	r17, 7
    26d0:	07 c0       	rjmp	.+14     	; 0x26e0 <vfprintf+0x218>
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	a2 81       	ldd	r26, Z+2	; 0x02
    26d8:	b3 81       	ldd	r27, Z+3	; 0x03
    26da:	24 e0       	ldi	r18, 0x04	; 4
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	08 c0       	rjmp	.+16     	; 0x26f0 <vfprintf+0x228>
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	aa 27       	eor	r26, r26
    26e6:	97 fd       	sbrc	r25, 7
    26e8:	a0 95       	com	r26
    26ea:	ba 2f       	mov	r27, r26
    26ec:	22 e0       	ldi	r18, 0x02	; 2
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	a2 0e       	add	r10, r18
    26f2:	b3 1e       	adc	r11, r19
    26f4:	01 2f       	mov	r16, r17
    26f6:	0f 76       	andi	r16, 0x6F	; 111
    26f8:	b7 ff       	sbrs	r27, 7
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <vfprintf+0x244>
    26fc:	b0 95       	com	r27
    26fe:	a0 95       	com	r26
    2700:	90 95       	com	r25
    2702:	81 95       	neg	r24
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	af 4f       	sbci	r26, 0xFF	; 255
    2708:	bf 4f       	sbci	r27, 0xFF	; 255
    270a:	00 68       	ori	r16, 0x80	; 128
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	a2 01       	movw	r20, r4
    2712:	2a e0       	ldi	r18, 0x0A	; 10
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	0e 94 ed 14 	call	0x29da	; 0x29da <__ultoa_invert>
    271a:	d8 2e       	mov	r13, r24
    271c:	d4 18       	sub	r13, r4
    271e:	3f c0       	rjmp	.+126    	; 0x279e <vfprintf+0x2d6>
    2720:	85 37       	cpi	r24, 0x75	; 117
    2722:	21 f4       	brne	.+8      	; 0x272c <vfprintf+0x264>
    2724:	1f 7e       	andi	r17, 0xEF	; 239
    2726:	2a e0       	ldi	r18, 0x0A	; 10
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	20 c0       	rjmp	.+64     	; 0x276c <vfprintf+0x2a4>
    272c:	19 7f       	andi	r17, 0xF9	; 249
    272e:	8f 36       	cpi	r24, 0x6F	; 111
    2730:	a9 f0       	breq	.+42     	; 0x275c <vfprintf+0x294>
    2732:	80 37       	cpi	r24, 0x70	; 112
    2734:	20 f4       	brcc	.+8      	; 0x273e <vfprintf+0x276>
    2736:	88 35       	cpi	r24, 0x58	; 88
    2738:	09 f0       	breq	.+2      	; 0x273c <vfprintf+0x274>
    273a:	ae c0       	rjmp	.+348    	; 0x2898 <vfprintf+0x3d0>
    273c:	0b c0       	rjmp	.+22     	; 0x2754 <vfprintf+0x28c>
    273e:	80 37       	cpi	r24, 0x70	; 112
    2740:	21 f0       	breq	.+8      	; 0x274a <vfprintf+0x282>
    2742:	88 37       	cpi	r24, 0x78	; 120
    2744:	09 f0       	breq	.+2      	; 0x2748 <vfprintf+0x280>
    2746:	a8 c0       	rjmp	.+336    	; 0x2898 <vfprintf+0x3d0>
    2748:	01 c0       	rjmp	.+2      	; 0x274c <vfprintf+0x284>
    274a:	10 61       	ori	r17, 0x10	; 16
    274c:	14 ff       	sbrs	r17, 4
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <vfprintf+0x29a>
    2750:	14 60       	ori	r17, 0x04	; 4
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <vfprintf+0x29a>
    2754:	14 ff       	sbrs	r17, 4
    2756:	08 c0       	rjmp	.+16     	; 0x2768 <vfprintf+0x2a0>
    2758:	16 60       	ori	r17, 0x06	; 6
    275a:	06 c0       	rjmp	.+12     	; 0x2768 <vfprintf+0x2a0>
    275c:	28 e0       	ldi	r18, 0x08	; 8
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	05 c0       	rjmp	.+10     	; 0x276c <vfprintf+0x2a4>
    2762:	20 e1       	ldi	r18, 0x10	; 16
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	02 c0       	rjmp	.+4      	; 0x276c <vfprintf+0x2a4>
    2768:	20 e1       	ldi	r18, 0x10	; 16
    276a:	32 e0       	ldi	r19, 0x02	; 2
    276c:	f5 01       	movw	r30, r10
    276e:	17 ff       	sbrs	r17, 7
    2770:	07 c0       	rjmp	.+14     	; 0x2780 <vfprintf+0x2b8>
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	44 e0       	ldi	r20, 0x04	; 4
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	06 c0       	rjmp	.+12     	; 0x278c <vfprintf+0x2c4>
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	42 e0       	ldi	r20, 0x02	; 2
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	a4 0e       	add	r10, r20
    278e:	b5 1e       	adc	r11, r21
    2790:	a2 01       	movw	r20, r4
    2792:	0e 94 ed 14 	call	0x29da	; 0x29da <__ultoa_invert>
    2796:	d8 2e       	mov	r13, r24
    2798:	d4 18       	sub	r13, r4
    279a:	01 2f       	mov	r16, r17
    279c:	0f 77       	andi	r16, 0x7F	; 127
    279e:	06 ff       	sbrs	r16, 6
    27a0:	09 c0       	rjmp	.+18     	; 0x27b4 <vfprintf+0x2ec>
    27a2:	0e 7f       	andi	r16, 0xFE	; 254
    27a4:	df 14       	cp	r13, r15
    27a6:	30 f4       	brcc	.+12     	; 0x27b4 <vfprintf+0x2ec>
    27a8:	04 ff       	sbrs	r16, 4
    27aa:	06 c0       	rjmp	.+12     	; 0x27b8 <vfprintf+0x2f0>
    27ac:	02 fd       	sbrc	r16, 2
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <vfprintf+0x2f0>
    27b0:	0f 7e       	andi	r16, 0xEF	; 239
    27b2:	02 c0       	rjmp	.+4      	; 0x27b8 <vfprintf+0x2f0>
    27b4:	1d 2d       	mov	r17, r13
    27b6:	01 c0       	rjmp	.+2      	; 0x27ba <vfprintf+0x2f2>
    27b8:	1f 2d       	mov	r17, r15
    27ba:	80 2f       	mov	r24, r16
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	04 ff       	sbrs	r16, 4
    27c0:	0c c0       	rjmp	.+24     	; 0x27da <vfprintf+0x312>
    27c2:	fe 01       	movw	r30, r28
    27c4:	ed 0d       	add	r30, r13
    27c6:	f1 1d       	adc	r31, r1
    27c8:	20 81       	ld	r18, Z
    27ca:	20 33       	cpi	r18, 0x30	; 48
    27cc:	11 f4       	brne	.+4      	; 0x27d2 <vfprintf+0x30a>
    27ce:	09 7e       	andi	r16, 0xE9	; 233
    27d0:	09 c0       	rjmp	.+18     	; 0x27e4 <vfprintf+0x31c>
    27d2:	02 ff       	sbrs	r16, 2
    27d4:	06 c0       	rjmp	.+12     	; 0x27e2 <vfprintf+0x31a>
    27d6:	1e 5f       	subi	r17, 0xFE	; 254
    27d8:	05 c0       	rjmp	.+10     	; 0x27e4 <vfprintf+0x31c>
    27da:	86 78       	andi	r24, 0x86	; 134
    27dc:	90 70       	andi	r25, 0x00	; 0
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	09 f0       	breq	.+2      	; 0x27e4 <vfprintf+0x31c>
    27e2:	1f 5f       	subi	r17, 0xFF	; 255
    27e4:	80 2e       	mov	r8, r16
    27e6:	99 24       	eor	r9, r9
    27e8:	03 fd       	sbrc	r16, 3
    27ea:	12 c0       	rjmp	.+36     	; 0x2810 <vfprintf+0x348>
    27ec:	00 ff       	sbrs	r16, 0
    27ee:	0d c0       	rjmp	.+26     	; 0x280a <vfprintf+0x342>
    27f0:	fd 2c       	mov	r15, r13
    27f2:	1e 15       	cp	r17, r14
    27f4:	50 f4       	brcc	.+20     	; 0x280a <vfprintf+0x342>
    27f6:	fe 0c       	add	r15, r14
    27f8:	f1 1a       	sub	r15, r17
    27fa:	1e 2d       	mov	r17, r14
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <vfprintf+0x342>
    27fe:	80 e2       	ldi	r24, 0x20	; 32
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	b3 01       	movw	r22, r6
    2804:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2808:	1f 5f       	subi	r17, 0xFF	; 255
    280a:	1e 15       	cp	r17, r14
    280c:	c0 f3       	brcs	.-16     	; 0x27fe <vfprintf+0x336>
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <vfprintf+0x350>
    2810:	1e 15       	cp	r17, r14
    2812:	10 f4       	brcc	.+4      	; 0x2818 <vfprintf+0x350>
    2814:	e1 1a       	sub	r14, r17
    2816:	01 c0       	rjmp	.+2      	; 0x281a <vfprintf+0x352>
    2818:	ee 24       	eor	r14, r14
    281a:	84 fe       	sbrs	r8, 4
    281c:	0f c0       	rjmp	.+30     	; 0x283c <vfprintf+0x374>
    281e:	80 e3       	ldi	r24, 0x30	; 48
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	b3 01       	movw	r22, r6
    2824:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2828:	82 fe       	sbrs	r8, 2
    282a:	1f c0       	rjmp	.+62     	; 0x286a <vfprintf+0x3a2>
    282c:	81 fe       	sbrs	r8, 1
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <vfprintf+0x36e>
    2830:	88 e5       	ldi	r24, 0x58	; 88
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	10 c0       	rjmp	.+32     	; 0x2856 <vfprintf+0x38e>
    2836:	88 e7       	ldi	r24, 0x78	; 120
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0d c0       	rjmp	.+26     	; 0x2856 <vfprintf+0x38e>
    283c:	c4 01       	movw	r24, r8
    283e:	86 78       	andi	r24, 0x86	; 134
    2840:	90 70       	andi	r25, 0x00	; 0
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	91 f0       	breq	.+36     	; 0x286a <vfprintf+0x3a2>
    2846:	81 fc       	sbrc	r8, 1
    2848:	02 c0       	rjmp	.+4      	; 0x284e <vfprintf+0x386>
    284a:	80 e2       	ldi	r24, 0x20	; 32
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <vfprintf+0x388>
    284e:	8b e2       	ldi	r24, 0x2B	; 43
    2850:	07 fd       	sbrc	r16, 7
    2852:	8d e2       	ldi	r24, 0x2D	; 45
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	b3 01       	movw	r22, r6
    2858:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    285c:	06 c0       	rjmp	.+12     	; 0x286a <vfprintf+0x3a2>
    285e:	80 e3       	ldi	r24, 0x30	; 48
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	b3 01       	movw	r22, r6
    2864:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2868:	fa 94       	dec	r15
    286a:	df 14       	cp	r13, r15
    286c:	c0 f3       	brcs	.-16     	; 0x285e <vfprintf+0x396>
    286e:	da 94       	dec	r13
    2870:	f2 01       	movw	r30, r4
    2872:	ed 0d       	add	r30, r13
    2874:	f1 1d       	adc	r31, r1
    2876:	80 81       	ld	r24, Z
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	b3 01       	movw	r22, r6
    287c:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2880:	dd 20       	and	r13, r13
    2882:	a9 f7       	brne	.-22     	; 0x286e <vfprintf+0x3a6>
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <vfprintf+0x3ca>
    2886:	80 e2       	ldi	r24, 0x20	; 32
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	b3 01       	movw	r22, r6
    288c:	0e 94 c1 14 	call	0x2982	; 0x2982 <fputc>
    2890:	ea 94       	dec	r14
    2892:	ee 20       	and	r14, r14
    2894:	c1 f7       	brne	.-16     	; 0x2886 <vfprintf+0x3be>
    2896:	40 ce       	rjmp	.-896    	; 0x2518 <vfprintf+0x50>
    2898:	f3 01       	movw	r30, r6
    289a:	86 81       	ldd	r24, Z+6	; 0x06
    289c:	97 81       	ldd	r25, Z+7	; 0x07
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <vfprintf+0x3dc>
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	2d 96       	adiw	r28, 0x0d	; 13
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	bf 90       	pop	r11
    28c2:	af 90       	pop	r10
    28c4:	9f 90       	pop	r9
    28c6:	8f 90       	pop	r8
    28c8:	7f 90       	pop	r7
    28ca:	6f 90       	pop	r6
    28cc:	5f 90       	pop	r5
    28ce:	4f 90       	pop	r4
    28d0:	3f 90       	pop	r3
    28d2:	2f 90       	pop	r2
    28d4:	08 95       	ret

000028d6 <strnlen_P>:
    28d6:	fc 01       	movw	r30, r24
    28d8:	05 90       	lpm	r0, Z+
    28da:	61 50       	subi	r22, 0x01	; 1
    28dc:	70 40       	sbci	r23, 0x00	; 0
    28de:	01 10       	cpse	r0, r1
    28e0:	d8 f7       	brcc	.-10     	; 0x28d8 <strnlen_P+0x2>
    28e2:	80 95       	com	r24
    28e4:	90 95       	com	r25
    28e6:	8e 0f       	add	r24, r30
    28e8:	9f 1f       	adc	r25, r31
    28ea:	08 95       	ret

000028ec <strnlen>:
    28ec:	fc 01       	movw	r30, r24
    28ee:	61 50       	subi	r22, 0x01	; 1
    28f0:	70 40       	sbci	r23, 0x00	; 0
    28f2:	01 90       	ld	r0, Z+
    28f4:	01 10       	cpse	r0, r1
    28f6:	d8 f7       	brcc	.-10     	; 0x28ee <strnlen+0x2>
    28f8:	80 95       	com	r24
    28fa:	90 95       	com	r25
    28fc:	8e 0f       	add	r24, r30
    28fe:	9f 1f       	adc	r25, r31
    2900:	08 95       	ret

00002902 <fgetc>:
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	ec 01       	movw	r28, r24
    2908:	2b 81       	ldd	r18, Y+3	; 0x03
    290a:	20 ff       	sbrs	r18, 0
    290c:	35 c0       	rjmp	.+106    	; 0x2978 <fgetc+0x76>
    290e:	26 ff       	sbrs	r18, 6
    2910:	09 c0       	rjmp	.+18     	; 0x2924 <fgetc+0x22>
    2912:	2f 7b       	andi	r18, 0xBF	; 191
    2914:	2b 83       	std	Y+3, r18	; 0x03
    2916:	8e 81       	ldd	r24, Y+6	; 0x06
    2918:	9f 81       	ldd	r25, Y+7	; 0x07
    291a:	01 96       	adiw	r24, 0x01	; 1
    291c:	9f 83       	std	Y+7, r25	; 0x07
    291e:	8e 83       	std	Y+6, r24	; 0x06
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	28 c0       	rjmp	.+80     	; 0x2974 <fgetc+0x72>
    2924:	22 ff       	sbrs	r18, 2
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <fgetc+0x44>
    2928:	e8 81       	ld	r30, Y
    292a:	f9 81       	ldd	r31, Y+1	; 0x01
    292c:	80 81       	ld	r24, Z
    292e:	99 27       	eor	r25, r25
    2930:	87 fd       	sbrc	r24, 7
    2932:	90 95       	com	r25
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	19 f4       	brne	.+6      	; 0x293e <fgetc+0x3c>
    2938:	20 62       	ori	r18, 0x20	; 32
    293a:	2b 83       	std	Y+3, r18	; 0x03
    293c:	1d c0       	rjmp	.+58     	; 0x2978 <fgetc+0x76>
    293e:	31 96       	adiw	r30, 0x01	; 1
    2940:	f9 83       	std	Y+1, r31	; 0x01
    2942:	e8 83       	st	Y, r30
    2944:	11 c0       	rjmp	.+34     	; 0x2968 <fgetc+0x66>
    2946:	ea 85       	ldd	r30, Y+10	; 0x0a
    2948:	fb 85       	ldd	r31, Y+11	; 0x0b
    294a:	ce 01       	movw	r24, r28
    294c:	19 95       	eicall
    294e:	97 ff       	sbrs	r25, 7
    2950:	0b c0       	rjmp	.+22     	; 0x2968 <fgetc+0x66>
    2952:	2b 81       	ldd	r18, Y+3	; 0x03
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	8f 3f       	cpi	r24, 0xFF	; 255
    2958:	93 07       	cpc	r25, r19
    295a:	11 f4       	brne	.+4      	; 0x2960 <fgetc+0x5e>
    295c:	80 e1       	ldi	r24, 0x10	; 16
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <fgetc+0x60>
    2960:	80 e2       	ldi	r24, 0x20	; 32
    2962:	82 2b       	or	r24, r18
    2964:	8b 83       	std	Y+3, r24	; 0x03
    2966:	08 c0       	rjmp	.+16     	; 0x2978 <fgetc+0x76>
    2968:	2e 81       	ldd	r18, Y+6	; 0x06
    296a:	3f 81       	ldd	r19, Y+7	; 0x07
    296c:	2f 5f       	subi	r18, 0xFF	; 255
    296e:	3f 4f       	sbci	r19, 0xFF	; 255
    2970:	3f 83       	std	Y+7, r19	; 0x07
    2972:	2e 83       	std	Y+6, r18	; 0x06
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	02 c0       	rjmp	.+4      	; 0x297c <fgetc+0x7a>
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	08 95       	ret

00002982 <fputc>:
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	8c 01       	movw	r16, r24
    298c:	eb 01       	movw	r28, r22
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	81 ff       	sbrs	r24, 1
    2992:	1b c0       	rjmp	.+54     	; 0x29ca <fputc+0x48>
    2994:	82 ff       	sbrs	r24, 2
    2996:	0d c0       	rjmp	.+26     	; 0x29b2 <fputc+0x30>
    2998:	2e 81       	ldd	r18, Y+6	; 0x06
    299a:	3f 81       	ldd	r19, Y+7	; 0x07
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	28 17       	cp	r18, r24
    29a2:	39 07       	cpc	r19, r25
    29a4:	64 f4       	brge	.+24     	; 0x29be <fputc+0x3c>
    29a6:	e8 81       	ld	r30, Y
    29a8:	f9 81       	ldd	r31, Y+1	; 0x01
    29aa:	01 93       	st	Z+, r16
    29ac:	f9 83       	std	Y+1, r31	; 0x01
    29ae:	e8 83       	st	Y, r30
    29b0:	06 c0       	rjmp	.+12     	; 0x29be <fputc+0x3c>
    29b2:	e8 85       	ldd	r30, Y+8	; 0x08
    29b4:	f9 85       	ldd	r31, Y+9	; 0x09
    29b6:	80 2f       	mov	r24, r16
    29b8:	19 95       	eicall
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	31 f4       	brne	.+12     	; 0x29ca <fputc+0x48>
    29be:	8e 81       	ldd	r24, Y+6	; 0x06
    29c0:	9f 81       	ldd	r25, Y+7	; 0x07
    29c2:	01 96       	adiw	r24, 0x01	; 1
    29c4:	9f 83       	std	Y+7, r25	; 0x07
    29c6:	8e 83       	std	Y+6, r24	; 0x06
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <fputc+0x4c>
    29ca:	0f ef       	ldi	r16, 0xFF	; 255
    29cc:	1f ef       	ldi	r17, 0xFF	; 255
    29ce:	c8 01       	movw	r24, r16
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	08 95       	ret

000029da <__ultoa_invert>:
    29da:	fa 01       	movw	r30, r20
    29dc:	aa 27       	eor	r26, r26
    29de:	28 30       	cpi	r18, 0x08	; 8
    29e0:	51 f1       	breq	.+84     	; 0x2a36 <__ultoa_invert+0x5c>
    29e2:	20 31       	cpi	r18, 0x10	; 16
    29e4:	81 f1       	breq	.+96     	; 0x2a46 <__ultoa_invert+0x6c>
    29e6:	e8 94       	clt
    29e8:	6f 93       	push	r22
    29ea:	6e 7f       	andi	r22, 0xFE	; 254
    29ec:	6e 5f       	subi	r22, 0xFE	; 254
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	8f 4f       	sbci	r24, 0xFF	; 255
    29f2:	9f 4f       	sbci	r25, 0xFF	; 255
    29f4:	af 4f       	sbci	r26, 0xFF	; 255
    29f6:	b1 e0       	ldi	r27, 0x01	; 1
    29f8:	3e d0       	rcall	.+124    	; 0x2a76 <__ultoa_invert+0x9c>
    29fa:	b4 e0       	ldi	r27, 0x04	; 4
    29fc:	3c d0       	rcall	.+120    	; 0x2a76 <__ultoa_invert+0x9c>
    29fe:	67 0f       	add	r22, r23
    2a00:	78 1f       	adc	r23, r24
    2a02:	89 1f       	adc	r24, r25
    2a04:	9a 1f       	adc	r25, r26
    2a06:	a1 1d       	adc	r26, r1
    2a08:	68 0f       	add	r22, r24
    2a0a:	79 1f       	adc	r23, r25
    2a0c:	8a 1f       	adc	r24, r26
    2a0e:	91 1d       	adc	r25, r1
    2a10:	a1 1d       	adc	r26, r1
    2a12:	6a 0f       	add	r22, r26
    2a14:	71 1d       	adc	r23, r1
    2a16:	81 1d       	adc	r24, r1
    2a18:	91 1d       	adc	r25, r1
    2a1a:	a1 1d       	adc	r26, r1
    2a1c:	20 d0       	rcall	.+64     	; 0x2a5e <__ultoa_invert+0x84>
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <__ultoa_invert+0x48>
    2a20:	68 94       	set
    2a22:	3f 91       	pop	r19
    2a24:	2a e0       	ldi	r18, 0x0A	; 10
    2a26:	26 9f       	mul	r18, r22
    2a28:	11 24       	eor	r1, r1
    2a2a:	30 19       	sub	r19, r0
    2a2c:	30 5d       	subi	r19, 0xD0	; 208
    2a2e:	31 93       	st	Z+, r19
    2a30:	de f6       	brtc	.-74     	; 0x29e8 <__ultoa_invert+0xe>
    2a32:	cf 01       	movw	r24, r30
    2a34:	08 95       	ret
    2a36:	46 2f       	mov	r20, r22
    2a38:	47 70       	andi	r20, 0x07	; 7
    2a3a:	40 5d       	subi	r20, 0xD0	; 208
    2a3c:	41 93       	st	Z+, r20
    2a3e:	b3 e0       	ldi	r27, 0x03	; 3
    2a40:	0f d0       	rcall	.+30     	; 0x2a60 <__ultoa_invert+0x86>
    2a42:	c9 f7       	brne	.-14     	; 0x2a36 <__ultoa_invert+0x5c>
    2a44:	f6 cf       	rjmp	.-20     	; 0x2a32 <__ultoa_invert+0x58>
    2a46:	46 2f       	mov	r20, r22
    2a48:	4f 70       	andi	r20, 0x0F	; 15
    2a4a:	40 5d       	subi	r20, 0xD0	; 208
    2a4c:	4a 33       	cpi	r20, 0x3A	; 58
    2a4e:	18 f0       	brcs	.+6      	; 0x2a56 <__ultoa_invert+0x7c>
    2a50:	49 5d       	subi	r20, 0xD9	; 217
    2a52:	31 fd       	sbrc	r19, 1
    2a54:	40 52       	subi	r20, 0x20	; 32
    2a56:	41 93       	st	Z+, r20
    2a58:	02 d0       	rcall	.+4      	; 0x2a5e <__ultoa_invert+0x84>
    2a5a:	a9 f7       	brne	.-22     	; 0x2a46 <__ultoa_invert+0x6c>
    2a5c:	ea cf       	rjmp	.-44     	; 0x2a32 <__ultoa_invert+0x58>
    2a5e:	b4 e0       	ldi	r27, 0x04	; 4
    2a60:	a6 95       	lsr	r26
    2a62:	97 95       	ror	r25
    2a64:	87 95       	ror	r24
    2a66:	77 95       	ror	r23
    2a68:	67 95       	ror	r22
    2a6a:	ba 95       	dec	r27
    2a6c:	c9 f7       	brne	.-14     	; 0x2a60 <__ultoa_invert+0x86>
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	61 05       	cpc	r22, r1
    2a72:	71 05       	cpc	r23, r1
    2a74:	08 95       	ret
    2a76:	9b 01       	movw	r18, r22
    2a78:	ac 01       	movw	r20, r24
    2a7a:	0a 2e       	mov	r0, r26
    2a7c:	06 94       	lsr	r0
    2a7e:	57 95       	ror	r21
    2a80:	47 95       	ror	r20
    2a82:	37 95       	ror	r19
    2a84:	27 95       	ror	r18
    2a86:	ba 95       	dec	r27
    2a88:	c9 f7       	brne	.-14     	; 0x2a7c <__ultoa_invert+0xa2>
    2a8a:	62 0f       	add	r22, r18
    2a8c:	73 1f       	adc	r23, r19
    2a8e:	84 1f       	adc	r24, r20
    2a90:	95 1f       	adc	r25, r21
    2a92:	a0 1d       	adc	r26, r0
    2a94:	08 95       	ret

00002a96 <_exit>:
    2a96:	f8 94       	cli

00002a98 <__stop_program>:
    2a98:	ff cf       	rjmp	.-2      	; 0x2a98 <__stop_program>
