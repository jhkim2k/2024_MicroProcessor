
Pjt10_timer_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800200  000013d4  00001468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008002b4  008002b4  0000151c  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  0000151c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000288  00000000  00000000  00002968  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023b8  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114a  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c5  00000000  00000000  000060f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  000074b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e8  00000000  00000000  00007adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000184c  00000000  00000000  000081c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00009a10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ed       	ldi	r30, 0xD4	; 212
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 3b       	cpi	r26, 0xB4	; 180
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a4 eb       	ldi	r26, 0xB4	; 180
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ad 34       	cpi	r26, 0x4D	; 77
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 67 04 	call	0x8ce	; 0x8ce <main>
     124:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     12c:	f8 94       	cli
		ch = qi_delete();
     12e:	0e 94 01 03 	call	0x602	; 0x602 <qi_delete>
		sei();
     132:	78 94       	sei
	} while(ch == 0);
     134:	88 23       	and	r24, r24
     136:	d1 f3       	breq	.-12     	; 0x12c <uart_getchar>

	if(ch == EOT)	return(-1);
     138:	84 30       	cpi	r24, 0x04	; 4
     13a:	11 f0       	breq	.+4      	; 0x140 <uart_getchar+0x14>
	else			return(ch);
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while(ch == 0);

	if(ch == EOT)	return(-1);
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	9f ef       	ldi	r25, 0xFF	; 255
	else			return(ch);
}
     144:	08 95       	ret

00000146 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     146:	cf 93       	push	r28
     148:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     14a:	8a 30       	cpi	r24, 0x0A	; 10
     14c:	19 f4       	brne	.+6      	; 0x154 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     14e:	8d e0       	ldi	r24, 0x0D	; 13
     150:	0e 94 a3 00 	call	0x146	; 0x146 <uart_putchar>
	
	cli();
     154:	f8 94       	cli

	if(!uart_busy) {
     156:	80 91 ba 02 	lds	r24, 0x02BA
     15a:	88 23       	and	r24, r24
     15c:	59 f4       	brne	.+22     	; 0x174 <uart_putchar+0x2e>
		UDR0 = ch;
     15e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 ba 02 	sts	0x02BA, r24
     168:	0a c0       	rjmp	.+20     	; 0x17e <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     16a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16c:	86 ef       	ldi	r24, 0xF6	; 246
     16e:	8a 95       	dec	r24
     170:	f1 f7       	brne	.-4      	; 0x16e <uart_putchar+0x28>
			_delay_us(100);
			cli();
     172:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     174:	8c 2f       	mov	r24, r28
     176:	0e 94 1e 03 	call	0x63c	; 0x63c <qo_insert>
     17a:	00 97       	sbiw	r24, 0x00	; 0
     17c:	b1 f3       	breq	.-20     	; 0x16a <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}			
	}
	sei();
     17e:	78 94       	sei

	return(1);
}
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM (NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     188:	83 e5       	ldi	r24, 0x53	; 83
     18a:	92 e0       	ldi	r25, 0x02	; 2
     18c:	90 93 48 03 	sts	0x0348, r25
     190:	80 93 47 03 	sts	0x0347, r24
     194:	81 e6       	ldi	r24, 0x61	; 97
     196:	92 e0       	ldi	r25, 0x02	; 2
     198:	90 93 4a 03 	sts	0x034A, r25
     19c:	80 93 49 03 	sts	0x0349, r24
	uart_busy = 0;
     1a0:	10 92 ba 02 	sts	0x02BA, r1
	q_init();
     1a4:	0e 94 ce 02 	call	0x59c	; 0x59c <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     1a8:	10 92 c5 00 	sts	0x00C5, r1
     1ac:	87 e0       	ldi	r24, 0x07	; 7
     1ae:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     1b2:	e0 ec       	ldi	r30, 0xC0	; 192
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     1bc:	e1 ec       	ldi	r30, 0xC1	; 193
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	88 60       	ori	r24, 0x08	; 8
     1c4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     1c6:	80 81       	ld	r24, Z
     1c8:	80 64       	ori	r24, 0x40	; 64
     1ca:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     1cc:	80 81       	ld	r24, Z
     1ce:	80 61       	ori	r24, 0x10	; 16
     1d0:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     1d2:	80 81       	ld	r24, Z
     1d4:	80 68       	ori	r24, 0x80	; 128
     1d6:	80 83       	st	Z, r24
}
     1d8:	08 95       	ret

000001da <__vector_27>:
	if(ch == EOT)	return(-1);
	else			return(ch);
}

ISR(USART0_TX_vect)
{
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	0b b6       	in	r0, 0x3b	; 59
     1e4:	0f 92       	push	r0
     1e6:	11 24       	eor	r1, r1
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     200:	0e 94 40 03 	call	0x680	; 0x680 <qo_delete>
     204:	88 23       	and	r24, r24
     206:	19 f4       	brne	.+6      	; 0x20e <__vector_27+0x34>
		uart_busy = 0;
     208:	10 92 ba 02 	sts	0x02BA, r1
     20c:	02 c0       	rjmp	.+4      	; 0x212 <__vector_27+0x38>
	else
		UDR0 = ch;
     20e:	80 93 c6 00 	sts	0x00C6, r24
}
     212:	ff 91       	pop	r31
     214:	ef 91       	pop	r30
     216:	bf 91       	pop	r27
     218:	af 91       	pop	r26
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	7f 91       	pop	r23
     220:	6f 91       	pop	r22
     222:	5f 91       	pop	r21
     224:	4f 91       	pop	r20
     226:	3f 91       	pop	r19
     228:	2f 91       	pop	r18
     22a:	0f 90       	pop	r0
     22c:	0b be       	out	0x3b, r0	; 59
     22e:	0f 90       	pop	r0
     230:	0f be       	out	0x3f, r0	; 63
     232:	0f 90       	pop	r0
     234:	1f 90       	pop	r1
     236:	18 95       	reti

00000238 <uart_echo>:
	}
	qi_insert(ch);
}

void uart_echo(char ch)
{
     238:	cf 93       	push	r28
     23a:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     23c:	8a 30       	cpi	r24, 0x0A	; 10
     23e:	19 f4       	brne	.+6      	; 0x246 <uart_echo+0xe>
     240:	8d e0       	ldi	r24, 0x0D	; 13
     242:	0e 94 1c 01 	call	0x238	; 0x238 <uart_echo>
	if(!uart_busy) {
     246:	80 91 ba 02 	lds	r24, 0x02BA
     24a:	88 23       	and	r24, r24
     24c:	31 f4       	brne	.+12     	; 0x25a <uart_echo+0x22>
		UDR0 = ch;
     24e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 ba 02 	sts	0x02BA, r24
     258:	03 c0       	rjmp	.+6      	; 0x260 <uart_echo+0x28>
	}
	else {
		qo_insert(ch);			
     25a:	8c 2f       	mov	r24, r28
     25c:	0e 94 1e 03 	call	0x63c	; 0x63c <qo_insert>
	}
}
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <__vector_25>:
	else
		UDR0 = ch;
}

ISR(USART0_RX_vect)
{
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	0b b6       	in	r0, 0x3b	; 59
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	4f 93       	push	r20
     278:	5f 93       	push	r21
     27a:	6f 93       	push	r22
     27c:	7f 93       	push	r23
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
     286:	cf 93       	push	r28
     288:	ef 93       	push	r30
     28a:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     28c:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch !=EOT) {
     290:	c4 30       	cpi	r28, 0x04	; 4
     292:	31 f0       	breq	.+12     	; 0x2a0 <__vector_25+0x3c>
		if(ch == '\r') ch = '\n';
     294:	cd 30       	cpi	r28, 0x0D	; 13
     296:	09 f4       	brne	.+2      	; 0x29a <__vector_25+0x36>
     298:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     29a:	8c 2f       	mov	r24, r28
     29c:	0e 94 1c 01 	call	0x238	; 0x238 <uart_echo>
	}
	qi_insert(ch);
     2a0:	8c 2f       	mov	r24, r28
     2a2:	0e 94 df 02 	call	0x5be	; 0x5be <qi_insert>
}
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	cf 91       	pop	r28
     2ac:	bf 91       	pop	r27
     2ae:	af 91       	pop	r26
     2b0:	9f 91       	pop	r25
     2b2:	8f 91       	pop	r24
     2b4:	7f 91       	pop	r23
     2b6:	6f 91       	pop	r22
     2b8:	5f 91       	pop	r21
     2ba:	4f 91       	pop	r20
     2bc:	3f 91       	pop	r19
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0b be       	out	0x3b, r0	; 59
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     2ce:	84 e0       	ldi	r24, 0x04	; 4
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <malloc>
	return(cp);
}
     2d6:	08 95       	ret

000002d8 <free_node>:

void free_node(struct node *np)
{
	free(np);
     2d8:	0e 94 92 05 	call	0xb24	; 0xb24 <free>
}
     2dc:	08 95       	ret

000002de <insert_node_head>:

void insert_node_head(struct node *np)
{
     2de:	fc 01       	movw	r30, r24
	if(!Head) {
     2e0:	80 91 b4 02 	lds	r24, 0x02B4
     2e4:	90 91 b5 02 	lds	r25, 0x02B5
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	39 f4       	brne	.+14     	; 0x2fa <insert_node_head+0x1c>
		Head = np;
     2ec:	f0 93 b5 02 	sts	0x02B5, r31
     2f0:	e0 93 b4 02 	sts	0x02B4, r30
		np->link = NULL;
     2f4:	13 82       	std	Z+3, r1	; 0x03
     2f6:	12 82       	std	Z+2, r1	; 0x02
     2f8:	08 95       	ret
	} else {
		np->link = Head;
     2fa:	93 83       	std	Z+3, r25	; 0x03
     2fc:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     2fe:	f0 93 b5 02 	sts	0x02B5, r31
     302:	e0 93 b4 02 	sts	0x02B4, r30
     306:	08 95       	ret

00000308 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     308:	e0 91 b4 02 	lds	r30, 0x02B4
     30c:	f0 91 b5 02 	lds	r31, 0x02B5
     310:	30 97       	sbiw	r30, 0x00	; 0
     312:	31 f4       	brne	.+12     	; 0x320 <insert_node_tail+0x18>
		Head = np;
     314:	90 93 b5 02 	sts	0x02B5, r25
     318:	80 93 b4 02 	sts	0x02B4, r24
     31c:	08 c0       	rjmp	.+16     	; 0x32e <insert_node_tail+0x26>
	else {
		for(cp = Head; cp->link != NULL; cp = cp->link)
     31e:	f9 01       	movw	r30, r18
     320:	22 81       	ldd	r18, Z+2	; 0x02
     322:	33 81       	ldd	r19, Z+3	; 0x03
     324:	21 15       	cp	r18, r1
     326:	31 05       	cpc	r19, r1
     328:	d1 f7       	brne	.-12     	; 0x31e <insert_node_tail+0x16>
			;
		cp->link = np;
     32a:	93 83       	std	Z+3, r25	; 0x03
     32c:	82 83       	std	Z+2, r24	; 0x02
	}
	np->link = NULL;
     32e:	fc 01       	movw	r30, r24
     330:	13 82       	std	Z+3, r1	; 0x03
     332:	12 82       	std	Z+2, r1	; 0x02
}
     334:	08 95       	ret

00000336 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	
	if(!Head) {
     33c:	20 91 b4 02 	lds	r18, 0x02B4
     340:	30 91 b5 02 	lds	r19, 0x02B5
     344:	21 15       	cp	r18, r1
     346:	31 05       	cpc	r19, r1
     348:	31 f0       	breq	.+12     	; 0x356 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     34a:	40 81       	ld	r20, Z
     34c:	51 81       	ldd	r21, Z+1	; 0x01
     34e:	d9 01       	movw	r26, r18
     350:	c0 e0       	ldi	r28, 0x00	; 0
     352:	d0 e0       	ldi	r29, 0x00	; 0
     354:	0f c0       	rjmp	.+30     	; 0x374 <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	
	if(!Head) {
		Head = np;
     356:	90 93 b5 02 	sts	0x02B5, r25
     35a:	80 93 b4 02 	sts	0x02B4, r24
		np->link = NULL;
     35e:	13 82       	std	Z+3, r1	; 0x03
     360:	12 82       	std	Z+2, r1	; 0x02
     362:	1d c0       	rjmp	.+58     	; 0x39e <insert_node_ascn+0x68>
	} else {
		for(cp = Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     364:	12 96       	adiw	r26, 0x02	; 2
     366:	8d 91       	ld	r24, X+
     368:	9c 91       	ld	r25, X
     36a:	13 97       	sbiw	r26, 0x03	; 3
     36c:	ed 01       	movw	r28, r26
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	39 f0       	breq	.+14     	; 0x380 <insert_node_ascn+0x4a>
     372:	dc 01       	movw	r26, r24
     374:	8d 91       	ld	r24, X+
     376:	9c 91       	ld	r25, X
     378:	11 97       	sbiw	r26, 0x01	; 1
     37a:	84 17       	cp	r24, r20
     37c:	95 07       	cpc	r25, r21
     37e:	94 f3       	brlt	.-28     	; 0x364 <insert_node_ascn+0x2e>
			;
		if(pp == NULL) {
     380:	20 97       	sbiw	r28, 0x00	; 0
     382:	39 f4       	brne	.+14     	; 0x392 <insert_node_ascn+0x5c>
			np->link = Head;
     384:	33 83       	std	Z+3, r19	; 0x03
     386:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     388:	f0 93 b5 02 	sts	0x02B5, r31
     38c:	e0 93 b4 02 	sts	0x02B4, r30
     390:	06 c0       	rjmp	.+12     	; 0x39e <insert_node_ascn+0x68>
		} else {
			np->link = pp->link;
     392:	8a 81       	ldd	r24, Y+2	; 0x02
     394:	9b 81       	ldd	r25, Y+3	; 0x03
     396:	93 83       	std	Z+3, r25	; 0x03
     398:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     39a:	fb 83       	std	Y+3, r31	; 0x03
     39c:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <tour_list>:

void tour_list()
{
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 cc 06 	call	0xd98	; 0xd98 <putchar>
	for(cp = Head; cp->link != NULL; cp = cp->link)
     3b4:	c0 91 b4 02 	lds	r28, 0x02B4
     3b8:	d0 91 b5 02 	lds	r29, 0x02B5
		printf("-->%c ", cp->data);
     3bc:	0f e6       	ldi	r16, 0x6F	; 111
     3be:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     3c0:	13 c0       	rjmp	.+38     	; 0x3e8 <tour_list+0x44>
		printf("-->%c ", cp->data);
     3c2:	00 d0       	rcall	.+0      	; 0x3c4 <tour_list+0x20>
     3c4:	0f 92       	push	r0
     3c6:	ed b7       	in	r30, 0x3d	; 61
     3c8:	fe b7       	in	r31, 0x3e	; 62
     3ca:	12 83       	std	Z+2, r17	; 0x02
     3cc:	01 83       	std	Z+1, r16	; 0x01
     3ce:	88 81       	ld	r24, Y
     3d0:	99 81       	ldd	r25, Y+1	; 0x01
     3d2:	94 83       	std	Z+4, r25	; 0x04
     3d4:	83 83       	std	Z+3, r24	; 0x03
     3d6:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for(cp = Head; cp->link != NULL; cp = cp->link)
     3da:	0a 80       	ldd	r0, Y+2	; 0x02
     3dc:	db 81       	ldd	r29, Y+3	; 0x03
     3de:	c0 2d       	mov	r28, r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	9b 81       	ldd	r25, Y+3	; 0x03
     3ec:	00 97       	sbiw	r24, 0x00	; 0
     3ee:	49 f7       	brne	.-46     	; 0x3c2 <tour_list+0x1e>
		printf("-->%c ", cp->data);
	printf("\n");
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 cc 06 	call	0xd98	; 0xd98 <putchar>
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <free_list>:

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     402:	09 c0       	rjmp	.+18     	; 0x416 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     404:	fc 01       	movw	r30, r24
     406:	22 81       	ldd	r18, Z+2	; 0x02
     408:	33 81       	ldd	r19, Z+3	; 0x03
     40a:	30 93 b5 02 	sts	0x02B5, r19
     40e:	20 93 b4 02 	sts	0x02B4, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     412:	0e 94 92 05 	call	0xb24	; 0xb24 <free>

void free_list()
{
	struct node *cp;

	for(  ; Head != NULL; ) {
     416:	80 91 b4 02 	lds	r24, 0x02B4
     41a:	90 91 b5 02 	lds	r25, 0x02B5
     41e:	00 97       	sbiw	r24, 0x00	; 0
     420:	89 f7       	brne	.-30     	; 0x404 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     422:	08 95       	ret

00000424 <app_list>:

void app_list(char *ap)
{
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
     432:	28 97       	sbiw	r28, 0x08	; 8
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if(ap) how = *ap;
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	19 f0       	breq	.+6      	; 0x448 <app_list+0x24>
     442:	fc 01       	movw	r30, r24
     444:	10 81       	ld	r17, Z
     446:	01 c0       	rjmp	.+2      	; 0x44a <app_list+0x26>
	}
}

void app_list(char *ap)
{
	char buf[8], how = 'a';
     448:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf("> ");
     44a:	86 e7       	ldi	r24, 0x76	; 118
     44c:	e8 2e       	mov	r14, r24
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	f8 2e       	mov	r15, r24
     452:	0f 92       	push	r0
     454:	0f 92       	push	r0
     456:	ed b7       	in	r30, 0x3d	; 61
     458:	fe b7       	in	r31, 0x3e	; 62
     45a:	f2 82       	std	Z+2, r15	; 0x02
     45c:	e1 82       	std	Z+1, r14	; 0x01
     45e:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		if(fgets(buf, 8, stdin) == NULL) {
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	40 91 47 03 	lds	r20, 0x0347
     46a:	50 91 48 03 	lds	r21, 0x0348
     46e:	ce 01       	movw	r24, r28
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	68 e0       	ldi	r22, 0x08	; 8
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	0e 94 86 06 	call	0xd0c	; 0xd0c <fgets>
     47a:	00 97       	sbiw	r24, 0x00	; 0
     47c:	a1 f0       	breq	.+40     	; 0x4a6 <app_list+0x82>
			break;
		}
		np = get_node();
     47e:	0e 94 67 01 	call	0x2ce	; 0x2ce <get_node>
		np->data = buf[0];
     482:	29 81       	ldd	r18, Y+1	; 0x01
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     48a:	18 36       	cpi	r17, 0x68	; 104
     48c:	19 f0       	breq	.+6      	; 0x494 <app_list+0x70>
     48e:	14 37       	cpi	r17, 0x74	; 116
     490:	39 f4       	brne	.+14     	; 0x4a0 <app_list+0x7c>
     492:	03 c0       	rjmp	.+6      	; 0x49a <app_list+0x76>
			case	'h' : insert_node_head(np); break;
     494:	0e 94 6f 01 	call	0x2de	; 0x2de <insert_node_head>
     498:	dc cf       	rjmp	.-72     	; 0x452 <app_list+0x2e>
			case	't' : insert_node_tail(np); break;
     49a:	0e 94 84 01 	call	0x308	; 0x308 <insert_node_tail>
     49e:	d9 cf       	rjmp	.-78     	; 0x452 <app_list+0x2e>
			default     : insert_node_ascn(np);
     4a0:	0e 94 9b 01 	call	0x336	; 0x336 <insert_node_ascn>
     4a4:	d6 cf       	rjmp	.-84     	; 0x452 <app_list+0x2e>
		}
	}
	tour_list();
     4a6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <tour_list>
	free_list();
     4aa:	0e 94 01 02 	call	0x402	; 0x402 <free_list>
}
     4ae:	28 96       	adiw	r28, 0x08	; 8
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	08 95       	ret

000004c6 <is_prime>:
#include <stdio.h>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	fc 01       	movw	r30, r24
	int i; 
	for (i = 2; i <= n/2; i++)
     4cc:	62 e0       	ldi	r22, 0x02	; 2
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodhi4>
     4d4:	eb 01       	movw	r28, r22
     4d6:	22 e0       	ldi	r18, 0x02	; 2
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	08 c0       	rjmp	.+16     	; 0x4ec <is_prime+0x26>
		if((n % i) == 0)
     4dc:	cf 01       	movw	r24, r30
     4de:	b9 01       	movw	r22, r18
     4e0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodhi4>
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	41 f0       	breq	.+16     	; 0x4f8 <is_prime+0x32>
#include <stdlib.h>
#include "prime.h"

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	c2 17       	cp	r28, r18
     4ee:	d3 07       	cpc	r29, r19
     4f0:	ac f7       	brge	.-22     	; 0x4dc <is_prime+0x16>
		if((n % i) == 0)
			return (0);
	return (1);
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <is_prime+0x36>

int is_prime(int n) {
	int i; 
	for (i = 2; i <= n/2; i++)
		if((n % i) == 0)
			return (0);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	08 95       	ret

00000502 <app_prime>:

void app_prime(char *ap)
{
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	21 f0       	breq	.+8      	; 0x51e <app_prime+0x1c>
     516:	0e 94 2b 06 	call	0xc56	; 0xc56 <atoi>
     51a:	7c 01       	movw	r14, r24
     51c:	04 c0       	rjmp	.+8      	; 0x526 <app_prime+0x24>
	return (1);
}

void app_prime(char *ap)
{
	int	t = 2000, n, count = 0;
     51e:	90 ed       	ldi	r25, 0xD0	; 208
     520:	e9 2e       	mov	r14, r25
     522:	97 e0       	ldi	r25, 0x07	; 7
     524:	f9 2e       	mov	r15, r25
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	10 e0       	ldi	r17, 0x00	; 0

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     52a:	c2 e0       	ldi	r28, 0x02	; 2
     52c:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
     52e:	89 e7       	ldi	r24, 0x79	; 121
     530:	c8 2e       	mov	r12, r24
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     536:	16 c0       	rjmp	.+44     	; 0x564 <app_prime+0x62>
		if (is_prime(n)) {
     538:	ce 01       	movw	r24, r28
     53a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <is_prime>
     53e:	00 97       	sbiw	r24, 0x00	; 0
     540:	81 f0       	breq	.+32     	; 0x562 <app_prime+0x60>
			count++;
     542:	0f 5f       	subi	r16, 0xFF	; 255
     544:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n", n);
     546:	00 d0       	rcall	.+0      	; 0x548 <app_prime+0x46>
     548:	0f 92       	push	r0
     54a:	ed b7       	in	r30, 0x3d	; 61
     54c:	fe b7       	in	r31, 0x3e	; 62
     54e:	d2 82       	std	Z+2, r13	; 0x02
     550:	c1 82       	std	Z+1, r12	; 0x01
     552:	d4 83       	std	Z+4, r29	; 0x04
     554:	c3 83       	std	Z+3, r28	; 0x03
     556:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int	t = 2000, n, count = 0;

	if(ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     562:	21 96       	adiw	r28, 0x01	; 1
     564:	ec 16       	cp	r14, r28
     566:	fd 06       	cpc	r15, r29
     568:	3c f7       	brge	.-50     	; 0x538 <app_prime+0x36>
		if (is_prime(n)) {
			count++;
			printf( "%d is a prime number !!!\n", n);
		}
	}
	printf("count = %d\n", count);
     56a:	00 d0       	rcall	.+0      	; 0x56c <app_prime+0x6a>
     56c:	0f 92       	push	r0
     56e:	83 e9       	ldi	r24, 0x93	; 147
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	ed b7       	in	r30, 0x3d	; 61
     574:	fe b7       	in	r31, 0x3e	; 62
     576:	92 83       	std	Z+2, r25	; 0x02
     578:	81 83       	std	Z+1, r24	; 0x01
     57a:	14 83       	std	Z+4, r17	; 0x04
     57c:	03 83       	std	Z+3, r16	; 0x03
     57e:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int  fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     59c:	10 92 00 03 	sts	0x0300, r1
     5a0:	10 92 ff 02 	sts	0x02FF, r1
     5a4:	10 92 fe 02 	sts	0x02FE, r1
     5a8:	10 92 fd 02 	sts	0x02FD, r1
     5ac:	10 92 02 03 	sts	0x0302, r1
     5b0:	10 92 01 03 	sts	0x0301, r1
     5b4:	10 92 bc 02 	sts	0x02BC, r1
     5b8:	10 92 bb 02 	sts	0x02BB, r1
}
     5bc:	08 95       	ret

000005be <qi_insert>:

int qi_insert(char ch)
{
     5be:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     5c0:	20 91 01 03 	lds	r18, 0x0301
     5c4:	30 91 02 03 	lds	r19, 0x0302
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	c9 01       	movw	r24, r18
     5ce:	60 e4       	ldi	r22, 0x40	; 64
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodhi4>
     5d6:	9c 01       	movw	r18, r24
     5d8:	80 91 bb 02 	lds	r24, 0x02BB
     5dc:	90 91 bc 02 	lds	r25, 0x02BC
     5e0:	28 17       	cp	r18, r24
     5e2:	39 07       	cpc	r19, r25
     5e4:	59 f0       	breq	.+22     	; 0x5fc <qi_insert+0x3e>
		return(0);
	ri = (ri + 1) % QI_SIZE;
     5e6:	30 93 02 03 	sts	0x0302, r19
     5ea:	20 93 01 03 	sts	0x0301, r18
	qi[ri] = ch;
     5ee:	2d 5f       	subi	r18, 0xFD	; 253
     5f0:	3c 4f       	sbci	r19, 0xFC	; 252
     5f2:	f9 01       	movw	r30, r18
     5f4:	40 83       	st	Z, r20
	return(1);
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	08 95       	ret
}

int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
		return(0);
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     600:	08 95       	ret

00000602 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     602:	80 91 bb 02 	lds	r24, 0x02BB
     606:	90 91 bc 02 	lds	r25, 0x02BC
     60a:	20 91 01 03 	lds	r18, 0x0301
     60e:	30 91 02 03 	lds	r19, 0x0302
     612:	28 17       	cp	r18, r24
     614:	39 07       	cpc	r19, r25
     616:	79 f0       	breq	.+30     	; 0x636 <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	60 e4       	ldi	r22, 0x40	; 64
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodhi4>
     622:	90 93 bc 02 	sts	0x02BC, r25
     626:	80 93 bb 02 	sts	0x02BB, r24
	return(qi[fi]);
     62a:	8d 5f       	subi	r24, 0xFD	; 253
     62c:	9c 4f       	sbci	r25, 0xFC	; 252
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return(0);
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     63a:	08 95       	ret

0000063c <qo_insert>:

int qo_insert(char ch)
{
     63c:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     63e:	20 91 ff 02 	lds	r18, 0x02FF
     642:	30 91 00 03 	lds	r19, 0x0300
     646:	2f 5f       	subi	r18, 0xFF	; 255
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	c9 01       	movw	r24, r18
     64c:	60 e4       	ldi	r22, 0x40	; 64
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodhi4>
     654:	9c 01       	movw	r18, r24
     656:	80 91 fd 02 	lds	r24, 0x02FD
     65a:	90 91 fe 02 	lds	r25, 0x02FE
     65e:	28 17       	cp	r18, r24
     660:	39 07       	cpc	r19, r25
     662:	59 f0       	breq	.+22     	; 0x67a <qo_insert+0x3e>
		return(0);
	ro = (ro + 1) % QO_SIZE;
     664:	30 93 00 03 	sts	0x0300, r19
     668:	20 93 ff 02 	sts	0x02FF, r18
	qo[ro] = ch;
     66c:	23 54       	subi	r18, 0x43	; 67
     66e:	3d 4f       	sbci	r19, 0xFD	; 253
     670:	f9 01       	movw	r30, r18
     672:	40 83       	st	Z, r20
	return(1);
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret
}

int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
		return(0);
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     67e:	08 95       	ret

00000680 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     680:	80 91 fd 02 	lds	r24, 0x02FD
     684:	90 91 fe 02 	lds	r25, 0x02FE
     688:	20 91 ff 02 	lds	r18, 0x02FF
     68c:	30 91 00 03 	lds	r19, 0x0300
     690:	28 17       	cp	r18, r24
     692:	39 07       	cpc	r19, r25
     694:	79 f0       	breq	.+30     	; 0x6b4 <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	60 e4       	ldi	r22, 0x40	; 64
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__divmodhi4>
     6a0:	90 93 fe 02 	sts	0x02FE, r25
     6a4:	80 93 fd 02 	sts	0x02FD, r24
	return(qo[fo]);
     6a8:	83 54       	subi	r24, 0x43	; 67
     6aa:	9d 4f       	sbci	r25, 0xFD	; 253
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return(0);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     6b8:	08 95       	ret

000006ba <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     6ba:	8e e0       	ldi	r24, 0x0E	; 14
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <malloc>
	return(tp);
}
     6c2:	08 95       	ret

000006c4 <insert_timer>:

void insert_timer(struct task *tskp, int ms)
{
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	f8 2e       	mov	r15, r24
     6d2:	e9 2e       	mov	r14, r25
     6d4:	8b 01       	movw	r16, r22
	int			total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     6d6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <get_timer>
     6da:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     6dc:	dc 01       	movw	r26, r24
     6de:	12 96       	adiw	r26, 0x02	; 2
     6e0:	ef 2d       	mov	r30, r15
     6e2:	fe 2d       	mov	r31, r14
     6e4:	8a e0       	ldi	r24, 0x0A	; 10
     6e6:	01 90       	ld	r0, Z+
     6e8:	0d 92       	st	X+, r0
     6ea:	81 50       	subi	r24, 0x01	; 1
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <insert_timer+0x22>
	tp->time = ms;
     6ee:	19 83       	std	Y+1, r17	; 0x01
     6f0:	08 83       	st	Y, r16

	if(Thead == NULL) {
     6f2:	e0 91 b6 02 	lds	r30, 0x02B6
     6f6:	f0 91 b7 02 	lds	r31, 0x02B7
     6fa:	30 97       	sbiw	r30, 0x00	; 0
     6fc:	29 f4       	brne	.+10     	; 0x708 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     6fe:	d0 93 b7 02 	sts	0x02B7, r29
     702:	c0 93 b6 02 	sts	0x02B6, r28
     706:	2f c0       	rjmp	.+94     	; 0x766 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if(Thead == NULL) {
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	01 c0       	rjmp	.+2      	; 0x714 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     712:	fd 01       	movw	r30, r26
		total += cp->time;
     714:	80 81       	ld	r24, Z
     716:	91 81       	ldd	r25, Z+1	; 0x01
     718:	28 0f       	add	r18, r24
     71a:	39 1f       	adc	r19, r25
		if(total >= ms)
     71c:	20 17       	cp	r18, r16
     71e:	31 07       	cpc	r19, r17
     720:	34 f4       	brge	.+12     	; 0x72e <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for(cp = Thead; cp; cp = cp->link) {
     722:	a4 85       	ldd	r26, Z+12	; 0x0c
     724:	b5 85       	ldd	r27, Z+13	; 0x0d
     726:	af 01       	movw	r20, r30
     728:	10 97       	sbiw	r26, 0x00	; 0
     72a:	99 f7       	brne	.-26     	; 0x712 <insert_timer+0x4e>
     72c:	01 c0       	rjmp	.+2      	; 0x730 <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     72e:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if(pp == NULL) {
     730:	41 15       	cp	r20, r1
     732:	51 05       	cpc	r21, r1
     734:	79 f4       	brne	.+30     	; 0x754 <insert_timer+0x90>
		cp->time -= tp->time;
     736:	8d 91       	ld	r24, X+
     738:	9c 91       	ld	r25, X
     73a:	11 97       	sbiw	r26, 0x01	; 1
     73c:	80 1b       	sub	r24, r16
     73e:	91 0b       	sbc	r25, r17
     740:	11 96       	adiw	r26, 0x01	; 1
     742:	9c 93       	st	X, r25
     744:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     746:	bd 87       	std	Y+13, r27	; 0x0d
     748:	ac 87       	std	Y+12, r26	; 0x0c
     74a:	d0 93 b7 02 	sts	0x02B7, r29
     74e:	c0 93 b6 02 	sts	0x02B6, r28
     752:	24 c0       	rjmp	.+72     	; 0x79c <insert_timer+0xd8>
	} else if(cp == NULL) {
     754:	10 97       	sbiw	r26, 0x00	; 0
     756:	51 f4       	brne	.+20     	; 0x76c <insert_timer+0xa8>
		tp->time -= total;
     758:	02 1b       	sub	r16, r18
     75a:	13 0b       	sbc	r17, r19
     75c:	19 83       	std	Y+1, r17	; 0x01
     75e:	08 83       	st	Y, r16
		pp->link = tp;
     760:	fa 01       	movw	r30, r20
     762:	d5 87       	std	Z+13, r29	; 0x0d
     764:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     766:	1d 86       	std	Y+13, r1	; 0x0d
     768:	1c 86       	std	Y+12, r1	; 0x0c
     76a:	18 c0       	rjmp	.+48     	; 0x79c <insert_timer+0xd8>
	} else {
		total -= cp->time;
     76c:	8d 91       	ld	r24, X+
     76e:	9c 91       	ld	r25, X
     770:	11 97       	sbiw	r26, 0x01	; 1
     772:	b9 01       	movw	r22, r18
     774:	68 1b       	sub	r22, r24
     776:	79 0b       	sbc	r23, r25
		tp->time -= total;
     778:	98 01       	movw	r18, r16
     77a:	26 1b       	sub	r18, r22
     77c:	37 0b       	sbc	r19, r23
     77e:	39 83       	std	Y+1, r19	; 0x01
     780:	28 83       	st	Y, r18
		cp->time -= tp->time;
     782:	8d 91       	ld	r24, X+
     784:	9c 91       	ld	r25, X
     786:	11 97       	sbiw	r26, 0x01	; 1
     788:	82 1b       	sub	r24, r18
     78a:	93 0b       	sbc	r25, r19
     78c:	11 96       	adiw	r26, 0x01	; 1
     78e:	9c 93       	st	X, r25
     790:	8e 93       	st	-X, r24
		pp->link = tp;
     792:	fa 01       	movw	r30, r20
     794:	d5 87       	std	Z+13, r29	; 0x0d
     796:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     798:	bd 87       	std	Y+13, r27	; 0x0d
     79a:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	08 95       	ret

000007aa <tour_timer>:

void tour_timer()
{
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	struct timer *cp;
	int	   total = 0;

	printf("\n");
     7b6:	8a e0       	ldi	r24, 0x0A	; 10
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 cc 06 	call	0xd98	; 0xd98 <putchar>
	for(cp = Thead; cp != NULL; cp = cp->link) {
     7be:	c0 91 b6 02 	lds	r28, 0x02B6
     7c2:	d0 91 b7 02 	lds	r29, 0x02B7
}

void tour_timer()
{
	struct timer *cp;
	int	   total = 0;
     7c6:	00 e0       	ldi	r16, 0x00	; 0
     7c8:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     7ca:	8f e9       	ldi	r24, 0x9F	; 159
     7cc:	e8 2e       	mov	r14, r24
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     7d2:	20 c0       	rjmp	.+64     	; 0x814 <tour_timer+0x6a>
		total += cp->time;
     7d4:	88 81       	ld	r24, Y
     7d6:	99 81       	ldd	r25, Y+1	; 0x01
     7d8:	08 0f       	add	r16, r24
     7da:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     7dc:	00 d0       	rcall	.+0      	; 0x7de <tour_timer+0x34>
     7de:	00 d0       	rcall	.+0      	; 0x7e0 <tour_timer+0x36>
     7e0:	ed b7       	in	r30, 0x3d	; 61
     7e2:	fe b7       	in	r31, 0x3e	; 62
     7e4:	31 96       	adiw	r30, 0x01	; 1
     7e6:	ad b7       	in	r26, 0x3d	; 61
     7e8:	be b7       	in	r27, 0x3e	; 62
     7ea:	12 96       	adiw	r26, 0x02	; 2
     7ec:	fc 92       	st	X, r15
     7ee:	ee 92       	st	-X, r14
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	93 83       	std	Z+3, r25	; 0x03
     7f4:	82 83       	std	Z+2, r24	; 0x02
     7f6:	15 83       	std	Z+5, r17	; 0x05
     7f8:	04 83       	std	Z+4, r16	; 0x04
     7fa:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
{
	struct timer *cp;
	int	   total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp->link) {
     7fe:	0c 84       	ldd	r0, Y+12	; 0x0c
     800:	dd 85       	ldd	r29, Y+13	; 0x0d
     802:	c0 2d       	mov	r28, r0
     804:	8d b7       	in	r24, 0x3d	; 61
     806:	9e b7       	in	r25, 0x3e	; 62
     808:	06 96       	adiw	r24, 0x06	; 6
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	9e bf       	out	0x3e, r25	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	8d bf       	out	0x3d, r24	; 61
     814:	20 97       	sbiw	r28, 0x00	; 0
     816:	f1 f6       	brne	.-68     	; 0x7d4 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 cc 06 	call	0xd98	; 0xd98 <putchar>
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <free_timer>:

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     82e:	09 c0       	rjmp	.+18     	; 0x842 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     830:	fc 01       	movw	r30, r24
     832:	24 85       	ldd	r18, Z+12	; 0x0c
     834:	35 85       	ldd	r19, Z+13	; 0x0d
     836:	30 93 b7 02 	sts	0x02B7, r19
     83a:	20 93 b6 02 	sts	0x02B6, r18
		free(cp);
     83e:	0e 94 92 05 	call	0xb24	; 0xb24 <free>

void free_timer()
{
	struct timer *cp;

	for( ; Thead != NULL; ) {
     842:	80 91 b6 02 	lds	r24, 0x02B6
     846:	90 91 b7 02 	lds	r25, 0x02B7
     84a:	00 97       	sbiw	r24, 0x00	; 0
     84c:	89 f7       	brne	.-30     	; 0x830 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     84e:	08 95       	ret

00000850 <app_timer>:

void app_timer(char *ap)
{
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	62 97       	sbiw	r28, 0x12	; 18
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
	char		buf[8];
	int			ms;
	struct task	tsk;

	while(1) {
		printf(">> ");
     868:	0a ea       	ldi	r16, 0xAA	; 170
     86a:	12 e0       	ldi	r17, 0x02	; 2
     86c:	0f 92       	push	r0
     86e:	0f 92       	push	r0
     870:	ed b7       	in	r30, 0x3d	; 61
     872:	fe b7       	in	r31, 0x3e	; 62
     874:	12 83       	std	Z+2, r17	; 0x02
     876:	01 83       	std	Z+1, r16	; 0x01
     878:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	40 91 47 03 	lds	r20, 0x0347
     884:	50 91 48 03 	lds	r21, 0x0348
     888:	ce 01       	movw	r24, r28
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	68 e0       	ldi	r22, 0x08	; 8
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	0e 94 86 06 	call	0xd0c	; 0xd0c <fgets>
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	61 f0       	breq	.+24     	; 0x8b0 <app_timer+0x60>
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	0e 94 2b 06 	call	0xc56	; 0xc56 <atoi>
     8a0:	bc 01       	movw	r22, r24
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	29 f0       	breq	.+10     	; 0x8b0 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     8a6:	ce 01       	movw	r24, r28
     8a8:	09 96       	adiw	r24, 0x09	; 9
     8aa:	0e 94 62 03 	call	0x6c4	; 0x6c4 <insert_timer>
	}
     8ae:	de cf       	rjmp	.-68     	; 0x86c <app_timer+0x1c>

	tour_timer();
     8b0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <tour_timer>
	free_timer();
     8b4:	0e 94 17 04 	call	0x82e	; 0x82e <free_timer>
}
     8b8:	62 96       	adiw	r28, 0x12	; 18
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	08 95       	ret

000008ce <main>:
#include "prime.h"
#include "list.h"
#include "timer.h"

int main()
{
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	c0 58       	subi	r28, 0x80	; 128
     8d8:	d0 40       	sbci	r29, 0x00	; 0
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;
	//int n = 0;

	uart_init();
     8e4:	0e 94 c4 00 	call	0x188	; 0x188 <uart_init>
	sei();
     8e8:	78 94       	sei
	while(1) {
		printf("$ ");
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	c8 2e       	mov	r12, r24
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	d8 2e       	mov	r13, r24
     8f2:	0f 92       	push	r0
     8f4:	0f 92       	push	r0
     8f6:	ed b7       	in	r30, 0x3d	; 61
     8f8:	fe b7       	in	r31, 0x3e	; 62
     8fa:	d2 82       	std	Z+2, r13	; 0x02
     8fc:	c1 82       	std	Z+1, r12	; 0x01
     8fe:	0e 94 ba 06 	call	0xd74	; 0xd74 <printf>
		if(fgets(cmd, sizeof(cmd), stdin) == NULL)
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	40 91 47 03 	lds	r20, 0x0347
     90a:	50 91 48 03 	lds	r21, 0x0348
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	60 e8       	ldi	r22, 0x80	; 128
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	0e 94 86 06 	call	0xd0c	; 0xd0c <fgets>
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	09 f4       	brne	.+2      	; 0x920 <main+0x52>
     91e:	40 c0       	rjmp	.+128    	; 0x9a0 <main+0xd2>
			break;
		if((cp = strtok(cmd,  "\n\r\t  ")) == NULL) continue;
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	63 e0       	ldi	r22, 0x03	; 3
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	0e 94 49 06 	call	0xc92	; 0xc92 <strtok>
     92c:	8c 01       	movw	r16, r24
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	01 f3       	breq	.-64     	; 0x8f2 <main+0x24>
		ap = strtok(NULL, "\n\r\t  ");
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	72 e0       	ldi	r23, 0x02	; 2
     93a:	0e 94 49 06 	call	0xc92	; 0xc92 <strtok>
     93e:	7c 01       	movw	r14, r24
		if		(!strcmp(cp, "prime"))	app_prime(ap);
     940:	c8 01       	movw	r24, r16
     942:	69 e0       	ldi	r22, 0x09	; 9
     944:	72 e0       	ldi	r23, 0x02	; 2
     946:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strcmp>
     94a:	00 97       	sbiw	r24, 0x00	; 0
     94c:	21 f4       	brne	.+8      	; 0x956 <main+0x88>
     94e:	c7 01       	movw	r24, r14
     950:	0e 94 81 02 	call	0x502	; 0x502 <app_prime>
     954:	ce cf       	rjmp	.-100    	; 0x8f2 <main+0x24>
		else if (!strcmp(cp, "list"))	app_list(ap);
     956:	c8 01       	movw	r24, r16
     958:	6f e0       	ldi	r22, 0x0F	; 15
     95a:	72 e0       	ldi	r23, 0x02	; 2
     95c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strcmp>
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	21 f4       	brne	.+8      	; 0x96c <main+0x9e>
     964:	c7 01       	movw	r24, r14
     966:	0e 94 12 02 	call	0x424	; 0x424 <app_list>
     96a:	c3 cf       	rjmp	.-122    	; 0x8f2 <main+0x24>
		else if (!strcmp(cp, "timer"))	app_timer(ap);
     96c:	c8 01       	movw	r24, r16
     96e:	64 e1       	ldi	r22, 0x14	; 20
     970:	72 e0       	ldi	r23, 0x02	; 2
     972:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strcmp>
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	21 f4       	brne	.+8      	; 0x982 <main+0xb4>
     97a:	c7 01       	movw	r24, r14
     97c:	0e 94 28 04 	call	0x850	; 0x850 <app_timer>
     980:	b8 cf       	rjmp	.-144    	; 0x8f2 <main+0x24>
		else if (!strcmp(cp, "who"))	printf("I am JHKIM...\n");
     982:	c8 01       	movw	r24, r16
     984:	6a e1       	ldi	r22, 0x1A	; 26
     986:	72 e0       	ldi	r23, 0x02	; 2
     988:	0e 94 4e 06 	call	0xc9c	; 0xc9c <strcmp>
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	19 f4       	brne	.+6      	; 0x996 <main+0xc8>
     990:	8e e1       	ldi	r24, 0x1E	; 30
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	02 c0       	rjmp	.+4      	; 0x99a <main+0xcc>
		else							printf("Unknown command...\n");
     996:	8c e2       	ldi	r24, 0x2C	; 44
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 d3 06 	call	0xda6	; 0xda6 <puts>
     99e:	a9 cf       	rjmp	.-174    	; 0x8f2 <main+0x24>
	}
	printf( "logout, goodbye !!!\n" );
     9a0:	8f e3       	ldi	r24, 0x3F	; 63
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	0e 94 d3 06 	call	0xda6	; 0xda6 <puts>
     9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <main+0xda>

000009aa <__divmodhi4>:
     9aa:	97 fb       	bst	r25, 7
     9ac:	09 2e       	mov	r0, r25
     9ae:	07 26       	eor	r0, r23
     9b0:	0a d0       	rcall	.+20     	; 0x9c6 <__divmodhi4_neg1>
     9b2:	77 fd       	sbrc	r23, 7
     9b4:	04 d0       	rcall	.+8      	; 0x9be <__divmodhi4_neg2>
     9b6:	0c d0       	rcall	.+24     	; 0x9d0 <__udivmodhi4>
     9b8:	06 d0       	rcall	.+12     	; 0x9c6 <__divmodhi4_neg1>
     9ba:	00 20       	and	r0, r0
     9bc:	1a f4       	brpl	.+6      	; 0x9c4 <__divmodhi4_exit>

000009be <__divmodhi4_neg2>:
     9be:	70 95       	com	r23
     9c0:	61 95       	neg	r22
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255

000009c4 <__divmodhi4_exit>:
     9c4:	08 95       	ret

000009c6 <__divmodhi4_neg1>:
     9c6:	f6 f7       	brtc	.-4      	; 0x9c4 <__divmodhi4_exit>
     9c8:	90 95       	com	r25
     9ca:	81 95       	neg	r24
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
     9ce:	08 95       	ret

000009d0 <__udivmodhi4>:
     9d0:	aa 1b       	sub	r26, r26
     9d2:	bb 1b       	sub	r27, r27
     9d4:	51 e1       	ldi	r21, 0x11	; 17
     9d6:	07 c0       	rjmp	.+14     	; 0x9e6 <__udivmodhi4_ep>

000009d8 <__udivmodhi4_loop>:
     9d8:	aa 1f       	adc	r26, r26
     9da:	bb 1f       	adc	r27, r27
     9dc:	a6 17       	cp	r26, r22
     9de:	b7 07       	cpc	r27, r23
     9e0:	10 f0       	brcs	.+4      	; 0x9e6 <__udivmodhi4_ep>
     9e2:	a6 1b       	sub	r26, r22
     9e4:	b7 0b       	sbc	r27, r23

000009e6 <__udivmodhi4_ep>:
     9e6:	88 1f       	adc	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	5a 95       	dec	r21
     9ec:	a9 f7       	brne	.-22     	; 0x9d8 <__udivmodhi4_loop>
     9ee:	80 95       	com	r24
     9f0:	90 95       	com	r25
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	08 95       	ret

000009f8 <malloc>:
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ac 01       	movw	r20, r24
     9fe:	82 30       	cpi	r24, 0x02	; 2
     a00:	91 05       	cpc	r25, r1
     a02:	10 f4       	brcc	.+4      	; 0xa08 <malloc+0x10>
     a04:	42 e0       	ldi	r20, 0x02	; 2
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	e0 91 45 03 	lds	r30, 0x0345
     a0c:	f0 91 46 03 	lds	r31, 0x0346
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	24 c0       	rjmp	.+72     	; 0xa62 <malloc+0x6a>
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	84 17       	cp	r24, r20
     a20:	95 07       	cpc	r25, r21
     a22:	d0 f0       	brcs	.+52     	; 0xa58 <malloc+0x60>
     a24:	84 17       	cp	r24, r20
     a26:	95 07       	cpc	r25, r21
     a28:	71 f4       	brne	.+28     	; 0xa46 <malloc+0x4e>
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	10 97       	sbiw	r26, 0x00	; 0
     a30:	29 f0       	breq	.+10     	; 0xa3c <malloc+0x44>
     a32:	13 96       	adiw	r26, 0x03	; 3
     a34:	9c 93       	st	X, r25
     a36:	8e 93       	st	-X, r24
     a38:	12 97       	sbiw	r26, 0x02	; 2
     a3a:	2c c0       	rjmp	.+88     	; 0xa94 <malloc+0x9c>
     a3c:	90 93 46 03 	sts	0x0346, r25
     a40:	80 93 45 03 	sts	0x0345, r24
     a44:	27 c0       	rjmp	.+78     	; 0xa94 <malloc+0x9c>
     a46:	21 15       	cp	r18, r1
     a48:	31 05       	cpc	r19, r1
     a4a:	19 f0       	breq	.+6      	; 0xa52 <malloc+0x5a>
     a4c:	82 17       	cp	r24, r18
     a4e:	93 07       	cpc	r25, r19
     a50:	18 f4       	brcc	.+6      	; 0xa58 <malloc+0x60>
     a52:	9c 01       	movw	r18, r24
     a54:	bd 01       	movw	r22, r26
     a56:	ef 01       	movw	r28, r30
     a58:	92 81       	ldd	r25, Z+2	; 0x02
     a5a:	83 81       	ldd	r24, Z+3	; 0x03
     a5c:	df 01       	movw	r26, r30
     a5e:	e9 2f       	mov	r30, r25
     a60:	f8 2f       	mov	r31, r24
     a62:	30 97       	sbiw	r30, 0x00	; 0
     a64:	d1 f6       	brne	.-76     	; 0xa1a <malloc+0x22>
     a66:	21 15       	cp	r18, r1
     a68:	31 05       	cpc	r19, r1
     a6a:	f9 f0       	breq	.+62     	; 0xaaa <malloc+0xb2>
     a6c:	c9 01       	movw	r24, r18
     a6e:	84 1b       	sub	r24, r20
     a70:	95 0b       	sbc	r25, r21
     a72:	84 30       	cpi	r24, 0x04	; 4
     a74:	91 05       	cpc	r25, r1
     a76:	80 f4       	brcc	.+32     	; 0xa98 <malloc+0xa0>
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	9b 81       	ldd	r25, Y+3	; 0x03
     a7c:	61 15       	cp	r22, r1
     a7e:	71 05       	cpc	r23, r1
     a80:	21 f0       	breq	.+8      	; 0xa8a <malloc+0x92>
     a82:	fb 01       	movw	r30, r22
     a84:	93 83       	std	Z+3, r25	; 0x03
     a86:	82 83       	std	Z+2, r24	; 0x02
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <malloc+0x9a>
     a8a:	90 93 46 03 	sts	0x0346, r25
     a8e:	80 93 45 03 	sts	0x0345, r24
     a92:	fe 01       	movw	r30, r28
     a94:	32 96       	adiw	r30, 0x02	; 2
     a96:	42 c0       	rjmp	.+132    	; 0xb1c <malloc+0x124>
     a98:	fe 01       	movw	r30, r28
     a9a:	e8 0f       	add	r30, r24
     a9c:	f9 1f       	adc	r31, r25
     a9e:	41 93       	st	Z+, r20
     aa0:	51 93       	st	Z+, r21
     aa2:	02 97       	sbiw	r24, 0x02	; 2
     aa4:	99 83       	std	Y+1, r25	; 0x01
     aa6:	88 83       	st	Y, r24
     aa8:	39 c0       	rjmp	.+114    	; 0xb1c <malloc+0x124>
     aaa:	80 91 43 03 	lds	r24, 0x0343
     aae:	90 91 44 03 	lds	r25, 0x0344
     ab2:	00 97       	sbiw	r24, 0x00	; 0
     ab4:	41 f4       	brne	.+16     	; 0xac6 <malloc+0xce>
     ab6:	80 91 b0 02 	lds	r24, 0x02B0
     aba:	90 91 b1 02 	lds	r25, 0x02B1
     abe:	90 93 44 03 	sts	0x0344, r25
     ac2:	80 93 43 03 	sts	0x0343, r24
     ac6:	20 91 ae 02 	lds	r18, 0x02AE
     aca:	30 91 af 02 	lds	r19, 0x02AF
     ace:	21 15       	cp	r18, r1
     ad0:	31 05       	cpc	r19, r1
     ad2:	41 f4       	brne	.+16     	; 0xae4 <malloc+0xec>
     ad4:	2d b7       	in	r18, 0x3d	; 61
     ad6:	3e b7       	in	r19, 0x3e	; 62
     ad8:	80 91 b2 02 	lds	r24, 0x02B2
     adc:	90 91 b3 02 	lds	r25, 0x02B3
     ae0:	28 1b       	sub	r18, r24
     ae2:	39 0b       	sbc	r19, r25
     ae4:	e0 91 43 03 	lds	r30, 0x0343
     ae8:	f0 91 44 03 	lds	r31, 0x0344
     aec:	e2 17       	cp	r30, r18
     aee:	f3 07       	cpc	r31, r19
     af0:	98 f4       	brcc	.+38     	; 0xb18 <malloc+0x120>
     af2:	2e 1b       	sub	r18, r30
     af4:	3f 0b       	sbc	r19, r31
     af6:	24 17       	cp	r18, r20
     af8:	35 07       	cpc	r19, r21
     afa:	70 f0       	brcs	.+28     	; 0xb18 <malloc+0x120>
     afc:	ca 01       	movw	r24, r20
     afe:	02 96       	adiw	r24, 0x02	; 2
     b00:	28 17       	cp	r18, r24
     b02:	39 07       	cpc	r19, r25
     b04:	48 f0       	brcs	.+18     	; 0xb18 <malloc+0x120>
     b06:	8e 0f       	add	r24, r30
     b08:	9f 1f       	adc	r25, r31
     b0a:	90 93 44 03 	sts	0x0344, r25
     b0e:	80 93 43 03 	sts	0x0343, r24
     b12:	41 93       	st	Z+, r20
     b14:	51 93       	st	Z+, r21
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <malloc+0x124>
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	cf 01       	movw	r24, r30
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <free>:
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	9c 01       	movw	r18, r24
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	09 f4       	brne	.+2      	; 0xb34 <free+0x10>
     b32:	8c c0       	rjmp	.+280    	; 0xc4c <free+0x128>
     b34:	dc 01       	movw	r26, r24
     b36:	12 97       	sbiw	r26, 0x02	; 2
     b38:	13 96       	adiw	r26, 0x03	; 3
     b3a:	1c 92       	st	X, r1
     b3c:	1e 92       	st	-X, r1
     b3e:	12 97       	sbiw	r26, 0x02	; 2
     b40:	60 91 45 03 	lds	r22, 0x0345
     b44:	70 91 46 03 	lds	r23, 0x0346
     b48:	61 15       	cp	r22, r1
     b4a:	71 05       	cpc	r23, r1
     b4c:	89 f4       	brne	.+34     	; 0xb70 <free+0x4c>
     b4e:	8d 91       	ld	r24, X+
     b50:	9c 91       	ld	r25, X
     b52:	11 97       	sbiw	r26, 0x01	; 1
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	20 91 43 03 	lds	r18, 0x0343
     b5c:	30 91 44 03 	lds	r19, 0x0344
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	69 f5       	brne	.+90     	; 0xbc0 <free+0x9c>
     b66:	b0 93 44 03 	sts	0x0344, r27
     b6a:	a0 93 43 03 	sts	0x0343, r26
     b6e:	6e c0       	rjmp	.+220    	; 0xc4c <free+0x128>
     b70:	fb 01       	movw	r30, r22
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <free+0x56>
     b78:	fc 01       	movw	r30, r24
     b7a:	ea 17       	cp	r30, r26
     b7c:	fb 07       	cpc	r31, r27
     b7e:	30 f4       	brcc	.+12     	; 0xb8c <free+0x68>
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	93 81       	ldd	r25, Z+3	; 0x03
     b84:	af 01       	movw	r20, r30
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	b9 f7       	brne	.-18     	; 0xb78 <free+0x54>
     b8a:	1f c0       	rjmp	.+62     	; 0xbca <free+0xa6>
     b8c:	e9 01       	movw	r28, r18
     b8e:	22 97       	sbiw	r28, 0x02	; 2
     b90:	fb 83       	std	Y+3, r31	; 0x03
     b92:	ea 83       	std	Y+2, r30	; 0x02
     b94:	08 81       	ld	r16, Y
     b96:	19 81       	ldd	r17, Y+1	; 0x01
     b98:	c9 01       	movw	r24, r18
     b9a:	80 0f       	add	r24, r16
     b9c:	91 1f       	adc	r25, r17
     b9e:	8e 17       	cp	r24, r30
     ba0:	9f 07       	cpc	r25, r31
     ba2:	59 f4       	brne	.+22     	; 0xbba <free+0x96>
     ba4:	80 81       	ld	r24, Z
     ba6:	91 81       	ldd	r25, Z+1	; 0x01
     ba8:	80 0f       	add	r24, r16
     baa:	91 1f       	adc	r25, r17
     bac:	02 96       	adiw	r24, 0x02	; 2
     bae:	99 83       	std	Y+1, r25	; 0x01
     bb0:	88 83       	st	Y, r24
     bb2:	82 81       	ldd	r24, Z+2	; 0x02
     bb4:	93 81       	ldd	r25, Z+3	; 0x03
     bb6:	9b 83       	std	Y+3, r25	; 0x03
     bb8:	8a 83       	std	Y+2, r24	; 0x02
     bba:	41 15       	cp	r20, r1
     bbc:	51 05       	cpc	r21, r1
     bbe:	29 f4       	brne	.+10     	; 0xbca <free+0xa6>
     bc0:	b0 93 46 03 	sts	0x0346, r27
     bc4:	a0 93 45 03 	sts	0x0345, r26
     bc8:	41 c0       	rjmp	.+130    	; 0xc4c <free+0x128>
     bca:	fa 01       	movw	r30, r20
     bcc:	b3 83       	std	Z+3, r27	; 0x03
     bce:	a2 83       	std	Z+2, r26	; 0x02
     bd0:	c1 91       	ld	r28, Z+
     bd2:	d1 91       	ld	r29, Z+
     bd4:	ec 0f       	add	r30, r28
     bd6:	fd 1f       	adc	r31, r29
     bd8:	ae 17       	cp	r26, r30
     bda:	bf 07       	cpc	r27, r31
     bdc:	81 f4       	brne	.+32     	; 0xbfe <free+0xda>
     bde:	f9 01       	movw	r30, r18
     be0:	92 91       	ld	r25, -Z
     be2:	82 91       	ld	r24, -Z
     be4:	8c 0f       	add	r24, r28
     be6:	9d 1f       	adc	r25, r29
     be8:	02 96       	adiw	r24, 0x02	; 2
     bea:	da 01       	movw	r26, r20
     bec:	11 96       	adiw	r26, 0x01	; 1
     bee:	9c 93       	st	X, r25
     bf0:	8e 93       	st	-X, r24
     bf2:	82 81       	ldd	r24, Z+2	; 0x02
     bf4:	93 81       	ldd	r25, Z+3	; 0x03
     bf6:	13 96       	adiw	r26, 0x03	; 3
     bf8:	9c 93       	st	X, r25
     bfa:	8e 93       	st	-X, r24
     bfc:	12 97       	sbiw	r26, 0x02	; 2
     bfe:	e0 e0       	ldi	r30, 0x00	; 0
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <free+0xe4>
     c04:	fb 01       	movw	r30, r22
     c06:	bc 01       	movw	r22, r24
     c08:	db 01       	movw	r26, r22
     c0a:	12 96       	adiw	r26, 0x02	; 2
     c0c:	8d 91       	ld	r24, X+
     c0e:	9c 91       	ld	r25, X
     c10:	13 97       	sbiw	r26, 0x03	; 3
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	b9 f7       	brne	.-18     	; 0xc04 <free+0xe0>
     c16:	cb 01       	movw	r24, r22
     c18:	02 96       	adiw	r24, 0x02	; 2
     c1a:	2d 91       	ld	r18, X+
     c1c:	3c 91       	ld	r19, X
     c1e:	11 97       	sbiw	r26, 0x01	; 1
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	20 91 43 03 	lds	r18, 0x0343
     c28:	30 91 44 03 	lds	r19, 0x0344
     c2c:	28 17       	cp	r18, r24
     c2e:	39 07       	cpc	r19, r25
     c30:	69 f4       	brne	.+26     	; 0xc4c <free+0x128>
     c32:	30 97       	sbiw	r30, 0x00	; 0
     c34:	29 f4       	brne	.+10     	; 0xc40 <free+0x11c>
     c36:	10 92 46 03 	sts	0x0346, r1
     c3a:	10 92 45 03 	sts	0x0345, r1
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <free+0x120>
     c40:	13 82       	std	Z+3, r1	; 0x03
     c42:	12 82       	std	Z+2, r1	; 0x02
     c44:	70 93 44 03 	sts	0x0344, r23
     c48:	60 93 43 03 	sts	0x0343, r22
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <atoi>:
     c56:	fc 01       	movw	r30, r24
     c58:	88 27       	eor	r24, r24
     c5a:	99 27       	eor	r25, r25
     c5c:	e8 94       	clt
     c5e:	21 91       	ld	r18, Z+
     c60:	20 32       	cpi	r18, 0x20	; 32
     c62:	e9 f3       	breq	.-6      	; 0xc5e <atoi+0x8>
     c64:	29 30       	cpi	r18, 0x09	; 9
     c66:	10 f0       	brcs	.+4      	; 0xc6c <atoi+0x16>
     c68:	2e 30       	cpi	r18, 0x0E	; 14
     c6a:	c8 f3       	brcs	.-14     	; 0xc5e <atoi+0x8>
     c6c:	2b 32       	cpi	r18, 0x2B	; 43
     c6e:	41 f0       	breq	.+16     	; 0xc80 <atoi+0x2a>
     c70:	2d 32       	cpi	r18, 0x2D	; 45
     c72:	39 f4       	brne	.+14     	; 0xc82 <atoi+0x2c>
     c74:	68 94       	set
     c76:	04 c0       	rjmp	.+8      	; 0xc80 <atoi+0x2a>
     c78:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__mulhi_const_10>
     c7c:	82 0f       	add	r24, r18
     c7e:	91 1d       	adc	r25, r1
     c80:	21 91       	ld	r18, Z+
     c82:	20 53       	subi	r18, 0x30	; 48
     c84:	2a 30       	cpi	r18, 0x0A	; 10
     c86:	c0 f3       	brcs	.-16     	; 0xc78 <atoi+0x22>
     c88:	1e f4       	brtc	.+6      	; 0xc90 <atoi+0x3a>
     c8a:	90 95       	com	r25
     c8c:	81 95       	neg	r24
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	08 95       	ret

00000c92 <strtok>:
     c92:	48 eb       	ldi	r20, 0xB8	; 184
     c94:	52 e0       	ldi	r21, 0x02	; 2
     c96:	0e 94 57 06 	call	0xcae	; 0xcae <strtok_r>
     c9a:	08 95       	ret

00000c9c <strcmp>:
     c9c:	fb 01       	movw	r30, r22
     c9e:	dc 01       	movw	r26, r24
     ca0:	8d 91       	ld	r24, X+
     ca2:	01 90       	ld	r0, Z+
     ca4:	80 19       	sub	r24, r0
     ca6:	01 10       	cpse	r0, r1
     ca8:	d9 f3       	breq	.-10     	; 0xca0 <strcmp+0x4>
     caa:	99 0b       	sbc	r25, r25
     cac:	08 95       	ret

00000cae <strtok_r>:
     cae:	fa 01       	movw	r30, r20
     cb0:	a1 91       	ld	r26, Z+
     cb2:	b0 81       	ld	r27, Z
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	19 f4       	brne	.+6      	; 0xcbe <strtok_r+0x10>
     cb8:	10 97       	sbiw	r26, 0x00	; 0
     cba:	e1 f0       	breq	.+56     	; 0xcf4 <strtok_r+0x46>
     cbc:	cd 01       	movw	r24, r26
     cbe:	dc 01       	movw	r26, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0d 90       	ld	r0, X+
     cc4:	00 20       	and	r0, r0
     cc6:	11 f4       	brne	.+4      	; 0xccc <strtok_r+0x1e>
     cc8:	c0 01       	movw	r24, r0
     cca:	13 c0       	rjmp	.+38     	; 0xcf2 <strtok_r+0x44>
     ccc:	fb 01       	movw	r30, r22
     cce:	21 91       	ld	r18, Z+
     cd0:	22 23       	and	r18, r18
     cd2:	19 f0       	breq	.+6      	; 0xcda <strtok_r+0x2c>
     cd4:	20 15       	cp	r18, r0
     cd6:	d9 f7       	brne	.-10     	; 0xcce <strtok_r+0x20>
     cd8:	f3 cf       	rjmp	.-26     	; 0xcc0 <strtok_r+0x12>
     cda:	fb 01       	movw	r30, r22
     cdc:	21 91       	ld	r18, Z+
     cde:	20 15       	cp	r18, r0
     ce0:	19 f4       	brne	.+6      	; 0xce8 <strtok_r+0x3a>
     ce2:	1e 92       	st	-X, r1
     ce4:	11 96       	adiw	r26, 0x01	; 1
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <strtok_r+0x46>
     ce8:	22 23       	and	r18, r18
     cea:	c1 f7       	brne	.-16     	; 0xcdc <strtok_r+0x2e>
     cec:	0d 90       	ld	r0, X+
     cee:	00 20       	and	r0, r0
     cf0:	a1 f7       	brne	.-24     	; 0xcda <strtok_r+0x2c>
     cf2:	d0 01       	movw	r26, r0
     cf4:	fa 01       	movw	r30, r20
     cf6:	a1 93       	st	Z+, r26
     cf8:	b0 83       	st	Z, r27
     cfa:	08 95       	ret

00000cfc <__mulhi_const_10>:
     cfc:	7a e0       	ldi	r23, 0x0A	; 10
     cfe:	97 9f       	mul	r25, r23
     d00:	90 2d       	mov	r25, r0
     d02:	87 9f       	mul	r24, r23
     d04:	80 2d       	mov	r24, r0
     d06:	91 0d       	add	r25, r1
     d08:	11 24       	eor	r1, r1
     d0a:	08 95       	ret

00000d0c <fgets>:
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	8c 01       	movw	r16, r24
     d1e:	6a 01       	movw	r12, r20
     d20:	fa 01       	movw	r30, r20
     d22:	83 81       	ldd	r24, Z+3	; 0x03
     d24:	80 ff       	sbrs	r24, 0
     d26:	1a c0       	rjmp	.+52     	; 0xd5c <fgets+0x50>
     d28:	16 16       	cp	r1, r22
     d2a:	17 06       	cpc	r1, r23
     d2c:	bc f4       	brge	.+46     	; 0xd5c <fgets+0x50>
     d2e:	7b 01       	movw	r14, r22
     d30:	e8 01       	movw	r28, r16
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <fgets+0x44>
     d34:	c6 01       	movw	r24, r12
     d36:	0e 94 1e 09 	call	0x123c	; 0x123c <fgetc>
     d3a:	ff ef       	ldi	r31, 0xFF	; 255
     d3c:	8f 3f       	cpi	r24, 0xFF	; 255
     d3e:	9f 07       	cpc	r25, r31
     d40:	69 f0       	breq	.+26     	; 0xd5c <fgets+0x50>
     d42:	89 93       	st	Y+, r24
     d44:	08 94       	sec
     d46:	e1 08       	sbc	r14, r1
     d48:	f1 08       	sbc	r15, r1
     d4a:	8a 30       	cpi	r24, 0x0A	; 10
     d4c:	91 05       	cpc	r25, r1
     d4e:	21 f0       	breq	.+8      	; 0xd58 <fgets+0x4c>
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	e2 16       	cp	r14, r18
     d54:	f1 04       	cpc	r15, r1
     d56:	71 f7       	brne	.-36     	; 0xd34 <fgets+0x28>
     d58:	18 82       	st	Y, r1
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <fgets+0x54>
     d5c:	00 e0       	ldi	r16, 0x00	; 0
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	c8 01       	movw	r24, r16
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	cf 90       	pop	r12
     d72:	08 95       	ret

00000d74 <printf>:
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	fe 01       	movw	r30, r28
     d7e:	36 96       	adiw	r30, 0x06	; 6
     d80:	61 91       	ld	r22, Z+
     d82:	71 91       	ld	r23, Z+
     d84:	80 91 49 03 	lds	r24, 0x0349
     d88:	90 91 4a 03 	lds	r25, 0x034A
     d8c:	af 01       	movw	r20, r30
     d8e:	0e 94 01 07 	call	0xe02	; 0xe02 <vfprintf>
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <putchar>:
     d98:	60 91 49 03 	lds	r22, 0x0349
     d9c:	70 91 4a 03 	lds	r23, 0x034A
     da0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
     da4:	08 95       	ret

00000da6 <puts>:
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	8c 01       	movw	r16, r24
     db0:	e0 91 49 03 	lds	r30, 0x0349
     db4:	f0 91 4a 03 	lds	r31, 0x034A
     db8:	83 81       	ldd	r24, Z+3	; 0x03
     dba:	81 ff       	sbrs	r24, 1
     dbc:	1a c0       	rjmp	.+52     	; 0xdf2 <puts+0x4c>
     dbe:	c0 e0       	ldi	r28, 0x00	; 0
     dc0:	d0 e0       	ldi	r29, 0x00	; 0
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <puts+0x28>
     dc4:	19 95       	eicall
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	11 f0       	breq	.+4      	; 0xdce <puts+0x28>
     dca:	cf ef       	ldi	r28, 0xFF	; 255
     dcc:	df ef       	ldi	r29, 0xFF	; 255
     dce:	f8 01       	movw	r30, r16
     dd0:	81 91       	ld	r24, Z+
     dd2:	8f 01       	movw	r16, r30
     dd4:	60 91 49 03 	lds	r22, 0x0349
     dd8:	70 91 4a 03 	lds	r23, 0x034A
     ddc:	db 01       	movw	r26, r22
     dde:	18 96       	adiw	r26, 0x08	; 8
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	19 97       	sbiw	r26, 0x09	; 9
     de6:	88 23       	and	r24, r24
     de8:	69 f7       	brne	.-38     	; 0xdc4 <puts+0x1e>
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	19 95       	eicall
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	11 f0       	breq	.+4      	; 0xdf6 <puts+0x50>
     df2:	cf ef       	ldi	r28, 0xFF	; 255
     df4:	df ef       	ldi	r29, 0xFF	; 255
     df6:	ce 01       	movw	r24, r28
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <vfprintf>:
     e02:	2f 92       	push	r2
     e04:	3f 92       	push	r3
     e06:	4f 92       	push	r4
     e08:	5f 92       	push	r5
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	2d 97       	sbiw	r28, 0x0d	; 13
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	3c 01       	movw	r6, r24
     e38:	7d 87       	std	Y+13, r23	; 0x0d
     e3a:	6c 87       	std	Y+12, r22	; 0x0c
     e3c:	5a 01       	movw	r10, r20
     e3e:	fc 01       	movw	r30, r24
     e40:	17 82       	std	Z+7, r1	; 0x07
     e42:	16 82       	std	Z+6, r1	; 0x06
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	81 ff       	sbrs	r24, 1
     e48:	c8 c1       	rjmp	.+912    	; 0x11da <vfprintf+0x3d8>
     e4a:	2e 01       	movw	r4, r28
     e4c:	08 94       	sec
     e4e:	41 1c       	adc	r4, r1
     e50:	51 1c       	adc	r5, r1
     e52:	f3 01       	movw	r30, r6
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	ec 85       	ldd	r30, Y+12	; 0x0c
     e58:	fd 85       	ldd	r31, Y+13	; 0x0d
     e5a:	93 fd       	sbrc	r25, 3
     e5c:	85 91       	lpm	r24, Z+
     e5e:	93 ff       	sbrs	r25, 3
     e60:	81 91       	ld	r24, Z+
     e62:	fd 87       	std	Y+13, r31	; 0x0d
     e64:	ec 87       	std	Y+12, r30	; 0x0c
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <vfprintf+0x6a>
     e6a:	b3 c1       	rjmp	.+870    	; 0x11d2 <vfprintf+0x3d0>
     e6c:	85 32       	cpi	r24, 0x25	; 37
     e6e:	41 f4       	brne	.+16     	; 0xe80 <vfprintf+0x7e>
     e70:	93 fd       	sbrc	r25, 3
     e72:	85 91       	lpm	r24, Z+
     e74:	93 ff       	sbrs	r25, 3
     e76:	81 91       	ld	r24, Z+
     e78:	fd 87       	std	Y+13, r31	; 0x0d
     e7a:	ec 87       	std	Y+12, r30	; 0x0c
     e7c:	85 32       	cpi	r24, 0x25	; 37
     e7e:	29 f4       	brne	.+10     	; 0xe8a <vfprintf+0x88>
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	b3 01       	movw	r22, r6
     e84:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
     e88:	e4 cf       	rjmp	.-56     	; 0xe52 <vfprintf+0x50>
     e8a:	ff 24       	eor	r15, r15
     e8c:	ee 24       	eor	r14, r14
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	10 32       	cpi	r17, 0x20	; 32
     e92:	b0 f4       	brcc	.+44     	; 0xec0 <vfprintf+0xbe>
     e94:	8b 32       	cpi	r24, 0x2B	; 43
     e96:	69 f0       	breq	.+26     	; 0xeb2 <vfprintf+0xb0>
     e98:	8c 32       	cpi	r24, 0x2C	; 44
     e9a:	28 f4       	brcc	.+10     	; 0xea6 <vfprintf+0xa4>
     e9c:	80 32       	cpi	r24, 0x20	; 32
     e9e:	51 f0       	breq	.+20     	; 0xeb4 <vfprintf+0xb2>
     ea0:	83 32       	cpi	r24, 0x23	; 35
     ea2:	71 f4       	brne	.+28     	; 0xec0 <vfprintf+0xbe>
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <vfprintf+0xba>
     ea6:	8d 32       	cpi	r24, 0x2D	; 45
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <vfprintf+0xb6>
     eaa:	80 33       	cpi	r24, 0x30	; 48
     eac:	49 f4       	brne	.+18     	; 0xec0 <vfprintf+0xbe>
     eae:	11 60       	ori	r17, 0x01	; 1
     eb0:	2c c0       	rjmp	.+88     	; 0xf0a <vfprintf+0x108>
     eb2:	12 60       	ori	r17, 0x02	; 2
     eb4:	14 60       	ori	r17, 0x04	; 4
     eb6:	29 c0       	rjmp	.+82     	; 0xf0a <vfprintf+0x108>
     eb8:	18 60       	ori	r17, 0x08	; 8
     eba:	27 c0       	rjmp	.+78     	; 0xf0a <vfprintf+0x108>
     ebc:	10 61       	ori	r17, 0x10	; 16
     ebe:	25 c0       	rjmp	.+74     	; 0xf0a <vfprintf+0x108>
     ec0:	17 fd       	sbrc	r17, 7
     ec2:	2e c0       	rjmp	.+92     	; 0xf20 <vfprintf+0x11e>
     ec4:	28 2f       	mov	r18, r24
     ec6:	20 53       	subi	r18, 0x30	; 48
     ec8:	2a 30       	cpi	r18, 0x0A	; 10
     eca:	98 f4       	brcc	.+38     	; 0xef2 <vfprintf+0xf0>
     ecc:	16 ff       	sbrs	r17, 6
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <vfprintf+0xde>
     ed0:	8f 2d       	mov	r24, r15
     ed2:	88 0f       	add	r24, r24
     ed4:	f8 2e       	mov	r15, r24
     ed6:	ff 0c       	add	r15, r15
     ed8:	ff 0c       	add	r15, r15
     eda:	f8 0e       	add	r15, r24
     edc:	f2 0e       	add	r15, r18
     ede:	15 c0       	rjmp	.+42     	; 0xf0a <vfprintf+0x108>
     ee0:	8e 2d       	mov	r24, r14
     ee2:	88 0f       	add	r24, r24
     ee4:	e8 2e       	mov	r14, r24
     ee6:	ee 0c       	add	r14, r14
     ee8:	ee 0c       	add	r14, r14
     eea:	e8 0e       	add	r14, r24
     eec:	e2 0e       	add	r14, r18
     eee:	10 62       	ori	r17, 0x20	; 32
     ef0:	0c c0       	rjmp	.+24     	; 0xf0a <vfprintf+0x108>
     ef2:	8e 32       	cpi	r24, 0x2E	; 46
     ef4:	21 f4       	brne	.+8      	; 0xefe <vfprintf+0xfc>
     ef6:	16 fd       	sbrc	r17, 6
     ef8:	6c c1       	rjmp	.+728    	; 0x11d2 <vfprintf+0x3d0>
     efa:	10 64       	ori	r17, 0x40	; 64
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <vfprintf+0x108>
     efe:	8c 36       	cpi	r24, 0x6C	; 108
     f00:	11 f4       	brne	.+4      	; 0xf06 <vfprintf+0x104>
     f02:	10 68       	ori	r17, 0x80	; 128
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x108>
     f06:	88 36       	cpi	r24, 0x68	; 104
     f08:	59 f4       	brne	.+22     	; 0xf20 <vfprintf+0x11e>
     f0a:	ec 85       	ldd	r30, Y+12	; 0x0c
     f0c:	fd 85       	ldd	r31, Y+13	; 0x0d
     f0e:	93 fd       	sbrc	r25, 3
     f10:	85 91       	lpm	r24, Z+
     f12:	93 ff       	sbrs	r25, 3
     f14:	81 91       	ld	r24, Z+
     f16:	fd 87       	std	Y+13, r31	; 0x0d
     f18:	ec 87       	std	Y+12, r30	; 0x0c
     f1a:	88 23       	and	r24, r24
     f1c:	09 f0       	breq	.+2      	; 0xf20 <vfprintf+0x11e>
     f1e:	b8 cf       	rjmp	.-144    	; 0xe90 <vfprintf+0x8e>
     f20:	98 2f       	mov	r25, r24
     f22:	95 54       	subi	r25, 0x45	; 69
     f24:	93 30       	cpi	r25, 0x03	; 3
     f26:	18 f0       	brcs	.+6      	; 0xf2e <vfprintf+0x12c>
     f28:	90 52       	subi	r25, 0x20	; 32
     f2a:	93 30       	cpi	r25, 0x03	; 3
     f2c:	38 f4       	brcc	.+14     	; 0xf3c <vfprintf+0x13a>
     f2e:	24 e0       	ldi	r18, 0x04	; 4
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	a2 0e       	add	r10, r18
     f34:	b3 1e       	adc	r11, r19
     f36:	3f e3       	ldi	r19, 0x3F	; 63
     f38:	39 83       	std	Y+1, r19	; 0x01
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <vfprintf+0x158>
     f3c:	83 36       	cpi	r24, 0x63	; 99
     f3e:	31 f0       	breq	.+12     	; 0xf4c <vfprintf+0x14a>
     f40:	83 37       	cpi	r24, 0x73	; 115
     f42:	81 f0       	breq	.+32     	; 0xf64 <vfprintf+0x162>
     f44:	83 35       	cpi	r24, 0x53	; 83
     f46:	09 f0       	breq	.+2      	; 0xf4a <vfprintf+0x148>
     f48:	5a c0       	rjmp	.+180    	; 0xffe <vfprintf+0x1fc>
     f4a:	22 c0       	rjmp	.+68     	; 0xf90 <vfprintf+0x18e>
     f4c:	f5 01       	movw	r30, r10
     f4e:	80 81       	ld	r24, Z
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	22 e0       	ldi	r18, 0x02	; 2
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	a2 0e       	add	r10, r18
     f58:	b3 1e       	adc	r11, r19
     f5a:	21 e0       	ldi	r18, 0x01	; 1
     f5c:	c2 2e       	mov	r12, r18
     f5e:	d1 2c       	mov	r13, r1
     f60:	42 01       	movw	r8, r4
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <vfprintf+0x18a>
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	29 2e       	mov	r2, r25
     f68:	31 2c       	mov	r3, r1
     f6a:	2a 0c       	add	r2, r10
     f6c:	3b 1c       	adc	r3, r11
     f6e:	f5 01       	movw	r30, r10
     f70:	80 80       	ld	r8, Z
     f72:	91 80       	ldd	r9, Z+1	; 0x01
     f74:	16 ff       	sbrs	r17, 6
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <vfprintf+0x17c>
     f78:	6f 2d       	mov	r22, r15
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x180>
     f7e:	6f ef       	ldi	r22, 0xFF	; 255
     f80:	7f ef       	ldi	r23, 0xFF	; 255
     f82:	c4 01       	movw	r24, r8
     f84:	0e 94 13 09 	call	0x1226	; 0x1226 <strnlen>
     f88:	6c 01       	movw	r12, r24
     f8a:	51 01       	movw	r10, r2
     f8c:	1f 77       	andi	r17, 0x7F	; 127
     f8e:	15 c0       	rjmp	.+42     	; 0xfba <vfprintf+0x1b8>
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	28 2e       	mov	r2, r24
     f94:	31 2c       	mov	r3, r1
     f96:	2a 0c       	add	r2, r10
     f98:	3b 1c       	adc	r3, r11
     f9a:	f5 01       	movw	r30, r10
     f9c:	80 80       	ld	r8, Z
     f9e:	91 80       	ldd	r9, Z+1	; 0x01
     fa0:	16 ff       	sbrs	r17, 6
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <vfprintf+0x1a8>
     fa4:	6f 2d       	mov	r22, r15
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x1ac>
     faa:	6f ef       	ldi	r22, 0xFF	; 255
     fac:	7f ef       	ldi	r23, 0xFF	; 255
     fae:	c4 01       	movw	r24, r8
     fb0:	0e 94 08 09 	call	0x1210	; 0x1210 <strnlen_P>
     fb4:	6c 01       	movw	r12, r24
     fb6:	10 68       	ori	r17, 0x80	; 128
     fb8:	51 01       	movw	r10, r2
     fba:	13 fd       	sbrc	r17, 3
     fbc:	1c c0       	rjmp	.+56     	; 0xff6 <vfprintf+0x1f4>
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <vfprintf+0x1ca>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	b3 01       	movw	r22, r6
     fc6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
     fca:	ea 94       	dec	r14
     fcc:	8e 2d       	mov	r24, r14
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	c8 16       	cp	r12, r24
     fd2:	d9 06       	cpc	r13, r25
     fd4:	a8 f3       	brcs	.-22     	; 0xfc0 <vfprintf+0x1be>
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <vfprintf+0x1f4>
     fd8:	f4 01       	movw	r30, r8
     fda:	17 fd       	sbrc	r17, 7
     fdc:	85 91       	lpm	r24, Z+
     fde:	17 ff       	sbrs	r17, 7
     fe0:	81 91       	ld	r24, Z+
     fe2:	4f 01       	movw	r8, r30
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	b3 01       	movw	r22, r6
     fe8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
     fec:	e1 10       	cpse	r14, r1
     fee:	ea 94       	dec	r14
     ff0:	08 94       	sec
     ff2:	c1 08       	sbc	r12, r1
     ff4:	d1 08       	sbc	r13, r1
     ff6:	c1 14       	cp	r12, r1
     ff8:	d1 04       	cpc	r13, r1
     ffa:	71 f7       	brne	.-36     	; 0xfd8 <vfprintf+0x1d6>
     ffc:	e7 c0       	rjmp	.+462    	; 0x11cc <vfprintf+0x3ca>
     ffe:	84 36       	cpi	r24, 0x64	; 100
    1000:	11 f0       	breq	.+4      	; 0x1006 <vfprintf+0x204>
    1002:	89 36       	cpi	r24, 0x69	; 105
    1004:	51 f5       	brne	.+84     	; 0x105a <vfprintf+0x258>
    1006:	f5 01       	movw	r30, r10
    1008:	17 ff       	sbrs	r17, 7
    100a:	07 c0       	rjmp	.+14     	; 0x101a <vfprintf+0x218>
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	a2 81       	ldd	r26, Z+2	; 0x02
    1012:	b3 81       	ldd	r27, Z+3	; 0x03
    1014:	24 e0       	ldi	r18, 0x04	; 4
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	08 c0       	rjmp	.+16     	; 0x102a <vfprintf+0x228>
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	aa 27       	eor	r26, r26
    1020:	97 fd       	sbrc	r25, 7
    1022:	a0 95       	com	r26
    1024:	ba 2f       	mov	r27, r26
    1026:	22 e0       	ldi	r18, 0x02	; 2
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	a2 0e       	add	r10, r18
    102c:	b3 1e       	adc	r11, r19
    102e:	01 2f       	mov	r16, r17
    1030:	0f 76       	andi	r16, 0x6F	; 111
    1032:	b7 ff       	sbrs	r27, 7
    1034:	08 c0       	rjmp	.+16     	; 0x1046 <vfprintf+0x244>
    1036:	b0 95       	com	r27
    1038:	a0 95       	com	r26
    103a:	90 95       	com	r25
    103c:	81 95       	neg	r24
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	af 4f       	sbci	r26, 0xFF	; 255
    1042:	bf 4f       	sbci	r27, 0xFF	; 255
    1044:	00 68       	ori	r16, 0x80	; 128
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	a2 01       	movw	r20, r4
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	0e 94 8a 09 	call	0x1314	; 0x1314 <__ultoa_invert>
    1054:	d8 2e       	mov	r13, r24
    1056:	d4 18       	sub	r13, r4
    1058:	3f c0       	rjmp	.+126    	; 0x10d8 <vfprintf+0x2d6>
    105a:	85 37       	cpi	r24, 0x75	; 117
    105c:	21 f4       	brne	.+8      	; 0x1066 <vfprintf+0x264>
    105e:	1f 7e       	andi	r17, 0xEF	; 239
    1060:	2a e0       	ldi	r18, 0x0A	; 10
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	20 c0       	rjmp	.+64     	; 0x10a6 <vfprintf+0x2a4>
    1066:	19 7f       	andi	r17, 0xF9	; 249
    1068:	8f 36       	cpi	r24, 0x6F	; 111
    106a:	a9 f0       	breq	.+42     	; 0x1096 <vfprintf+0x294>
    106c:	80 37       	cpi	r24, 0x70	; 112
    106e:	20 f4       	brcc	.+8      	; 0x1078 <vfprintf+0x276>
    1070:	88 35       	cpi	r24, 0x58	; 88
    1072:	09 f0       	breq	.+2      	; 0x1076 <vfprintf+0x274>
    1074:	ae c0       	rjmp	.+348    	; 0x11d2 <vfprintf+0x3d0>
    1076:	0b c0       	rjmp	.+22     	; 0x108e <vfprintf+0x28c>
    1078:	80 37       	cpi	r24, 0x70	; 112
    107a:	21 f0       	breq	.+8      	; 0x1084 <vfprintf+0x282>
    107c:	88 37       	cpi	r24, 0x78	; 120
    107e:	09 f0       	breq	.+2      	; 0x1082 <vfprintf+0x280>
    1080:	a8 c0       	rjmp	.+336    	; 0x11d2 <vfprintf+0x3d0>
    1082:	01 c0       	rjmp	.+2      	; 0x1086 <vfprintf+0x284>
    1084:	10 61       	ori	r17, 0x10	; 16
    1086:	14 ff       	sbrs	r17, 4
    1088:	09 c0       	rjmp	.+18     	; 0x109c <vfprintf+0x29a>
    108a:	14 60       	ori	r17, 0x04	; 4
    108c:	07 c0       	rjmp	.+14     	; 0x109c <vfprintf+0x29a>
    108e:	14 ff       	sbrs	r17, 4
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <vfprintf+0x2a0>
    1092:	16 60       	ori	r17, 0x06	; 6
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <vfprintf+0x2a0>
    1096:	28 e0       	ldi	r18, 0x08	; 8
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <vfprintf+0x2a4>
    109c:	20 e1       	ldi	r18, 0x10	; 16
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x2a4>
    10a2:	20 e1       	ldi	r18, 0x10	; 16
    10a4:	32 e0       	ldi	r19, 0x02	; 2
    10a6:	f5 01       	movw	r30, r10
    10a8:	17 ff       	sbrs	r17, 7
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <vfprintf+0x2b8>
    10ac:	60 81       	ld	r22, Z
    10ae:	71 81       	ldd	r23, Z+1	; 0x01
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	93 81       	ldd	r25, Z+3	; 0x03
    10b4:	44 e0       	ldi	r20, 0x04	; 4
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <vfprintf+0x2c4>
    10ba:	60 81       	ld	r22, Z
    10bc:	71 81       	ldd	r23, Z+1	; 0x01
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	42 e0       	ldi	r20, 0x02	; 2
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	a4 0e       	add	r10, r20
    10c8:	b5 1e       	adc	r11, r21
    10ca:	a2 01       	movw	r20, r4
    10cc:	0e 94 8a 09 	call	0x1314	; 0x1314 <__ultoa_invert>
    10d0:	d8 2e       	mov	r13, r24
    10d2:	d4 18       	sub	r13, r4
    10d4:	01 2f       	mov	r16, r17
    10d6:	0f 77       	andi	r16, 0x7F	; 127
    10d8:	06 ff       	sbrs	r16, 6
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <vfprintf+0x2ec>
    10dc:	0e 7f       	andi	r16, 0xFE	; 254
    10de:	df 14       	cp	r13, r15
    10e0:	30 f4       	brcc	.+12     	; 0x10ee <vfprintf+0x2ec>
    10e2:	04 ff       	sbrs	r16, 4
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <vfprintf+0x2f0>
    10e6:	02 fd       	sbrc	r16, 2
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <vfprintf+0x2f0>
    10ea:	0f 7e       	andi	r16, 0xEF	; 239
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <vfprintf+0x2f0>
    10ee:	1d 2d       	mov	r17, r13
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <vfprintf+0x2f2>
    10f2:	1f 2d       	mov	r17, r15
    10f4:	80 2f       	mov	r24, r16
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	04 ff       	sbrs	r16, 4
    10fa:	0c c0       	rjmp	.+24     	; 0x1114 <vfprintf+0x312>
    10fc:	fe 01       	movw	r30, r28
    10fe:	ed 0d       	add	r30, r13
    1100:	f1 1d       	adc	r31, r1
    1102:	20 81       	ld	r18, Z
    1104:	20 33       	cpi	r18, 0x30	; 48
    1106:	11 f4       	brne	.+4      	; 0x110c <vfprintf+0x30a>
    1108:	09 7e       	andi	r16, 0xE9	; 233
    110a:	09 c0       	rjmp	.+18     	; 0x111e <vfprintf+0x31c>
    110c:	02 ff       	sbrs	r16, 2
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x31a>
    1110:	1e 5f       	subi	r17, 0xFE	; 254
    1112:	05 c0       	rjmp	.+10     	; 0x111e <vfprintf+0x31c>
    1114:	86 78       	andi	r24, 0x86	; 134
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f0       	breq	.+2      	; 0x111e <vfprintf+0x31c>
    111c:	1f 5f       	subi	r17, 0xFF	; 255
    111e:	80 2e       	mov	r8, r16
    1120:	99 24       	eor	r9, r9
    1122:	03 fd       	sbrc	r16, 3
    1124:	12 c0       	rjmp	.+36     	; 0x114a <vfprintf+0x348>
    1126:	00 ff       	sbrs	r16, 0
    1128:	0d c0       	rjmp	.+26     	; 0x1144 <vfprintf+0x342>
    112a:	fd 2c       	mov	r15, r13
    112c:	1e 15       	cp	r17, r14
    112e:	50 f4       	brcc	.+20     	; 0x1144 <vfprintf+0x342>
    1130:	fe 0c       	add	r15, r14
    1132:	f1 1a       	sub	r15, r17
    1134:	1e 2d       	mov	r17, r14
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <vfprintf+0x342>
    1138:	80 e2       	ldi	r24, 0x20	; 32
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	b3 01       	movw	r22, r6
    113e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1142:	1f 5f       	subi	r17, 0xFF	; 255
    1144:	1e 15       	cp	r17, r14
    1146:	c0 f3       	brcs	.-16     	; 0x1138 <vfprintf+0x336>
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <vfprintf+0x350>
    114a:	1e 15       	cp	r17, r14
    114c:	10 f4       	brcc	.+4      	; 0x1152 <vfprintf+0x350>
    114e:	e1 1a       	sub	r14, r17
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <vfprintf+0x352>
    1152:	ee 24       	eor	r14, r14
    1154:	84 fe       	sbrs	r8, 4
    1156:	0f c0       	rjmp	.+30     	; 0x1176 <vfprintf+0x374>
    1158:	80 e3       	ldi	r24, 0x30	; 48
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b3 01       	movw	r22, r6
    115e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1162:	82 fe       	sbrs	r8, 2
    1164:	1f c0       	rjmp	.+62     	; 0x11a4 <vfprintf+0x3a2>
    1166:	81 fe       	sbrs	r8, 1
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <vfprintf+0x36e>
    116a:	88 e5       	ldi	r24, 0x58	; 88
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	10 c0       	rjmp	.+32     	; 0x1190 <vfprintf+0x38e>
    1170:	88 e7       	ldi	r24, 0x78	; 120
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <vfprintf+0x38e>
    1176:	c4 01       	movw	r24, r8
    1178:	86 78       	andi	r24, 0x86	; 134
    117a:	90 70       	andi	r25, 0x00	; 0
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	91 f0       	breq	.+36     	; 0x11a4 <vfprintf+0x3a2>
    1180:	81 fc       	sbrc	r8, 1
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x386>
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	01 c0       	rjmp	.+2      	; 0x118a <vfprintf+0x388>
    1188:	8b e2       	ldi	r24, 0x2B	; 43
    118a:	07 fd       	sbrc	r16, 7
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	b3 01       	movw	r22, r6
    1192:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <vfprintf+0x3a2>
    1198:	80 e3       	ldi	r24, 0x30	; 48
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	b3 01       	movw	r22, r6
    119e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    11a2:	fa 94       	dec	r15
    11a4:	df 14       	cp	r13, r15
    11a6:	c0 f3       	brcs	.-16     	; 0x1198 <vfprintf+0x396>
    11a8:	da 94       	dec	r13
    11aa:	f2 01       	movw	r30, r4
    11ac:	ed 0d       	add	r30, r13
    11ae:	f1 1d       	adc	r31, r1
    11b0:	80 81       	ld	r24, Z
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	b3 01       	movw	r22, r6
    11b6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    11ba:	dd 20       	and	r13, r13
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <vfprintf+0x3a6>
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <vfprintf+0x3ca>
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	b3 01       	movw	r22, r6
    11c6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <fputc>
    11ca:	ea 94       	dec	r14
    11cc:	ee 20       	and	r14, r14
    11ce:	c1 f7       	brne	.-16     	; 0x11c0 <vfprintf+0x3be>
    11d0:	40 ce       	rjmp	.-896    	; 0xe52 <vfprintf+0x50>
    11d2:	f3 01       	movw	r30, r6
    11d4:	86 81       	ldd	r24, Z+6	; 0x06
    11d6:	97 81       	ldd	r25, Z+7	; 0x07
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <vfprintf+0x3dc>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
    11de:	2d 96       	adiw	r28, 0x0d	; 13
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	ef 90       	pop	r14
    11f6:	df 90       	pop	r13
    11f8:	cf 90       	pop	r12
    11fa:	bf 90       	pop	r11
    11fc:	af 90       	pop	r10
    11fe:	9f 90       	pop	r9
    1200:	8f 90       	pop	r8
    1202:	7f 90       	pop	r7
    1204:	6f 90       	pop	r6
    1206:	5f 90       	pop	r5
    1208:	4f 90       	pop	r4
    120a:	3f 90       	pop	r3
    120c:	2f 90       	pop	r2
    120e:	08 95       	ret

00001210 <strnlen_P>:
    1210:	fc 01       	movw	r30, r24
    1212:	05 90       	lpm	r0, Z+
    1214:	61 50       	subi	r22, 0x01	; 1
    1216:	70 40       	sbci	r23, 0x00	; 0
    1218:	01 10       	cpse	r0, r1
    121a:	d8 f7       	brcc	.-10     	; 0x1212 <strnlen_P+0x2>
    121c:	80 95       	com	r24
    121e:	90 95       	com	r25
    1220:	8e 0f       	add	r24, r30
    1222:	9f 1f       	adc	r25, r31
    1224:	08 95       	ret

00001226 <strnlen>:
    1226:	fc 01       	movw	r30, r24
    1228:	61 50       	subi	r22, 0x01	; 1
    122a:	70 40       	sbci	r23, 0x00	; 0
    122c:	01 90       	ld	r0, Z+
    122e:	01 10       	cpse	r0, r1
    1230:	d8 f7       	brcc	.-10     	; 0x1228 <strnlen+0x2>
    1232:	80 95       	com	r24
    1234:	90 95       	com	r25
    1236:	8e 0f       	add	r24, r30
    1238:	9f 1f       	adc	r25, r31
    123a:	08 95       	ret

0000123c <fgetc>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	20 ff       	sbrs	r18, 0
    1246:	35 c0       	rjmp	.+106    	; 0x12b2 <fgetc+0x76>
    1248:	26 ff       	sbrs	r18, 6
    124a:	09 c0       	rjmp	.+18     	; 0x125e <fgetc+0x22>
    124c:	2f 7b       	andi	r18, 0xBF	; 191
    124e:	2b 83       	std	Y+3, r18	; 0x03
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	9f 81       	ldd	r25, Y+7	; 0x07
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	9f 83       	std	Y+7, r25	; 0x07
    1258:	8e 83       	std	Y+6, r24	; 0x06
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 c0       	rjmp	.+80     	; 0x12ae <fgetc+0x72>
    125e:	22 ff       	sbrs	r18, 2
    1260:	0f c0       	rjmp	.+30     	; 0x1280 <fgetc+0x44>
    1262:	e8 81       	ld	r30, Y
    1264:	f9 81       	ldd	r31, Y+1	; 0x01
    1266:	80 81       	ld	r24, Z
    1268:	99 27       	eor	r25, r25
    126a:	87 fd       	sbrc	r24, 7
    126c:	90 95       	com	r25
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	19 f4       	brne	.+6      	; 0x1278 <fgetc+0x3c>
    1272:	20 62       	ori	r18, 0x20	; 32
    1274:	2b 83       	std	Y+3, r18	; 0x03
    1276:	1d c0       	rjmp	.+58     	; 0x12b2 <fgetc+0x76>
    1278:	31 96       	adiw	r30, 0x01	; 1
    127a:	f9 83       	std	Y+1, r31	; 0x01
    127c:	e8 83       	st	Y, r30
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <fgetc+0x66>
    1280:	ea 85       	ldd	r30, Y+10	; 0x0a
    1282:	fb 85       	ldd	r31, Y+11	; 0x0b
    1284:	ce 01       	movw	r24, r28
    1286:	19 95       	eicall
    1288:	97 ff       	sbrs	r25, 7
    128a:	0b c0       	rjmp	.+22     	; 0x12a2 <fgetc+0x66>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	8f 3f       	cpi	r24, 0xFF	; 255
    1292:	93 07       	cpc	r25, r19
    1294:	11 f4       	brne	.+4      	; 0x129a <fgetc+0x5e>
    1296:	80 e1       	ldi	r24, 0x10	; 16
    1298:	01 c0       	rjmp	.+2      	; 0x129c <fgetc+0x60>
    129a:	80 e2       	ldi	r24, 0x20	; 32
    129c:	82 2b       	or	r24, r18
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <fgetc+0x76>
    12a2:	2e 81       	ldd	r18, Y+6	; 0x06
    12a4:	3f 81       	ldd	r19, Y+7	; 0x07
    12a6:	2f 5f       	subi	r18, 0xFF	; 255
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	3f 83       	std	Y+7, r19	; 0x07
    12ac:	2e 83       	std	Y+6, r18	; 0x06
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <fgetc+0x7a>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	9f ef       	ldi	r25, 0xFF	; 255
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <fputc>:
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	8c 01       	movw	r16, r24
    12c6:	eb 01       	movw	r28, r22
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	81 ff       	sbrs	r24, 1
    12cc:	1b c0       	rjmp	.+54     	; 0x1304 <fputc+0x48>
    12ce:	82 ff       	sbrs	r24, 2
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <fputc+0x30>
    12d2:	2e 81       	ldd	r18, Y+6	; 0x06
    12d4:	3f 81       	ldd	r19, Y+7	; 0x07
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	28 17       	cp	r18, r24
    12dc:	39 07       	cpc	r19, r25
    12de:	64 f4       	brge	.+24     	; 0x12f8 <fputc+0x3c>
    12e0:	e8 81       	ld	r30, Y
    12e2:	f9 81       	ldd	r31, Y+1	; 0x01
    12e4:	01 93       	st	Z+, r16
    12e6:	f9 83       	std	Y+1, r31	; 0x01
    12e8:	e8 83       	st	Y, r30
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <fputc+0x3c>
    12ec:	e8 85       	ldd	r30, Y+8	; 0x08
    12ee:	f9 85       	ldd	r31, Y+9	; 0x09
    12f0:	80 2f       	mov	r24, r16
    12f2:	19 95       	eicall
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	31 f4       	brne	.+12     	; 0x1304 <fputc+0x48>
    12f8:	8e 81       	ldd	r24, Y+6	; 0x06
    12fa:	9f 81       	ldd	r25, Y+7	; 0x07
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	9f 83       	std	Y+7, r25	; 0x07
    1300:	8e 83       	std	Y+6, r24	; 0x06
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <fputc+0x4c>
    1304:	0f ef       	ldi	r16, 0xFF	; 255
    1306:	1f ef       	ldi	r17, 0xFF	; 255
    1308:	c8 01       	movw	r24, r16
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <__ultoa_invert>:
    1314:	fa 01       	movw	r30, r20
    1316:	aa 27       	eor	r26, r26
    1318:	28 30       	cpi	r18, 0x08	; 8
    131a:	51 f1       	breq	.+84     	; 0x1370 <__ultoa_invert+0x5c>
    131c:	20 31       	cpi	r18, 0x10	; 16
    131e:	81 f1       	breq	.+96     	; 0x1380 <__ultoa_invert+0x6c>
    1320:	e8 94       	clt
    1322:	6f 93       	push	r22
    1324:	6e 7f       	andi	r22, 0xFE	; 254
    1326:	6e 5f       	subi	r22, 0xFE	; 254
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	8f 4f       	sbci	r24, 0xFF	; 255
    132c:	9f 4f       	sbci	r25, 0xFF	; 255
    132e:	af 4f       	sbci	r26, 0xFF	; 255
    1330:	b1 e0       	ldi	r27, 0x01	; 1
    1332:	3e d0       	rcall	.+124    	; 0x13b0 <__ultoa_invert+0x9c>
    1334:	b4 e0       	ldi	r27, 0x04	; 4
    1336:	3c d0       	rcall	.+120    	; 0x13b0 <__ultoa_invert+0x9c>
    1338:	67 0f       	add	r22, r23
    133a:	78 1f       	adc	r23, r24
    133c:	89 1f       	adc	r24, r25
    133e:	9a 1f       	adc	r25, r26
    1340:	a1 1d       	adc	r26, r1
    1342:	68 0f       	add	r22, r24
    1344:	79 1f       	adc	r23, r25
    1346:	8a 1f       	adc	r24, r26
    1348:	91 1d       	adc	r25, r1
    134a:	a1 1d       	adc	r26, r1
    134c:	6a 0f       	add	r22, r26
    134e:	71 1d       	adc	r23, r1
    1350:	81 1d       	adc	r24, r1
    1352:	91 1d       	adc	r25, r1
    1354:	a1 1d       	adc	r26, r1
    1356:	20 d0       	rcall	.+64     	; 0x1398 <__ultoa_invert+0x84>
    1358:	09 f4       	brne	.+2      	; 0x135c <__ultoa_invert+0x48>
    135a:	68 94       	set
    135c:	3f 91       	pop	r19
    135e:	2a e0       	ldi	r18, 0x0A	; 10
    1360:	26 9f       	mul	r18, r22
    1362:	11 24       	eor	r1, r1
    1364:	30 19       	sub	r19, r0
    1366:	30 5d       	subi	r19, 0xD0	; 208
    1368:	31 93       	st	Z+, r19
    136a:	de f6       	brtc	.-74     	; 0x1322 <__ultoa_invert+0xe>
    136c:	cf 01       	movw	r24, r30
    136e:	08 95       	ret
    1370:	46 2f       	mov	r20, r22
    1372:	47 70       	andi	r20, 0x07	; 7
    1374:	40 5d       	subi	r20, 0xD0	; 208
    1376:	41 93       	st	Z+, r20
    1378:	b3 e0       	ldi	r27, 0x03	; 3
    137a:	0f d0       	rcall	.+30     	; 0x139a <__ultoa_invert+0x86>
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__ultoa_invert+0x5c>
    137e:	f6 cf       	rjmp	.-20     	; 0x136c <__ultoa_invert+0x58>
    1380:	46 2f       	mov	r20, r22
    1382:	4f 70       	andi	r20, 0x0F	; 15
    1384:	40 5d       	subi	r20, 0xD0	; 208
    1386:	4a 33       	cpi	r20, 0x3A	; 58
    1388:	18 f0       	brcs	.+6      	; 0x1390 <__ultoa_invert+0x7c>
    138a:	49 5d       	subi	r20, 0xD9	; 217
    138c:	31 fd       	sbrc	r19, 1
    138e:	40 52       	subi	r20, 0x20	; 32
    1390:	41 93       	st	Z+, r20
    1392:	02 d0       	rcall	.+4      	; 0x1398 <__ultoa_invert+0x84>
    1394:	a9 f7       	brne	.-22     	; 0x1380 <__ultoa_invert+0x6c>
    1396:	ea cf       	rjmp	.-44     	; 0x136c <__ultoa_invert+0x58>
    1398:	b4 e0       	ldi	r27, 0x04	; 4
    139a:	a6 95       	lsr	r26
    139c:	97 95       	ror	r25
    139e:	87 95       	ror	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	ba 95       	dec	r27
    13a6:	c9 f7       	brne	.-14     	; 0x139a <__ultoa_invert+0x86>
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	61 05       	cpc	r22, r1
    13ac:	71 05       	cpc	r23, r1
    13ae:	08 95       	ret
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	0a 2e       	mov	r0, r26
    13b6:	06 94       	lsr	r0
    13b8:	57 95       	ror	r21
    13ba:	47 95       	ror	r20
    13bc:	37 95       	ror	r19
    13be:	27 95       	ror	r18
    13c0:	ba 95       	dec	r27
    13c2:	c9 f7       	brne	.-14     	; 0x13b6 <__ultoa_invert+0xa2>
    13c4:	62 0f       	add	r22, r18
    13c6:	73 1f       	adc	r23, r19
    13c8:	84 1f       	adc	r24, r20
    13ca:	95 1f       	adc	r25, r21
    13cc:	a0 1d       	adc	r26, r0
    13ce:	08 95       	ret

000013d0 <_exit>:
    13d0:	f8 94       	cli

000013d2 <__stop_program>:
    13d2:	ff cf       	rjmp	.-2      	; 0x13d2 <__stop_program>
